{"version":3,"sources":["../../src/repository/RepositoryFactory.ts"],"names":[],"mappings":";;AAAA,mDAAgD;AAGhD,2CAAwC;AACxC,6DAA0D;AAC1D,qDAAkD;AAGlD;;GAEG;AACH;IAAA;IAqCA,CAAC;IAnCG,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,kCAAM,GAAN,UAAO,UAAsB,EAAE,QAAwB,EAAE,WAAyB;QAE9E,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YACrB,4HAA4H;YAC5H,kEAAkE;YAClE,IAAM,UAAU,GAAG,IAAI,+BAAc,EAAO,CAAC;YAC5C,UAAkB,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC;YACnD,UAAkB,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;YAC1C,UAAkB,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;YACjD,MAAM,CAAC,UAAU,CAAC;QAEtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,4HAA4H;YAC5H,kEAAkE;YAClE,IAAI,UAAU,SAAiB,CAAC;YAChC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,CAAC,CAAC,CAAC;gBAC3C,UAAU,GAAG,IAAI,iCAAe,EAAE,CAAC;YACvC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,UAAU,GAAG,IAAI,uBAAU,EAAO,CAAC;YACvC,CAAC;YACA,UAAkB,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC;YACnD,UAAkB,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;YAC1C,UAAkB,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;YAEjD,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;IACL,CAAC;IAEL,wBAAC;AAAD,CArCA,AAqCC,IAAA;AArCY,8CAAiB","file":"RepositoryFactory.js","sourcesContent":["import {TreeRepository} from \"./TreeRepository\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {Repository} from \"./Repository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoRepository} from \"./MongoRepository\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Factory used to create different types of repositories.\n */\nexport class RepositoryFactory {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a repository.\n     */\n    create(connection: Connection, metadata: EntityMetadata, queryRunner?: QueryRunner): Repository<any> {\n\n        if (metadata.isClosure) {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            const repository = new TreeRepository<any>();\n            (repository as any)[\"manager\"] = connection.manager;\n            (repository as any)[\"metadata\"] = metadata;\n            (repository as any)[\"queryRunner\"] = queryRunner;\n            return repository;\n\n        } else {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            let repository: Repository<any>;\n            if (connection.driver instanceof MongoDriver) {\n                repository = new MongoRepository();\n            } else {\n                repository = new Repository<any>();\n            }\n            (repository as any)[\"manager\"] = connection.manager;\n            (repository as any)[\"metadata\"] = metadata;\n            (repository as any)[\"queryRunner\"] = queryRunner;\n\n            return repository;\n        }\n    }\n\n}"],"sourceRoot":".."}