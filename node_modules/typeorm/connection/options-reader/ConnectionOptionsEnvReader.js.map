{"version":3,"sources":["../../src/connection/options-reader/ConnectionOptionsEnvReader.ts"],"names":[],"mappings":";;AACA,8DAA2D;AAC3D,gDAA6C;AAE7C;;;;GAIG;AACH;IAAA;IAsCA,CAAC;IApCG,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,yCAAI,GAAJ;QACI,MAAM,CAAC;YACH,IAAI,EAAE,6BAAa,CAAC,cAAc,CAAC,oBAAoB,CAAC;YACxD,GAAG,EAAE,6BAAa,CAAC,cAAc,CAAC,aAAa,CAAC;YAChD,IAAI,EAAE,6BAAa,CAAC,cAAc,CAAC,cAAc,CAAC;YAClD,IAAI,EAAE,6BAAa,CAAC,cAAc,CAAC,cAAc,CAAC;YAClD,QAAQ,EAAE,6BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC;YAC1D,QAAQ,EAAE,6BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC;YAC1D,QAAQ,EAAE,6BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC;YAC1D,GAAG,EAAE,6BAAa,CAAC,cAAc,CAAC,aAAa,CAAC;YAChD,KAAK,EAAE,6BAAa,CAAC,cAAc,CAAC,sBAAsB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,6BAAa,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC,GAAG,SAAS;YAC1I,cAAc,EAAE,mBAAQ,CAAC,SAAS,CAAC,6BAAa,CAAC,cAAc,CAAC,0BAA0B,CAAC,CAAC;YAC5F,QAAQ,EAAE,6BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,GAAG,6BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;YAC7H,UAAU,EAAE,6BAAa,CAAC,cAAc,CAAC,oBAAoB,CAAC,GAAG,6BAAa,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;YACnI,WAAW,EAAE,6BAAa,CAAC,cAAc,CAAC,qBAAqB,CAAC,GAAG,6BAAa,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;YACtI,aAAa,EAAE,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,GAAG,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;YAC9I,OAAO,EAAE;gBACL,UAAU,EAAE,mBAAQ,CAAC,SAAS,CAAC,6BAAa,CAAC,cAAc,CAAC,yBAAyB,CAAC,CAAC;gBACvF,mBAAmB,EAAE,mBAAQ,CAAC,SAAS,CAAC,6BAAa,CAAC,cAAc,CAAC,gCAAgC,CAAC,CAAC;gBACvG,oBAAoB,EAAE,mBAAQ,CAAC,SAAS,CAAC,6BAAa,CAAC,cAAc,CAAC,qCAAqC,CAAC,CAAC;aAChH;YACD,GAAG,EAAE;gBACD,WAAW,EAAE,6BAAa,CAAC,cAAc,CAAC,sBAAsB,CAAC;gBACjE,aAAa,EAAE,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC;gBACrE,cAAc,EAAE,6BAAa,CAAC,cAAc,CAAC,yBAAyB,CAAC;aAC1E;SACJ,CAAC;IACN,CAAC;IAEL,iCAAC;AAAD,CAtCA,AAsCC,IAAA;AAtCY,gEAA0B","file":"ConnectionOptionsEnvReader.js","sourcesContent":["import {ConnectionOptions} from \"../ConnectionOptions\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\n\n/**\n * Reads connection options from environment variables.\n * Environment variables can have only a single connection.\n * Its strongly required to define TYPEORM_CONNECTION env variable.\n */\nexport class ConnectionOptionsEnvReader {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads connection options from environment variables.\n     */\n    read(): ConnectionOptions {\n        return {\n            type: PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\"),\n            url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\n            host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\n            port: PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\n            username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\n            password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\n            database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\n            sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\n            extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")) : undefined,\n            autoSchemaSync: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_AUTO_SCHEMA_SYNC\")),\n            entities: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\").split(\",\") : [],\n            migrations: PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS\") ? PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS\").split(\",\") : [],\n            subscribers: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\") ? PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\").split(\",\") : [],\n            entitySchemas: PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\").split(\",\") : [],\n            logging: {\n                logQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_QUERIES\")),\n                logFailedQueryError: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_FAILED_QUERIES\")),\n                logOnlyFailedQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_ONLY_FAILED_QUERIES\")),\n            },\n            cli: {\n                entitiesDir: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES_DIR\"),\n                migrationsDir: PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_DIR\"),\n                subscribersDir: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS_DIR\"),\n            }\n        };\n    }\n\n}\n"],"sourceRoot":"../.."}