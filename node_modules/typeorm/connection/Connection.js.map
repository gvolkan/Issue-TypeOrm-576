{"version":3,"sources":["../../src/connection/Connection.ts"],"names":[],"mappings":"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","file":"Connection.js","sourcesContent":["import {Driver} from \"../driver/Driver\";\nimport {Repository} from \"../repository/Repository\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\nimport {RepositoryNotFoundError} from \"./error/RepositoryNotFoundError\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\nimport {CannotExecuteNotConnectedError} from \"./error/CannotExecuteNotConnectedError\";\nimport {CannotConnectAlreadyConnectedError} from \"./error/CannotConnectAlreadyConnectedError\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {RepositoryNotTreeError} from \"./error/RepositoryNotTreeError\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Logger} from \"../logger/Logger\";\nimport {EntityMetadataNotFound} from \"../metadata-args/error/EntityMetadataNotFound\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {EntityMetadataValidator} from \"../metadata-builder/EntityMetadataValidator\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\nimport {EntityManagerFactory} from \"../entity-manager/EntityManagerFactory\";\nimport {LoggerFactory} from \"../logger/LoggerFactory\";\nimport {RepositoryFactory} from \"../repository/RepositoryFactory\";\nimport {DriverFactory} from \"../driver/DriverFactory\";\nimport {ConnectionMetadataBuilder} from \"./ConnectionMetadataBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Connection is a single database ORM connection to a specific DBMS database.\n * Its not required to be a database connection, depend on database type it can create connection pool.\n * You can have multiple connections to multiple databases in your application.\n */\nexport class Connection {\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     */\n    readonly name: string;\n\n    /**\n     * Connection options.\n     */\n    readonly options: ConnectionOptions;\n\n    /**\n     * Indicates if connection is initialized or not.\n     */\n    readonly isConnected = false;\n\n    /**\n     * Database driver used by this connection.\n     */\n    readonly driver: Driver;\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    readonly namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Logger used to log orm events.\n     */\n    readonly logger: Logger;\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = [];\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = [];\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: ConnectionOptions) {\n        this.name = options.name || \"default\";\n        this.options = options;\n        this.logger = new LoggerFactory().create(this.options.logging || {});\n        this.driver = new DriverFactory().create(this);\n        this.manager = new EntityManagerFactory().create(this);\n        this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!(this.manager instanceof MongoEntityManager))\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\n\n        return this.manager as MongoEntityManager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async connect(): Promise<this> {\n        if (this.isConnected)\n            throw new CannotConnectAlreadyConnectedError(this.name);\n\n        // connect to the database via its driver\n        await this.driver.connect();\n\n        // set connected status for the current connection\n        Object.assign(this, { isConnected: true });\n\n        try {\n\n            // build all metadatas registered in the current connection\n            this.buildMetadatas();\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchemaOnConnection && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\n                await this.dropDatabase();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.autoSchemaSync && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\n                await this.syncSchema();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.autoMigrationsRun && !PlatformTools.getEnvVariable(\"SKIP_MIGRATIONS_RUN\"))\n                await this.runMigrations();\n\n        } catch (error) {\n\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.close();\n            throw error;\n        }\n\n        return this;\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async close(): Promise<void> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        await this.driver.disconnect();\n        Object.assign(this, { isConnected: false });\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async syncSchema(dropBeforeSync: boolean = false): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        if (dropBeforeSync)\n            await this.dropDatabase();\n\n        const schemaBuilder = this.driver.createSchemaBuilder();\n        await schemaBuilder.build();\n    }\n\n    /**\n     * Returns sql queries generated by schema builder.\n     */\n    async logSyncSchema(): Promise<(string|{ up: string, down: string })[]> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const schemaBuilder = this.driver.createSchemaBuilder();\n        return schemaBuilder.log();\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    async dropDatabase(): Promise<void> {\n        const queryRunner = await this.createQueryRunner();\n        await queryRunner.clearDatabase();\n        await queryRunner.release();\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        await migrationExecutor.executePendingMigrations();\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        await migrationExecutor.undoLastMigration();\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: Function|string): boolean {\n        return !!this.findMetadata(target);\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: Function|string): EntityMetadata {\n        const metadata = this.findMetadata(target);\n        if (!metadata)\n            throw new EntityMetadataNotFound(target);\n\n        return metadata;\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity>(target: ObjectType<Entity>|string): Repository<Entity> {\n        return this.getMetadata(target).repository;\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @ClosureEntity decorator.\n     */\n    getTreeRepository<Entity>(target: ObjectType<Entity>|string): TreeRepository<Entity> {\n        if (this.driver instanceof MongoDriver)\n            throw new Error(`You cannot use getTreeRepository for MongoDB connections.`);\n\n        if (!this.hasMetadata(target))\n            throw new RepositoryNotFoundError(this.name, target);\n\n        const repository = this.getMetadata(target).repository;\n        if (!(repository instanceof TreeRepository))\n            throw new RepositoryNotTreeError(target);\n\n        return repository;\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity>(target: ObjectType<Entity>|string): MongoRepository<Entity> {\n        if (!(this.driver instanceof MongoDriver))\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\n\n        if (!this.hasMetadata(target))\n            throw new RepositoryNotFoundError(this.name, target);\n\n        return this.getMetadata(target).repository as MongoRepository<Entity>;\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository);\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>, queryRunner?: QueryRunner): Promise<any> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Transactions aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n        const transactionEntityManager = new EntityManagerFactory().create(this, usedQueryRunner);\n\n        try {\n            await usedQueryRunner.startTransaction();\n            const result = await runInTransaction(transactionEntityManager);\n            await usedQueryRunner.commitTransaction();\n            return result;\n\n        } catch (err) {\n            try { // we throw original error even if rollback thrown an error\n                await usedQueryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw err;\n\n        } finally {\n            if (!queryRunner) // if we used a new query runner provider then release it\n                await usedQueryRunner.release();\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[], queryRunner?: QueryRunner): Promise<any> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Queries aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n\n        try {\n            return await usedQueryRunner.query(query, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (!queryRunner)\n                await usedQueryRunner.release();\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityOrRunner?: ObjectType<Entity>|Function|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Query Builder is not supported by MongoDB.`);\n\n        if (alias) {\n            const metadata = this.getMetadata(entityOrRunner as Function|string);\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias);\n\n        } else {\n            return new SelectQueryBuilder(this, entityOrRunner as QueryRunner|undefined);\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     */\n    createQueryRunner(): QueryRunner {\n        return this.driver.createQueryRunner();\n    }\n\n    /**\n     * Creates a new entity manager with a single opened connection to the database.\n     * This may be useful if you want to perform all db queries within one connection.\n     * After finishing with entity manager, don't forget to release it (to release database connection back to pool).\n     */\n    createIsolatedManager(queryRunner?: QueryRunner): EntityManager {\n        if (queryRunner && queryRunner.manager && queryRunner.manager !== this.manager)\n            return queryRunner.manager;\n\n        if (!queryRunner)\n            queryRunner = this.createQueryRunner();\n\n        Object.assign(queryRunner, { manager: new EntityManagerFactory().create(this, queryRunner) });\n        return queryRunner.manager;\n    }\n\n    /**\n     * Creates a new repository with a single opened connection to the database.\n     * This may be useful if you want to perform all db queries within one connection.\n     * After finishing with entity manager, don't forget to release it (to release database connection back to pool).\n     */\n    createIsolatedRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, queryRunner?: QueryRunner): Repository<Entity> {\n        if (!queryRunner)\n            queryRunner = this.createQueryRunner();\n        return new RepositoryFactory().create(this, this.getMetadata(entityClassOrName), queryRunner);\n    }\n\n    // -------------------------------------------------------------------------\n    // Deprecated Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity in this connection.\n     *\n     * @deprecated use manager instead.\n     */\n    get entityManager(): EntityManager {\n        return this.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(target: Function|string): EntityMetadata|undefined {\n        return this.entityMetadatas.find(metadata => {\n            if (metadata.target === target)\n                return true;\n            if (typeof target === \"string\")\n                return metadata.name === target || metadata.tableName === target;\n\n            return false;\n        });\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected buildMetadatas(): void {\n\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\n        const repositoryFactory = new RepositoryFactory();\n        const entityMetadataValidator = new EntityMetadataValidator();\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        if (!PlatformTools.getEnvVariable(\"SKIP_SUBSCRIBERS_LOADING\")) {\n            const subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);\n            Object.assign(this, { subscribers: subscribers });\n        }\n\n        // build entity metadatas\n        const entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || [], this.options.entitySchemas || []);\n        Object.assign(this, { entityMetadatas: entityMetadatas });\n\n        // create migration instances\n        const migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);\n        Object.assign(this, { migrations: migrations });\n\n        // initialize repositories for all entity metadatas\n        this.entityMetadatas.forEach(metadata => {\n            metadata.repository = repositoryFactory.create(this, metadata);\n        });\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(this.entityMetadatas);\n    }\n\n}"],"sourceRoot":".."}