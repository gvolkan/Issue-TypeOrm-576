{"version":3,"sources":["../../src/query-builder/InsertQueryBuilder.ts"],"names":[],"mappings":"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","file":"InsertQueryBuilder.js","sourcesContent":["import {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ObjectType} from \"../common/ObjectType\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class InsertQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createInsertExpression();\n        return sql.trim();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies INTO which entity's table insertion will be executed.\n     */\n    into<T>(entityTarget: ObjectType<T>|string): InsertQueryBuilder<T> {\n        this.setMainAlias(entityTarget);\n        return (this as any) as InsertQueryBuilder<T>;\n    }\n\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(values: Partial<Entity>): this;\n\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(values: Partial<Entity>[]): this;\n\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(values: ObjectLiteral|ObjectLiteral[]): this {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates INSERT express used to perform insert query.\n     */\n    protected createInsertExpression() {\n        const valueSets = this.getValueSets();\n\n        // get columns that participate in insertion query\n        const insertColumns: ColumnMetadata[] = [];\n        Object.keys(valueSets[0]).forEach(columnProperty => {\n            const column = this.expressionMap.mainAlias!.metadata.findColumnWithPropertyName(columnProperty);\n            if (column) insertColumns.push(column);\n        });\n\n        // get values needs to be inserted\n        const values = valueSets.map((valueSet, key) => {\n            const columnNames = insertColumns.map(column => {\n                const paramName = \"_inserted_\" + key + \"_\" + column.databaseName;\n                this.setParameter(paramName, valueSet[column.propertyName]);\n                return \":\" + paramName;\n            });\n            return \"(\" + columnNames.join(\",\") + \")\";\n        }).join(\", \");\n\n        // get a table name and all column database names\n        const tableName = this.escape(this.getTableName());\n        const columnNames = insertColumns.map(column => this.escape(column.databaseName)).join(\", \");\n\n        // generate sql query\n        return `INSERT INTO ${tableName}(${columnNames}) VALUES ${values}`;\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSets(): ObjectLiteral[] {\n        if (this.expressionMap.valuesSet instanceof Array && this.expressionMap.valuesSet.length > 0)\n            return this.expressionMap.valuesSet;\n\n        if (this.expressionMap.valuesSet instanceof Object)\n            return [this.expressionMap.valuesSet];\n\n        throw new Error(`Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.`);\n    }\n\n}\n"],"sourceRoot":".."}