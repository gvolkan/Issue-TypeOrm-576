{"version":3,"sources":["build/browser/typeorm/driver/types/DatabaseType.ts","build/browser/typeorm/driver/DriverOptions.ts","build/browser/typeorm/driver/types/ColumnTypes.ts","build/browser/typeorm/metadata/types/RelationTypes.ts","build/browser/typeorm/naming-strategy/NamingStrategyInterface.ts","build/browser/typeorm/metadata/types/OnDeleteType.ts","build/browser/typeorm/metadata/ForeignKeyMetadata.ts","build/browser/typeorm/common/ObjectLiteral.ts","build/browser/typeorm/metadata-args/EmbeddedMetadataArgs.ts","build/browser/typeorm/query-builder/Alias.ts","build/browser/typeorm/find-options/OrderByCondition.ts","build/browser/typeorm/query-builder/JoinOptions.ts","build/browser/typeorm/query-builder/QueryBuilderUtils.ts","build/browser/typeorm/query-builder/JoinAttribute.ts","build/browser/typeorm/query-builder/relation-id/RelationIdLoadResult.ts","build/browser/typeorm/query-builder/relation-count/RelationCountAttribute.ts","build/browser/typeorm/query-builder/relation-count/RelationCountLoadResult.ts","build/browser/typeorm/util/OrmUtils.ts","build/browser/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.ts","build/browser/typeorm/driver/error/ConnectionIsNotSetError.ts","build/browser/typeorm/driver/error/DriverPackageNotInstalledError.ts","build/browser/typeorm/driver/DriverUtils.ts","build/browser/typeorm/driver/error/TransactionAlreadyStartedError.ts","build/browser/typeorm/driver/error/TransactionNotStartedError.ts","build/browser/typeorm/metadata-args/IndexMetadataArgs.ts","build/browser/typeorm/metadata/IndexMetadata.ts","build/browser/typeorm/schema-builder/schema/IndexSchema.ts","build/browser/typeorm/schema-builder/schema/ForeignKeySchema.ts","build/browser/typeorm/schema-builder/schema/PrimaryKeySchema.ts","build/browser/typeorm/schema-builder/schema/TableSchema.ts","build/browser/typeorm/query-runner/error/QueryRunnerAlreadyReleasedError.ts","build/browser/typeorm/find-options/JoinOptions.ts","build/browser/typeorm/find-options/FindOneOptions.ts","build/browser/typeorm/find-options/FindManyOptions.ts","build/browser/typeorm/common/ObjectType.ts","build/browser/typeorm/query-runner/error/QueryRunnerProviderAlreadyReleasedError.ts","build/browser/typeorm/common/DeepPartial.ts","build/browser/typeorm/repository/RemoveOptions.ts","build/browser/typeorm/repository/SaveOptions.ts","build/browser/typeorm/entity-manager/error/NoNeedToReleaseEntityManagerError.ts","build/browser/typeorm/repository/Repository.ts","build/browser/typeorm/driver/mongodb/typings.ts","build/browser/typeorm/driver/mongodb/MongoQueryRunner.ts","build/browser/typeorm/driver/error/DriverOptionNotSetError.ts","build/browser/typeorm/platform/PlatformTools.ts","build/browser/typeorm/metadata/types/TableTypes.ts","build/browser/typeorm/decorator/options/JoinColumnOptions.ts","build/browser/typeorm/decorator/options/JoinTableMuplipleColumnsOptions.ts","build/browser/typeorm/entity-schema/EntitySchema.ts","build/browser/typeorm/logger/LoggerOptions.ts","build/browser/typeorm/connection/BaseConnectionOptions.ts","build/browser/typeorm/driver/mongodb/MongoConnectionOptions.ts","build/browser/typeorm/driver/types/MappedColumnTypes.ts","build/browser/typeorm/schema-builder/SchemaBuilder.ts","build/browser/typeorm/schema-builder/MongoSchemaBuilder.ts","build/browser/typeorm/driver/mongodb/MongoDriver.ts","build/browser/typeorm/query-builder/transformer/DocumentToEntityTransformer.ts","build/browser/typeorm/find-options/FindOptionsUtils.ts","build/browser/typeorm/entity-manager/MongoEntityManager.ts","build/browser/typeorm/repository/MongoRepository.ts","build/browser/typeorm/repository/TreeRepository.ts","build/browser/typeorm/util/DateUtils.ts","build/browser/typeorm/persistence/Subject.ts","build/browser/typeorm/persistence/SubjectBuilder.ts","build/browser/typeorm/util/PromiseUtils.ts","build/browser/typeorm/subscriber/event/UpdateEvent.ts","build/browser/typeorm/subscriber/event/RemoveEvent.ts","build/browser/typeorm/subscriber/event/InsertEvent.ts","build/browser/typeorm/subscriber/EntitySubscriberInterface.ts","build/browser/typeorm/metadata/types/EventListenerTypes.ts","build/browser/typeorm/metadata-args/EntityListenerMetadataArgs.ts","build/browser/typeorm/metadata/EntityListenerMetadata.ts","build/browser/typeorm/subscriber/Broadcaster.ts","build/browser/typeorm/persistence/SubjectOperationExecutor.ts","build/browser/typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer.ts","build/browser/typeorm/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts","build/browser/typeorm/repository/error/CustomRepositoryNotFoundError.ts","build/browser/typeorm/repository/error/CustomRepositoryDoesNotHaveEntityError.ts","build/browser/typeorm/repository/AbstractRepository.ts","build/browser/typeorm/repository/error/CustomRepositoryCannotInheritRepositoryError.ts","build/browser/typeorm/entity-manager/EntityManager.ts","build/browser/typeorm/driver/sqlserver/SqlServerQueryRunner.ts","build/browser/typeorm/schema-builder/RdbmsSchemaBuilder.ts","build/browser/typeorm/driver/sqlserver/SqlServerConnectionOptions.ts","build/browser/typeorm/driver/sqlserver/SqlServerDriver.ts","build/browser/typeorm/query-builder/error/PessimisticLockTransactionRequiredError.ts","build/browser/typeorm/query-builder/error/NoVersionOrUpdateDateColumnError.ts","build/browser/typeorm/query-builder/error/OptimisticLockVersionMismatchError.ts","build/browser/typeorm/query-builder/error/OptimisticLockCanNotBeUsedError.ts","build/browser/typeorm/query-builder/relation-id/RelationIdLoader.ts","build/browser/typeorm/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.ts","build/browser/typeorm/query-builder/relation-count/RelationCountLoader.ts","build/browser/typeorm/metadata-args/RelationCountMetadataArgs.ts","build/browser/typeorm/metadata/RelationCountMetadata.ts","build/browser/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.ts","build/browser/typeorm/query-builder/error/LockNotSupportedOnGivenDriverError.ts","build/browser/typeorm/driver/mysql/MysqlQueryRunner.ts","build/browser/typeorm/driver/mysql/MysqlConnectionOptions.ts","build/browser/typeorm/driver/mysql/MysqlDriver.ts","build/browser/typeorm/driver/postgres/PostgresQueryRunner.ts","build/browser/typeorm/driver/postgres/PostgresConnectionOptions.ts","build/browser/typeorm/driver/postgres/PostgresDriver.ts","build/browser/typeorm/driver/oracle/OracleQueryRunner.ts","build/browser/typeorm/driver/oracle/OracleConnectionOptions.ts","build/browser/typeorm/driver/oracle/OracleDriver.ts","build/browser/typeorm/query-builder/SelectQuery.ts","build/browser/typeorm/query-builder/SelectQueryBuilder.ts","build/browser/typeorm/query-builder/relation-id/RelationIdAttribute.ts","build/browser/typeorm/query-builder/QueryExpressionMap.ts","build/browser/typeorm/query-builder/UpdateQueryBuilder.ts","build/browser/typeorm/query-builder/DeleteQueryBuilder.ts","build/browser/typeorm/query-builder/InsertQueryBuilder.ts","build/browser/typeorm/query-builder/RelationQueryBuilder.ts","build/browser/typeorm/query-builder/QueryBuilder.ts","build/browser/typeorm/metadata-args/RelationIdMetadataArgs.ts","build/browser/typeorm/metadata/RelationIdMetadata.ts","build/browser/typeorm/metadata/EmbeddedMetadata.ts","build/browser/typeorm/decorator/options/RelationOptions.ts","build/browser/typeorm/metadata/types/PropertyTypeInFunction.ts","build/browser/typeorm/metadata/types/RelationTypeInFunction.ts","build/browser/typeorm/metadata-args/RelationMetadataArgs.ts","build/browser/typeorm/metadata/RelationMetadata.ts","build/browser/typeorm/lazy-loading/LazyRelationsWrapper.ts","build/browser/typeorm/metadata-args/TableMetadataArgs.ts","build/browser/typeorm/metadata/EntityMetadata.ts","build/browser/typeorm/decorator/options/ColumnOptions.ts","build/browser/typeorm/metadata-args/types/ColumnMode.ts","build/browser/typeorm/metadata-args/ColumnMetadataArgs.ts","build/browser/typeorm/metadata/ColumnMetadata.ts","build/browser/typeorm/schema-builder/schema/ColumnSchema.ts","build/browser/typeorm/query-runner/QueryRunner.ts","build/browser/typeorm/driver/Driver.ts","build/browser/typeorm/connection/error/RepositoryNotFoundError.ts","build/browser/typeorm/util/RandomGenerator.ts","build/browser/typeorm/util/StringUtils.ts","build/browser/typeorm/naming-strategy/DefaultNamingStrategy.ts","build/browser/typeorm/connection/error/CannotExecuteNotConnectedError.ts","build/browser/typeorm/connection/error/CannotConnectAlreadyConnectedError.ts","build/browser/typeorm/connection/error/RepositoryNotTreeError.ts","build/browser/typeorm/logger/Logger.ts","build/browser/typeorm/metadata-args/error/EntityMetadataNotFound.ts","build/browser/typeorm/migration/MigrationInterface.ts","build/browser/typeorm/migration/Migration.ts","build/browser/typeorm/migration/MigrationExecutor.ts","build/browser/typeorm/metadata-builder/error/MissingPrimaryColumnError.ts","build/browser/typeorm/metadata-builder/error/CircularRelationsError.ts","build/browser/typeorm/util/DepGraph.ts","build/browser/typeorm/metadata-builder/EntityMetadataValidator.ts","build/browser/typeorm/driver/sqlite/SqliteConnectionOptions.ts","build/browser/typeorm/driver/websql/WebSqlConnectionOptions.ts","build/browser/typeorm/connection/ConnectionOptions.ts","build/browser/typeorm/entity-manager/EntityManagerFactory.ts","build/browser/typeorm/logger/LoggerFactory.ts","build/browser/typeorm/repository/RepositoryFactory.ts","build/browser/typeorm/driver/error/MissingDriverError.ts","build/browser/typeorm/driver/websql/WebsqlQueryRunner.ts","build/browser/typeorm/driver/websql/WebsqlDriver.ts","build/browser/typeorm/driver/sqlite/SqliteQueryRunner.ts","build/browser/typeorm/driver/sqlite/SqliteDriver.ts","build/browser/typeorm/driver/DriverFactory.ts","build/browser/typeorm/util/DirectoryExportedClassesLoader.ts","build/browser/typeorm/container.ts","build/browser/typeorm/metadata-args/NamingStrategyMetadataArgs.ts","build/browser/typeorm/metadata-args/JoinColumnMetadataArgs.ts","build/browser/typeorm/metadata-args/JoinTableMetadataArgs.ts","build/browser/typeorm/metadata-args/EntitySubscriberMetadataArgs.ts","build/browser/typeorm/metadata-args/InheritanceMetadataArgs.ts","build/browser/typeorm/metadata-args/DiscriminatorValueMetadataArgs.ts","build/browser/typeorm/metadata-args/EntityRepositoryMetadataArgs.ts","build/browser/typeorm/metadata-args/TransactionEntityMetadataArgs.ts","build/browser/typeorm/metadata-builder/MetadataUtils.ts","build/browser/typeorm/metadata-args/MetadataArgsStorage.ts","build/browser/typeorm/metadata-builder/JunctionEntityMetadataBuilder.ts","build/browser/typeorm/metadata-builder/ClosureJunctionEntityMetadataBuilder.ts","build/browser/typeorm/metadata-builder/RelationJoinColumnBuilder.ts","build/browser/typeorm/metadata-builder/EntityMetadataBuilder.ts","build/browser/typeorm/decorator/options/JoinTableOptions.ts","build/browser/typeorm/entity-schema/EntitySchemaTransformer.ts","build/browser/typeorm/connection/ConnectionMetadataBuilder.ts","build/browser/typeorm/connection/Connection.ts","build/browser/typeorm/connection/error/ConnectionNotFoundError.ts","build/browser/typeorm/connection/error/AlreadyHasActiveConnectionError.ts","build/browser/typeorm/connection/ConnectionManager.ts","build/browser/typeorm/connection/options-reader/ConnectionOptionsEnvReader.ts","build/browser/typeorm/connection/options-reader/ConnectionOptionsYmlReader.ts","build/browser/typeorm/connection/options-reader/ConnectionOptionsXmlReader.ts","build/browser/typeorm/connection/ConnectionOptionsReader.ts","build/browser/typeorm/decorator/error/GeneratedOnlyForPrimaryError.ts","build/browser/typeorm/decorator/options/ColumnCommonOptions.ts","build/browser/typeorm/decorator/options/ColumnWithLengthOptions.ts","build/browser/typeorm/decorator/options/ColumnNumericOptions.ts","build/browser/typeorm/decorator/options/ColumnEnumOptions.ts","build/browser/typeorm/decorator/options/ColumnEmbeddedOptions.ts","build/browser/typeorm/decorator/columns/Column.ts","build/browser/typeorm/decorator/columns/CreateDateColumn.ts","build/browser/typeorm/decorator/columns/DiscriminatorColumn.ts","build/browser/typeorm/decorator/error/PrimaryColumnCannotBeNullableError.ts","build/browser/typeorm/decorator/columns/PrimaryGeneratedColumn.ts","build/browser/typeorm/decorator/error/ColumnTypeUndefinedError.ts","build/browser/typeorm/decorator/columns/PrimaryColumn.ts","build/browser/typeorm/decorator/columns/UpdateDateColumn.ts","build/browser/typeorm/decorator/columns/VersionColumn.ts","build/browser/typeorm/decorator/columns/ObjectIdColumn.ts","build/browser/typeorm/decorator/listeners/AfterInsert.ts","build/browser/typeorm/decorator/listeners/AfterLoad.ts","build/browser/typeorm/decorator/listeners/AfterRemove.ts","build/browser/typeorm/decorator/listeners/AfterUpdate.ts","build/browser/typeorm/decorator/listeners/BeforeInsert.ts","build/browser/typeorm/decorator/listeners/BeforeRemove.ts","build/browser/typeorm/decorator/listeners/BeforeUpdate.ts","build/browser/typeorm/decorator/listeners/EventSubscriber.ts","build/browser/typeorm/decorator/options/IndexOptions.ts","build/browser/typeorm/decorator/options/EntityOptions.ts","build/browser/typeorm/decorator/relations/RelationCount.ts","build/browser/typeorm/decorator/relations/JoinColumn.ts","build/browser/typeorm/decorator/relations/JoinTable.ts","build/browser/typeorm/decorator/relations/ManyToMany.ts","build/browser/typeorm/decorator/relations/ManyToOne.ts","build/browser/typeorm/decorator/relations/OneToMany.ts","build/browser/typeorm/decorator/relations/OneToOne.ts","build/browser/typeorm/decorator/relations/RelationId.ts","build/browser/typeorm/decorator/entity/Entity.ts","build/browser/typeorm/decorator/entity/AbstractEntity.ts","build/browser/typeorm/decorator/entity/ClassEntityChild.ts","build/browser/typeorm/decorator/entity/ClosureEntity.ts","build/browser/typeorm/decorator/entity/EmbeddableEntity.ts","build/browser/typeorm/decorator/entity/SingleEntityChild.ts","build/browser/typeorm/decorator/entity/TableInheritance.ts","build/browser/typeorm/decorator/transaction/Transaction.ts","build/browser/typeorm/decorator/transaction/TransactionEntityManager.ts","build/browser/typeorm/decorator/tree/TreeLevelColumn.ts","build/browser/typeorm/decorator/tree/TreeParent.ts","build/browser/typeorm/decorator/tree/TreeChildren.ts","build/browser/typeorm/decorator/Index.ts","build/browser/typeorm/decorator/Embedded.ts","build/browser/typeorm/decorator/DiscriminatorValue.ts","build/browser/typeorm/decorator/EntityRepository.ts","build/browser/typeorm/repository/BaseEntity.ts","build/browser/typeorm/index.ts","build/browser/typeorm.ts","build/browser/typeorm/schema-builder/Schema.ts","build/browser/typeorm/query-runner/QueryRunnerProvider.ts","build/browser/typeorm/connection/error/CannotDetermineConnectionOptionsError.ts","build/browser/typeorm/connection/error/CannotGetEntityManagerNotConnectedError.ts","build/browser/typeorm/connection/error/CannotImportAlreadyConnectedError.ts","build/browser/typeorm/connection/error/CannotRunMigrationNotConnectedError.ts","build/browser/typeorm/connection/error/CannotSyncNotConnectedError.ts","build/browser/typeorm/connection/error/CannotUseNamingStrategyNotConnectedError.ts","build/browser/typeorm/connection/error/NamingStrategyNotFoundError.ts","build/browser/typeorm/connection/error/NoConnectionForRepositoryError.ts","build/browser/typeorm/driver/error/DataTypeNotSupportedByDriverError.ts","build/browser/typeorm/driver/error/DriverPackageLoadError.ts","build/browser/typeorm/driver/error/DriverPoolingNotSupportedError.ts","build/browser/typeorm/driver/mysql/MysqlColumnTypes.ts","build/browser/typeorm/driver/postgres/PostgresColumnTypes.ts","build/browser/typeorm/metadata-builder/error/MetadataAlreadyExistsError.ts","build/browser/typeorm/metadata-builder/error/MetadataWithSuchNameAlreadyExistsError.ts","build/browser/typeorm/metadata-builder/error/MissingJoinColumnError.ts","build/browser/typeorm/metadata-builder/error/MissingJoinTableError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinColumnIsNotAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinColumnOnlyOnOneSideAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinTableIsNotAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinTableOnlyOnOneSideAllowedError.ts","build/browser/typeorm/persistence/error/CascadesNotAllowedError.ts","build/browser/typeorm/persistence/error/PersistedEntityNotFoundError.ts","build/browser/typeorm/repository/error/CustomRepositoryReusedError.ts"],"names":[],"mappings":"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","file":"typeorm-browser.js","sourcesContent":["/**\n * Database type.\n */\nexport type DatabaseType =\n    \"mysql\"|\n    \"postgres\"|\n    \"mariadb\"|\n    \"sqlite\"|\n    \"oracle\"|\n    \"mssql\"|\n    \"websql\"|\n    \"mongodb\";\n","import {DatabaseType} from \"./types/DatabaseType\";\n\n/**\n * Connectivity options used to connect to the database, and other database-driver-specific options.\n *\n * @deprecated\n */\nexport interface DriverOptions {\n\n    /**\n     * Database type. This value is required.\n     */\n    type?: DatabaseType;\n\n    /**\n     * Connection url to where perform connection to.\n     */\n    url?: string;\n\n    /**\n     * Database host.\n     */\n    host?: string;\n\n    /**\n     * Database host port.\n     */\n    port?: number;\n\n    /**\n     * Database username.\n     */\n    username?: string;\n\n    /**\n     * Database password.\n     */\n    password?: string;\n\n    /**\n     * Database name to connect to.\n     * Storage type or path to the database (used for SQLite databases).\n     */\n    database?: string;\n\n    /**\n     * Schema name. By default is \"public\" (used only in Postgres databases).\n     */\n    schemaName?: string;\n\n    /**\n     * Connection SID (used for Oracle databases).\n     */\n    sid?: string;\n\n    /**\n     * Extra connection options to be passed to the underlying driver.\n     */\n    extra?: any;\n\n    /**\n     * Prefix to use on all tables (collections) of this connection in the database.\n     *\n     * @todo: rename to entityPrefix\n     */\n    tablesPrefix?: string;\n\n}\n","\n/**\n * Column types where precision and scale properties are used.\n */\nexport type WithPrecisionColumnType = \"float\" // mysql, mssql, oracle, sqlite\n    |\"double\" // mysql, sqlite\n    |\"dec\" // oracle\n    |\"decimal\" // mysql, postgres, mssql, sqlite\n    |\"numeric\" // postgres, mssql, sqlite\n    |\"real\" // mysql, postgres, mssql, oracle, sqlite\n    |\"double precision\" // postgres, oracle, sqlite\n    |\"number\"; // oracle\n\n/**\n * Column types where column length is used.\n */\nexport type WithLengthColumnType = \"int\" // mysql, postgres, mssql, oracle, sqlite\n    |\"tinyint\" // mysql, mssql, sqlite\n    |\"smallint\" // mysql, postgres, mssql, oracle, sqlite\n    |\"mediumint\" // mysql, sqlite\n    |\"bigint\" // mysql, postgres, mssql, sqlite\n    |\"character varying\" // postgres\n    |\"varying character\" // sqlite\n    |\"nvarchar\" // mssql\n    |\"character\" // mysql, postgres, sqlite\n    |\"native character\" // sqlite\n    |\"varchar\" // mysql, postgres, mssql, sqlite\n    |\"char\" // mysql, postgres, mssql, oracle\n    |\"nchar\" // mssql, oracle, sqlite\n    |\"varchar2\" // oracle\n    |\"nvarchar2\"; // oracle, sqlite\n\n/**\n * All other regular column types.\n */\nexport type SimpleColumnType =\n\n    \"simple-array\" // typeorm-specific, automatically mapped to string\n    // |\"string\" // typeorm-specific, automatically mapped to varchar depend on platform\n\n    // numeric types\n    |\"bit\" // mssql\n    |\"int2\" // postgres, sqlite\n    |\"integer\" // postgres, oracle, sqlite\n    |\"int4\" // postgres\n    |\"int8\" // postgres, sqlite\n    |\"float4\" // postgres\n    |\"float8\" // postgres\n    |\"smallserial\" // postgres\n    |\"serial2\" // postgres\n    |\"serial\" // postgres\n    |\"serial4\" // postgres\n    |\"bigserial\" // postgres\n    |\"serial8\" // postgres\n    |\"smallmoney\" // mssql\n    |\"money\" // postgres, mssql\n\n    // boolean types\n    |\"boolean\" // postgres, sqlite\n    |\"bool\" // postgres\n\n    // text/binary types\n    |\"tinyblob\" // mysql\n    |\"tinytext\" // mysql\n    |\"mediumblob\" // mysql\n    |\"mediumtext\" // mysql\n    |\"blob\" // mysql, oracle, sqlite\n    |\"text\" // mysql, postgres, mssql, sqlite\n    |\"ntext\" // mssql\n    |\"longblob\" // mysql\n    |\"longtext\" // mysql\n    |\"bytea\" // postgres\n    |\"long\" // oracle\n    |\"raw\" // oracle\n    |\"long raw\" // oracle\n    |\"bfile\" // oracle\n    |\"clob\" // oracle, sqlite\n    |\"nclob\" // oracle\n    |\"binary\" // mssql\n    |\"varbinary\" // mssql\n    |\"image\" // mssql\n\n    // date types\n    |\"timestamp\" // mysql, postgres, mssql, oracle\n    |\"timestamp without time zone\" // postgres\n    |\"timestamp with time zone\" // postgres, oracle\n    |\"timestamp with local time zone\" // oracle\n    |\"datetime\" // mssql, mysql, sqlite\n    |\"datetime2\" // mssql\n    |\"datetimeoffset\" // mssql\n    |\"smalldatetime\" // mssql\n    |\"date\" // mysql, postgres, mssql, oracle, sqlite\n    |\"time\" // mysql, postgres, mssql\n    |\"time with time zone\" // postgres\n    |\"time without time zone\" // postgres\n    |\"interval year\" // oracle\n    |\"interval day\" // oracle\n    |\"interval\" // postgres\n    |\"year\" // mysql\n\n    // geometric types\n    |\"point\" // postgres\n    |\"line\" // postgres\n    |\"lseg\" // postgres\n    |\"box\" // postgres\n    |\"circle\" // postgres\n    |\"path\" // postgres\n    |\"polygon\" // postgres\n\n    // other types\n    |\"enum\" // mysql, postgres\n    |\"cidr\" // postgres\n    |\"inet\" // postgres\n    |\"macaddr\"// postgres\n    |\"bit\" // postgres\n    |\"bit varying\" // postgres\n    |\"varbit\"// postgres\n    |\"tsvector\" // postgres\n    |\"tsquery\" // postgres\n    |\"uuid\" // postgres\n    |\"xml\" // mssql, postgres\n    |\"json\" // mysql, postgres\n    |\"jsonb\" // postgres\n    |\"varbinary\" // mssql\n    |\"cursor\" // mssql\n    |\"hierarchyid\" // mssql\n    |\"sql_variant\" // mssql\n    |\"table\" // mssql\n    |\"rowid\" // oracle\n    |\"urowid\" // oracle\n    |\"uniqueidentifier\"; // mssql\n\n/**\n * Any column type column can be.\n */\nexport type ColumnType = WithPrecisionColumnType\n    |WithLengthColumnType\n    |SimpleColumnType\n    |BooleanConstructor\n    |DateConstructor\n    |NumberConstructor\n    |StringConstructor\n    |ObjectConstructor;\n\n// \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\n// \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";\n\n// -------------------------------------------------------------------------\n// Merged Types\n// -------------------------------------------------------------------------\n/*\n/!**\n * Column types where column length is used.\n *!/\nexport type WithLengthColumnType =\n    VarcharColumnType|\n    CharColumnType|\n    IntervalColumnType|\n    BitColumnType|\n    VarbitColumnType;\n\n/!**\n * Column types where time options are used.\n *!/\nexport type WithTimeColumnType =\n    TimeColumnType|\n    TimestampColumnType;\n\n/!**\n * All other column types without extra options used.\n *!/\nexport type SimpleColumnType =\n    SmallintColumnType|\n    IntegerColumnType|\n    BigintColumnType|\n    DecimalColumnType|\n    RealColumnType|\n    DoublePrecisionColumnType|\n    SmallserialColumnType|\n    SerialColumnType|\n    BigserialColumnType|\n    MoneyColumnType|\n    TextColumnType|\n    ByteaColumnType|\n    DateColumnType|\n    BooleanColumnType|\n    PointColumnType|\n    LineColumnType|\n    LsegColumnType|\n    BoxColumnType|\n    CircleColumnType|\n    PathColumnType|\n    PolygonColumnType|\n    CidrColumnType|\n    InetColumnType|\n    MacaddrColumnType|\n    TsvectorColumnType|\n    TsqueryColumnType|\n    UUIDColumnType|\n    XmlColumnType|\n    JsonColumnType|\n    JsonbColumnType;\n\n/!**\n * All column types supported by a database.\n *!/\nexport type AllColumnType =\n    SimpleColumnType|\n    WithLengthColumnType|\n    WithTimeColumnType|\n    NumericColumnType|\n    EnumColumnType;\n\n\n/!**\n * All data types that column can be.\n *!/\nexport type ColumnType =\n    \"tinyint\"|\n    \"smallint\"|\n    \"int2\"|\n    \"mediumint\"|\n    \"integer\"|\n    \"int\"|\n    \"int4\"|\n    \"bigint\"|\n    \"int8\"|\n    \"decimal\"|\n    \"numeric\"|\n    \"real\"|\n    \"float4\"|\n    \"float\"|\n    \"double\"|\n    \"double precision\"|\n    \"numeric\"|\n    \"decimal\"|\n    \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\n                         \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";*/\n/*\n\n/!**\n * All data types that column can be.\n *!/\nexport class ColumnTypes {\n\n    /!**\n     * SQL VARCHAR type. Your class's property type should be a \"string\".\n     *!/\n    static STRING: ColumnType = \"string\";\n\n    /!**\n     * SQL CLOB type. Your class's property type should be a \"string\".\n     *!/\n    static TEXT: ColumnType = \"text\";\n\n    /!**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     *!/\n    static NUMBER: ColumnType = \"number\";\n\n    /!**\n     * SQL INT type. Your class's property type should be a \"number\".\n     *!/\n    static INTEGER: ColumnType = \"integer\";\n\n    /!**\n     * SQL INT type. Your class's property type should be a \"number\".\n     *!/\n    static INT: ColumnType = \"int\";\n\n    /!**\n     * SQL SMALLINT type. Your class's property type should be a \"number\".\n     *!/\n    static SMALLINT: ColumnType = \"smallint\";\n\n    /!**\n     * SQL BIGINT type. Your class's property type should be a \"number\".\n     *!/\n    static BIGINT: ColumnType = \"bigint\";\n\n    /!**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     *!/\n    static FLOAT: ColumnType = \"float\";\n\n    /!**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     *!/\n    static DOUBLE: ColumnType = \"double\";\n\n    /!**\n     * SQL DECIMAL type. Your class's property type should be a \"string\".\n     *!/\n    static DECIMAL: ColumnType = \"decimal\";\n\n    /!**\n     * SQL DATETIME type. Your class's property type should be a \"Date\" object.\n     *!/\n    static DATE: ColumnType = \"date\";\n\n    /!**\n     * SQL TIME type. Your class's property type should be a \"Date\" object.\n     *!/\n    static TIME: ColumnType = \"time\";\n\n    /!**\n     * SQL DATETIME/TIMESTAMP type. Your class's property type should be a \"Date\" object.\n     *!/\n    static DATETIME: ColumnType = \"datetime\";\n\n    /!**\n     * SQL BOOLEAN type. Your class's property type should be a \"boolean\".\n     *!/\n    static BOOLEAN: ColumnType = \"boolean\";\n\n    /!**\n     * SQL CLOB type. Your class's property type should be any Object.\n     *!/\n    static JSON: ColumnType = \"json\";\n\n    /!**\n     * Postgres jsonb type. Your class's property type should be any Object.\n     *!/\n    static JSONB: ColumnType = \"jsonb\";\n\n    /!**\n     * SQL CLOB type. Your class's property type should be array of string. Note: value in this column should not contain\n     * a comma (\",\") since this symbol is used to create a string from the array, using .join(\",\") operator.\n     *!/\n    static SIMPLE_ARRAY: ColumnType = \"simple_array\";\n\n    /!**\n     * UUID type. Serialized to a string in typescript or javascript\n     *!/\n    static UUID: ColumnType = \"uuid\";\n\n    /!**\n     * Checks if given type in a string format is supported by ORM.\n     *!/\n    static isTypeSupported(type: string) {\n        return this.supportedTypes.indexOf(<ColumnType> type) !== -1;\n    }\n\n    /!**\n     * Returns list of all supported types by the ORM.\n     *!/\n    static get supportedTypes() {\n        return [\n            this.STRING,\n            this.TEXT,\n            this.NUMBER,\n            this.INTEGER,\n            this.INT,\n            this.SMALLINT,\n            this.BIGINT,\n            this.FLOAT,\n            this.DOUBLE,\n            this.DECIMAL,\n            this.DATE,\n            this.TIME,\n            this.DATETIME,\n            this.BOOLEAN,\n            this.JSON,\n            this.JSONB,\n            this.SIMPLE_ARRAY,\n            this.UUID\n        ];\n    }\n\n    /!**\n     * Tries to guess a column type from the given function.\n     *!/\n    static determineTypeFromFunction(type: Function): ColumnType|undefined {\n        if (type instanceof Date) {\n            return ColumnTypes.DATETIME;\n\n        } else if (type instanceof Function) {\n            const typeName = (<any>type).name.toLowerCase();\n            switch (typeName) {\n                case \"number\":\n                    return ColumnTypes.NUMBER;\n                case \"boolean\":\n                    return ColumnTypes.BOOLEAN;\n                case \"string\":\n                    return ColumnTypes.STRING;\n                case \"date\":\n                    return ColumnTypes.DATETIME;\n                case \"object\":\n                    return ColumnTypes.JSON;\n            }\n\n        } else if (type instanceof Object) {\n            return ColumnTypes.JSON;\n\n        }\n\n        return undefined;\n    }\n\n    static typeToString(type: Function): string {\n        return (type as any).name.toLowerCase();\n    }\n\n    /!**\n     * Checks if column type is numeric.\n     *!/\n    static isNumeric(type: ColumnType) {\n        return  type === ColumnTypes.NUMBER ||\n                type === ColumnTypes.INT ||\n                type === ColumnTypes.INTEGER ||\n                type === ColumnTypes.BIGINT ||\n                type === ColumnTypes.SMALLINT ||\n                type === ColumnTypes.DOUBLE ||\n                type === ColumnTypes.FLOAT;\n    }\n\n}*/\n","/**\n * All types that relation can be.\n */\nexport type RelationType = \"one-to-one\"|\"one-to-many\"|\"many-to-one\"|\"many-to-many\";","/**\n * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be\n * generated.\n */\nexport interface NamingStrategyInterface {\n\n    /**\n     * Naming strategy name.\n     */\n    name?: string;\n\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName: string, userSpecifiedName: string|undefined): string;\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string;\n\n    /**\n     * Gets the table's column name from the given property name.\n     */\n    columnName(propertyName: string, customName: string|undefined, embeddedPrefixes: string[]): string;\n\n    /**\n     * Gets the table's relation name from the given property name.\n     */\n    relationName(propertyName: string): string;\n\n    /**\n     * Gets the name of the index - simple and compose index.\n     */\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string;\n\n    /**\n     * Gets the name of the join column used in the one-to-one and many-to-one relations.\n     */\n    joinColumnName(relationName: string, referencedColumnName: string): string;\n\n    /**\n     * Gets the name of the join table used in the many-to-many relations.\n     */\n    joinTableName(firstTableName: string,\n                  secondTableName: string,\n                  firstPropertyName: string,\n                  secondPropertyName: string): string;\n\n    /**\n     * Columns in join tables can have duplicate names in case of self-referencing.\n     * This method provide a resolution for such column names.\n     */\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string;\n\n    /**\n     * Gets the name of the column used for columns in the junction tables.\n     */\n    joinTableColumnName(tableName: string, propertyName: string, columnName?: string): string;\n\n    /**\n     * Gets the name of the foreign key.\n     */\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string;\n\n    /**\n     * Gets the column name of the column with foreign key to the parent table used in the class table inheritance.\n     */\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string;\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string;\n\n}","\n/**\n * ON_DELETE type to be used to specify delete strategy when some relation is being deleted from the database.\n */\nexport type OnDeleteType = \"RESTRICT\"|\"CASCADE\"|\"SET NULL\";\n","import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {OnDeleteType} from \"./types/OnDeleteType\";\n\n/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this foreign key is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata which this foreign key references.\n     */\n    referencedEntityMetadata: EntityMetadata;\n\n    /**\n     * Array of columns of this foreign key.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Array of referenced columns.\n     */\n    referencedColumns: ColumnMetadata[] = [];\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType;\n\n    /**\n     * Gets the table name to which this foreign key is applied.\n     */\n    tableName: string;\n\n    /**\n     * Gets the table name to which this foreign key is referenced.\n     */\n    referencedTableName: string;\n\n    /**\n     * Gets foreign key name.\n     */\n    name: string;\n\n    /**\n     * Gets array of column names.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Gets array of referenced column names.\n     */\n    referencedColumnNames: string[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        referencedEntityMetadata: EntityMetadata,\n        namingStrategy?: NamingStrategyInterface,\n        columns: ColumnMetadata[],\n        referencedColumns: ColumnMetadata[],\n        onDelete?: OnDeleteType\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\n        this.columns = options.columns;\n        this.referencedColumns = options.referencedColumns;\n        this.onDelete = options.onDelete;\n        if (options.namingStrategy)\n            this.build(options.namingStrategy);\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    build(namingStrategy: NamingStrategyInterface) {\n        this.columnNames = this.columns.map(column => column.databaseName);\n        this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);\n        this.tableName = this.entityMetadata.tableName;\n        this.referencedTableName = this.referencedEntityMetadata.tableName;\n        this.name = namingStrategy.foreignKeyName(this.tableName, this.columnNames, this.referencedEntityMetadata.tableName, this.referencedColumnNames);\n    }\n\n}","/**\n * Interface of the simple literal object with any string keys.\n */\nexport interface ObjectLiteral {\n    [key: string]: any;\n}\n","/**\n * Arguments for EmbeddedMetadata class.\n */\nexport interface EmbeddedMetadataArgs {\n\n    /**\n     * Class to which this column is applied.\n     */\n    target: Function;\n\n    /**\n     * Class's property name to which this column is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Indicates if this embedded is array or not.\n     */\n    isArray: boolean;\n\n    /**\n     * Prefix of the embedded, used instead of propertyName.\n     * If set to empty string, then prefix is not set at all.\n     */\n    prefix?: string|boolean;\n\n    /**\n     * Type of the class to be embedded.\n     */\n    type: ((type?: any) => Function);\n\n}\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\n/**\n */\nexport class Alias {\n\n    name: string;\n\n    /**\n     * Table on which this alias is applied.\n     * Used only for aliases which select custom tables.\n     */\n    tableName?: string;\n\n    /**\n     * If this alias is for sub query.\n     */\n    subQuery?: string;\n\n    constructor(alias?: Alias) {\n        Object.assign(this, alias || {});\n    }\n\n    private _metadata?: EntityMetadata;\n\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    get hasMetadata(): boolean {\n        return !!this._metadata;\n    }\n\n    set metadata(metadata: EntityMetadata) {\n        this._metadata = metadata;\n    }\n\n    get metadata(): EntityMetadata {\n        if (!this._metadata)\n            throw new Error(`Cannot get entity metadata for the given alias \"${this.name}\"`);\n\n        return this._metadata;\n    }\n\n}","export type OrderByCondition = { [columnName: string]: \"ASC\"|\"DESC\" };\n","export interface JoinOptions {\n    limit?: number;\n}","/**\n * Helper utility functions for QueryBuilder.\n */\nexport class QueryBuilderUtils {\n\n    /**\n     * Checks if given value is a string representation of alias property,\n     * e.g. \"post.category\" or \"post.id\".\n     */\n    static isAliasProperty(str: any): str is string {\n\n        // alias property must be a string and must have a dot separator\n        if (typeof str !== \"string\" || str.indexOf(\".\") === -1)\n            return false;\n\n        // extra alias and its property relation\n        const [aliasName, propertyName] = str.split(\".\"); // todo: what about relations in embedded?\n        if (!aliasName || !propertyName)\n            return false;\n\n        // alias and property must be represented in a special format\n        const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n        if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n            return false;\n\n        return true;\n    }\n\n}\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {JoinOptions} from \"./JoinOptions\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {QueryBuilderUtils} from \"./QueryBuilderUtils\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {Alias} from \"./Alias\";\n\n/**\n * Stores all join attributes which will be used to build a JOIN query.\n */\nexport class JoinAttribute {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Join direction.\n     */\n    direction: \"LEFT\"|\"INNER\";\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias: Alias;\n\n    /**\n     * Joined table, entity target, or relation in \"post.category\" format.\n     */\n    entityOrProperty: Function|string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    condition?: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty?: string;\n\n    /**\n     * Indicates if user maps one or many objects from the join.\n     */\n    isMappingMany?: boolean;\n\n    /**\n     * Extra join options.\n     */\n    options?: JoinOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection,\n                private queryExpressionMap: QueryExpressionMap,\n                private joinAttribute?: JoinAttribute) {\n        Object.assign(this, joinAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get isMany(): boolean {\n        if (this.isMappingMany !== undefined)\n            return this.isMappingMany;\n\n        if (this.relation)\n            return this.relation.isManyToMany || this.relation.isOneToMany;\n\n        return false;\n    }\n\n    /**\n     * Name of the table which we should join.\n     */\n    get tableName(): string {\n        return this.metadata ? this.metadata.tableName : this.entityOrProperty as string;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n            return undefined;\n\n        return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf(\".\"));\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath(): string|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n            return undefined;\n\n        return this.entityOrProperty.substr(this.entityOrProperty.indexOf(\".\") + 1);\n    }\n\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     * Relation can be undefined if entityOrProperty is regular entity or custom table.\n     */\n    get relation(): RelationMetadata|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n            return undefined;\n\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\n        const metadata = relationOwnerSelection.metadata.parentEntityMetadata\n            ? relationOwnerSelection.metadata.parentEntityMetadata\n            : relationOwnerSelection.metadata;\n        const relation = metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\n        if (!relation)\n            throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n        return relation;\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If table without entity was joined, then it will return undefined.\n     */\n    get metadata(): EntityMetadata|undefined {\n\n        // entityOrProperty is relation, e.g. \"post.category\"\n        if (this.relation)\n            return this.relation.inverseEntityMetadata;\n\n        // entityOrProperty is Entity class\n        if (this.connection.hasMetadata(this.entityOrProperty))\n            return this.connection.getMetadata(this.entityOrProperty);\n\n        return undefined;\n\n        /*if (typeof this.entityOrProperty === \"string\") { // entityOrProperty is a custom table\n\n            // first try to find entity with such name, this is needed when entity does not have a target class,\n            // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);\n            if (metadata)\n                return metadata;\n\n            // check if we have entity with such table name, and use its metadata if found\n            return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);\n        }*/\n    }\n\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias(): string {\n        if (!this.relation)\n            throw new Error(`Cannot get junction table for join without relation.`);\n\n        return this.relation.isOwning ? this.parentAlias + \"_\" + this.alias.name : this.alias.name + \"_\" + this.parentAlias;\n    }\n\n    get mapToPropertyParentAlias(): string|undefined {\n        if (!this.mapToProperty)\n            return undefined;\n\n        return this.mapToProperty!.split(\".\")[0];\n    }\n\n    get mapToPropertyPropertyName(): string|undefined {\n        if (!this.mapToProperty)\n            return undefined;\n\n        return this.mapToProperty!.split(\".\")[1];\n    }\n\n}","import {RelationIdAttribute} from \"./RelationIdAttribute\";\n\nexport interface RelationIdLoadResult {\n    relationIdAttribute: RelationIdAttribute;\n    results: any[];\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {QueryBuilder} from \"../QueryBuilder\";\nimport {SelectQueryBuilder} from \"../SelectQueryBuilder\";\n\nexport class RelationCountAttribute {\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Name of relation.\n     */\n    relationName: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private expressionMap: QueryExpressionMap,\n                private relationCountAttribute?: Partial<RelationCountAttribute>) {\n        Object.assign(this, relationCountAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get joinInverseSideMetadata(): EntityMetadata {\n        return this.relation.inverseEntityMetadata;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.split(\".\")[0];\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationProperty(): string|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value is a string representation of alias property`);\n\n        return this.relationName.split(\".\")[1];\n    }\n\n    get junctionAlias(): string {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_relation_count\";\n    }\n\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation(): RelationMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value is a string representation of alias property`);\n\n        const [parentAlias, propertyPath] = this.relationName.split(\".\");\n        const relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\n        return relation;\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If table without entity was joined, then it will return undefined.\n     */\n    get metadata(): EntityMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value is a string representation of alias property`);\n\n        const parentAlias = this.relationName.split(\".\")[0];\n        const selection = this.expressionMap.findAliasByName(parentAlias);\n        return selection.metadata;\n    }\n\n    get mapToPropertyPropertyName(): string {\n        return this.mapToProperty!.split(\".\")[1];\n    }\n\n}\n","import {RelationCountAttribute} from \"./RelationCountAttribute\";\n\nexport interface RelationCountLoadResult {\n    relationCountAttribute: RelationCountAttribute;\n    results: { cnt: any, parentId: any }[];\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\n\nexport class OrmUtils {\n\n    static splitClassesAndStrings<T>(clsesAndStrings: T[]|string[]): [T[], string[]] {\n        return [\n            (clsesAndStrings as T[]).filter(cls => typeof cls !== \"string\"),\n            (clsesAndStrings as string[]).filter(str => typeof str === \"string\"),\n        ];\n    }\n\n    static groupBy<T, R>(array: T[], propertyCallback: (item: T) => R): { id: R, items: T[] }[] {\n        return array.reduce((groupedArray, value) => {\n            const key = propertyCallback(value);\n            let grouped = groupedArray.find(i => i.id === key);\n            if (!grouped) {\n                grouped = { id: key, items: [] };\n                groupedArray.push(grouped);\n            }\n            grouped.items.push(value);\n            return groupedArray;\n        }, [] as Array<{ id: R, items: T[] }>);\n    }\n\n    static isObject(item: any) {\n        return (item && typeof item === \"object\" && !Array.isArray(item));\n    }\n\n    /**\n     * Deep Object.assign.\n     *\n     * @see http://stackoverflow.com/a/34749873\n     */\n    static mergeDeep(target: any, ...sources: any[]): any {\n        if (!sources.length) return target;\n        const source = sources.shift();\n\n        if (this.isObject(target) && this.isObject(source)) {\n            for (const key in source) {\n                if (this.isObject(source[key])) {\n                    if (!target[key]) Object.assign(target, { [key]: {} });\n                    this.mergeDeep(target[key], source[key]);\n                } else {\n                    Object.assign(target, { [key]: source[key] });\n                }\n            }\n        }\n\n        return this.mergeDeep(target, ...sources);\n    }\n\n    /**\n     * Deep compare objects.\n     *\n     * @see http://stackoverflow.com/a/1144249\n     */\n    static deepCompare(...args: any[]) {\n        let i: any, l: any, leftChain: any, rightChain: any;\n\n        function compare2Objects(x: any, y: any) {\n            let p;\n\n            // remember that NaN === NaN returns false\n            // and isNaN(undefined) returns true\n            if (isNaN(x) && isNaN(y) && typeof x === \"number\" && typeof y === \"number\")\n                return true;\n\n            // Compare primitives and functions.\n            // Check if both arguments link to the same object.\n            // Especially useful on the step where we compare prototypes\n            if (x === y)\n                return true;\n\n            if (x.equals instanceof Function && x.equals(y))\n                return true;\n\n            // Works in case when functions are created in constructor.\n            // Comparing dates is a common scenario. Another built-ins?\n            // We can even handle functions passed across iframes\n            if ((typeof x === \"function\" && typeof y === \"function\") ||\n                (x instanceof Date && y instanceof Date) ||\n                (x instanceof RegExp && y instanceof RegExp) ||\n                (x instanceof String && y instanceof String) ||\n                (x instanceof Number && y instanceof Number))\n                return x.toString() === y.toString();\n\n            // At last checking prototypes as good as we can\n            if (!(x instanceof Object && y instanceof Object))\n                return false;\n\n            if (x.isPrototypeOf(y) || y.isPrototypeOf(x))\n                return false;\n\n            if (x.constructor !== y.constructor)\n                return false;\n\n            if (x.prototype !== y.prototype)\n                return false;\n\n            // Check for infinitive linking loops\n            if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1)\n                return false;\n\n            // Quick checking of one object being a subset of another.\n            // todo: cache the structure of arguments[0] for performance\n            for (p in y) {\n                if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                    return false;\n                }\n                else if (typeof y[p] !== typeof x[p]) {\n                    return false;\n                }\n            }\n\n            for (p in x) {\n                if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                    return false;\n                }\n                else if (typeof y[p] !== typeof x[p]) {\n                    return false;\n                }\n\n                switch (typeof (x[p])) {\n                    case \"object\":\n                    case \"function\":\n\n                        leftChain.push(x);\n                        rightChain.push(y);\n\n                        if (!compare2Objects (x[p], y[p])) {\n                            return false;\n                        }\n\n                        leftChain.pop();\n                        rightChain.pop();\n                        break;\n\n                    default:\n                        if (x[p] !== y[p]) {\n                            return false;\n                        }\n                        break;\n                }\n            }\n\n            return true;\n        }\n\n        if (arguments.length < 1) {\n            return true; // Die silently? Don't know how to handle such case, please help...\n            // throw \"Need two or more arguments to compare\";\n        }\n\n        for (i = 1, l = arguments.length; i < l; i++) {\n\n            leftChain = []; // Todo: this can be cached\n            rightChain = [];\n\n            if (!compare2Objects(arguments[0], arguments[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Transforms given value into boolean value.\n     */\n    static toBoolean(value: any): boolean {\n        if (typeof value === \"boolean\")\n            return value;\n\n        if (typeof value === \"string\")\n            return value === \"true\" || value === \"1\";\n\n        if (typeof value === \"number\")\n            return value > 0;\n\n        return false;\n    }\n\n    /**\n     * Composes an object from the given array of keys and values.\n     */\n    static zipObject(keys: any[], values: any[]): ObjectLiteral {\n        return keys.reduce((object, column, index) => {\n            object[column] = values[index];\n            return object;\n        }, {} as ObjectLiteral);\n    }\n\n}","import {Driver} from \"../../driver/Driver\";\nimport {RelationIdLoadResult} from \"../relation-id/RelationIdLoadResult\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Alias} from \"../Alias\";\nimport {JoinAttribute} from \"../JoinAttribute\";\nimport {RelationCountLoadResult} from \"../relation-count/RelationCountLoadResult\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\n\n/**\n * Transforms raw sql results returned from the database into entity object.\n * Entity is constructed based on its entity metadata.\n */\nexport class RawSqlResultsToEntityTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: Driver,\n                protected joinAttributes: JoinAttribute[],\n                protected rawRelationIdResults: RelationIdLoadResult[],\n                protected rawRelationCountResults: RelationCountLoadResult[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    transform(rawResults: any[], alias: Alias): any[] {\n        return this.group(rawResults, alias)\n            .map(group => this.transformRawResultsGroup(group, alias))\n            .filter(res => !!res);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Groups given raw results by ids of given alias.\n     */\n    protected group(rawResults: any[], alias: Alias): any[][] {\n        const groupedResults: { id: any, items: any[] }[] = [];\n        rawResults.forEach(rawResult => {\n            const id = alias.metadata.primaryColumns.map(column => rawResult[alias.name + \"_\" + column.databaseName]).join(\"_\"); // todo: check partial\n            if (!id) return;\n\n            let group = groupedResults.find(groupedResult => groupedResult.id === id);\n            if (!group) {\n                group = { id: id, items: [] };\n                groupedResults.push(group);\n            }\n\n            group.items.push(rawResult);\n        });\n        return groupedResults.map(group => group.items);\n    }\n\n    /**\n     * Transforms set of data results into single entity.\n     */\n    protected transformRawResultsGroup(rawResults: any[], alias: Alias): ObjectLiteral|undefined {\n        let hasColumns = false, hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false, hasRelations = false, hasRelationIds = false, hasRelationCounts = false;\n        let entity: any = alias.metadata.create();\n\n        if (alias.metadata.discriminatorColumn) {\n            const discriminatorValues = rawResults.map(result => result[alias.name + \"_\" + alias.metadata.discriminatorColumn!.databaseName]);\n            const metadata = alias.metadata.childEntityMetadatas.find(childEntityMetadata => {\n                return !!discriminatorValues.find(value => value === childEntityMetadata.discriminatorValue);\n            });\n            if (metadata)\n                entity = metadata.create();\n        }\n\n        // get value from columns selections and put them into newly created entity\n        hasColumns = this.transformColumns(rawResults, alias, entity, alias.metadata);\n\n        hasRelations = this.transformJoins(rawResults, entity, alias);\n        hasRelationIds = this.transformRelationIds(rawResults, alias, entity);\n        hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\n\n        return (hasColumns || hasEmbeddedColumns || hasParentColumns || hasParentEmbeddedColumns || hasRelations || hasRelationIds || hasRelationCounts) ? entity : undefined;\n    }\n\n    // get value from columns selections and put them into object\n    protected transformColumns(rawResults: any[], alias: Alias, entity: ObjectLiteral, metadata: EntityMetadata): boolean {\n        let hasData = false;\n        metadata.columns.forEach(column => {\n            const value = rawResults[0][alias.name + \"_\" + column.databaseName];\n            if (value === undefined || value === null || column.isVirtual || column.isParentId || column.isDiscriminator)\n                return;\n\n            column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));\n            hasData = true;\n        });\n\n        if (alias.metadata.parentEntityMetadata) {\n            alias.metadata.parentEntityMetadata.columns.forEach(column => {\n                const value = rawResults[0][\"parentIdColumn_\" + alias.metadata.parentEntityMetadata.tableName + \"_\" + column.databaseName];\n                if (value === undefined || value === null || column.isVirtual || column.isParentId || column.isDiscriminator)\n                    return;\n\n                column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));\n                hasData = true;\n            });\n        }\n        return hasData;\n    }\n\n    /**\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity\n     */\n    protected transformJoins(rawResults: any[], entity: ObjectLiteral, alias: Alias) {\n        let hasData = false;\n        let discriminatorValue: string = \"\";\n\n        if (alias.metadata.discriminatorColumn)\n            discriminatorValue = rawResults[0][alias.name + \"_\" + alias.metadata.discriminatorColumn!.databaseName];\n\n        this.joinAttributes.forEach(join => {\n\n            // skip joins without metadata\n            if (!join.metadata)\n                return;\n\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used.\n            const metadata = alias.metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\n            if (metadata && join.relation && metadata.target !== join.relation.target)\n                return;\n\n            // some checks to make sure this join is for current alias\n            if (join.mapToProperty) {\n                if (join.mapToPropertyParentAlias !== alias.name)\n                    return;\n            } else {\n                if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation!.propertyPath)\n                    return;\n            }\n\n            // transform joined data into entities\n            const mappedEntities = this.transform(rawResults, join.alias);\n            const result = !join.isMany ? mappedEntities[0] : mappedEntities;\n            if (!result) // if nothing was joined then simply return\n                return;\n\n            // if join was mapped to some property then save result to that property\n            if (join.mapToPropertyPropertyName) {\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\n\n            } else { // otherwise set to relation\n                // console.log(result);\n                join.relation!.setEntityValue(entity, result);\n            }\n\n            hasData = true;\n        });\n        return hasData;\n    }\n\n    protected transformRelationIds(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral): boolean {\n        let hasData = false;\n        this.rawRelationIdResults.forEach(rawRelationIdResult => {\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)\n                return;\n\n            const relation = rawRelationIdResult.relationIdAttribute.relation;\n            const valueMap = this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\n            if (valueMap === undefined || valueMap === null)\n                return;\n\n            const idMaps = rawRelationIdResult.results.map(result => {\n                const entityPrimaryIds = this.extractEntityPrimaryIds(relation, result);\n                if (!alias.metadata.compareIds(entityPrimaryIds, valueMap))\n                    return;\n\n                let columns: ColumnMetadata[];\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    columns = relation.joinColumns.map(joinColumn => joinColumn);\n                } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                    columns = relation.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\n                } else { // ManyToMany\n                    if (relation.isOwning) {\n                        columns = relation.inverseJoinColumns.map(joinColumn => joinColumn);\n                    } else {\n                        columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\n                    }\n                }\n\n                // const idMapColumns = (relation.isOneToMany || relation.isOneToOneNotOwner) ? columns : columns.map(column => column.referencedColumn!);\n                // const idMap = idMapColumns.reduce((idMap, column) => {\n                //     return OrmUtils.mergeDeep(idMap, column.createValueMap(result[column.databaseName]));\n                // }, {} as ObjectLiteral); // need to create reusable function for this process\n\n                const idMap = columns.reduce((idMap, column) => {\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        return OrmUtils.mergeDeep(idMap, column.createValueMap(result[column.databaseName]));\n                    } else {\n                        return OrmUtils.mergeDeep(idMap, column.referencedColumn!.createValueMap(result[column.databaseName]));\n                    }\n                }, {} as ObjectLiteral);\n\n                if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        return columns[0].getEntityValue(idMap);\n                    } else {\n                        return columns[0].referencedColumn!.getEntityValue(idMap);\n                    }\n                }\n                return idMap;\n            }).filter(result => result);\n\n            const properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\n            const mapToProperty = (properties: string[], map: ObjectLiteral, value: any): any => {\n\n                const property = properties.shift();\n                if (property && properties.length === 0) {\n                    map[property] = value;\n                    return map;\n                } else if (property && properties.length > 0) {\n                    mapToProperty(properties, map[property], value);\n                } else {\n                    return map;\n                }\n            };\n            if (relation.isOneToOne || relation.isManyToOne) {\n                mapToProperty(properties, entity, idMaps[0]);\n            } else {\n                mapToProperty(properties, entity, idMaps);\n            }\n            hasData = true;\n        });\n\n        return hasData;\n    }\n\n    protected transformRelationCounts(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral): boolean {\n        let hasData = false;\n        this.rawRelationCountResults\n            .filter(rawRelationCountResult => rawRelationCountResult.relationCountAttribute.parentAlias === alias.name)\n            .forEach(rawRelationCountResult => {\n                const relation = rawRelationCountResult.relationCountAttribute.relation;\n                let referenceColumnName: string;\n\n                if (relation.isOneToMany) {\n                    referenceColumnName = relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;  // todo: fix joinColumns[0]\n\n                } else {\n                    referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn!.databaseName : relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\n                }\n\n                const referenceColumnValue = rawSqlResults[0][alias.name + \"_\" + referenceColumnName]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\n                if (referenceColumnValue !== undefined && referenceColumnValue !== null) {\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\n                    rawRelationCountResult.results\n                        .filter(result => result[\"parentId\"] === referenceColumnValue)\n                        .forEach(result => {\n                            entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\n                            hasData = true;\n                        });\n                }\n            });\n\n        return hasData;\n    }\n\n    private createValueMapFromJoinColumns(relation: RelationMetadata, parentAlias: string, rawSqlResults: any[]): ObjectLiteral {\n        let columns: ColumnMetadata[];\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\n        } else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\n            } else {\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\n            }\n        }\n        return columns.reduce((valueMap, column) => {\n            rawSqlResults.forEach(rawSqlResult => {\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    valueMap[column.databaseName] = rawSqlResult[parentAlias + \"_\" + column.databaseName];\n                } else {\n                    valueMap[column.databaseName] =  rawSqlResult[parentAlias + \"_\" + column.referencedColumn!.databaseName];\n                }\n            });\n            return valueMap;\n        }, {} as ObjectLiteral);\n\n    }\n\n    private extractEntityPrimaryIds(relation: RelationMetadata, relationIdRawResult: any) {\n        let columns: ColumnMetadata[];\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\n        } else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\n            } else {\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\n            }\n        }\n        return columns.reduce((data, column) => {\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\n            return data;\n        }, {} as ObjectLiteral);\n    }\n\n}","/**\n * Thrown when user tries to execute operation that requires connection to be established.\n */\nexport class ConnectionIsNotSetError extends Error {\n    name = \"ConnectionIsNotSetError\";\n\n    constructor(dbType: string) {\n        super();\n        this.message = `Connection with ${dbType} database is not established. Check connection configuration.`;\n    }\n\n}","/**\n * Thrown when required driver's package is not installed.\n */\nexport class DriverPackageNotInstalledError extends Error {\n    name = \"DriverPackageNotInstalledError\";\n\n    constructor(driverName: string, packageName: string) {\n        super();\n        this.message = `${driverName} package has not been found installed. Try to install it: npm install ${packageName} --save`;\n    }\n\n}","import {DriverOptions} from \"./DriverOptions\";\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options: DriverOptions, buildOptions?: { useSid: boolean }): DriverOptions {\n        if (options.url) {\n            const parsedUrl = this.parseConnectionUrl(options.url);\n            if (buildOptions && buildOptions.useSid) {\n                const urlDriverOptions: DriverOptions = {\n                    type: options.type,\n                    host: parsedUrl.host,\n                    username: parsedUrl.username,\n                    password: parsedUrl.password,\n                    port: parsedUrl.port,\n                    sid: parsedUrl.database\n                };\n                return Object.assign(urlDriverOptions, options);\n\n            } else {\n                const urlDriverOptions: DriverOptions = {\n                    type: options.type,\n                    host: parsedUrl.host,\n                    username: parsedUrl.username,\n                    password: parsedUrl.password,\n                    port: parsedUrl.port,\n                    database: parsedUrl.database\n                };\n                return Object.assign(urlDriverOptions, options);\n            }\n        }\n        return Object.assign({}, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        const afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n        const [usernameAndPassword, hostAndPort] = base.split(\"@\");\n        const [username, password] = usernameAndPassword.split(\":\");\n        const [host, port] = hostAndPort.split(\":\");\n\n        return {\n            host: host,\n            username: username,\n            password: password,\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    }\n\n}","/**\n * Thrown when transaction is already started and user tries to run it again.\n */\nexport class TransactionAlreadyStartedError extends Error {\n    name = \"TransactionAlreadyStartedError\";\n\n    constructor() {\n        super();\n        this.message = `Transaction already started for the given connection, commit current transaction before starting a new one.`;\n    }\n\n}","/**\n * Thrown when transaction is not started yet and user tries to run commit or rollback.\n */\nexport class TransactionNotStartedError extends Error {\n    name = \"TransactionNotStartedError\";\n\n    constructor() {\n        super();\n        this.message = `Transaction is not started yet, start transaction before committing or rolling it back.`;\n    }\n\n}","/**\n * Arguments for IndexMetadata class.\n */\nexport interface IndexMetadataArgs {\n\n    /**\n     * Class to which index is applied.\n     */\n    target: Function|string;\n\n    /**\n     * Index name.\n     */\n    name?: string;\n\n    /**\n     * Columns combination to be used as index.\n     */\n    columns?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\n\n    /**\n     * Indicates if index must be unique or not.\n     */\n    unique: boolean;\n\n}\n","import {EntityMetadata} from \"./EntityMetadata\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\n\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this index is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Indicates if this index must be unique.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Indexed columns.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * User specified index name.\n     */\n    givenName?: string;\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\n\n    /**\n     * Final index name.\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If index name was not given then its generated.\n     */\n    name: string;\n\n    /**\n     * Gets the table name on which index is applied.\n     */\n    tableName: string;\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        columns?: ColumnMetadata[],\n        args?: IndexMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n\n        if (options.args) {\n            this.target = options.args.target;\n            this.isUnique = options.args.unique;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n\n        const map: { [key: string]: number } = {};\n        this.tableName = this.entityMetadata.tableName;\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyNames: string[] = [];\n            if (this.givenColumnNames instanceof Array) {\n                columnPropertyNames = this.givenColumnNames;\n                columnPropertyNames.forEach(name => map[name] = 1);\n            } else {\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (columnsFnResult instanceof Array) {\n                    columnPropertyNames = columnsFnResult.map((i: any) => String(i));\n                    columnPropertyNames.forEach(name => map[name] = 1);\n                } else {\n                    columnPropertyNames = Object.keys(columnsFnResult).map((i: any) => String(i));\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n                }\n            }\n\n            // console.log(\"columnPropertyNames:\", columnPropertyNames);\n            // console.log(\"this.entityMetadata.columns:\", this.entityMetadata.columns);\n            const columns = this.entityMetadata.columns.filter(column => columnPropertyNames.indexOf(column.propertyPath) !== -1);\n            // console.log(\"columns:\", columns);\n            this.entityMetadata.relations\n                .filter(relation => relation.isWithJoinColumn && columnPropertyNames.indexOf(relation.propertyName) !== -1)\n                .forEach(relation => columns.push(...relation.joinColumns));\n\n            // todo: better to extract all validation into single place if possible\n            const missingColumnNames = columnPropertyNames.filter(columnPropertyName => {\n                return !this.entityMetadata.columns.find(column => column.propertyPath === columnPropertyName) &&\n                    !this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyPath === columnPropertyName);\n            });\n            if (missingColumnNames.length > 0) {\n                throw new Error(`Index ${this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\"}contains columns that are missing in the entity: ` + missingColumnNames.join(\", \"));\n            }\n\n            this.columns = columns;\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databaseName] = map[key];\n            return updatedMap;\n        }, {} as { [key: string]: number });\n        this.name = namingStrategy.indexName(this.givenName ? this.givenName : undefined, this.entityMetadata.tableName, this.columns.map(column => column.databaseName));\n        return this;\n    }\n\n}","import {IndexMetadata} from \"../../metadata/IndexMetadata\";\n\n/**\n * Database's table index stored in this class.\n */\nexport class IndexSchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Table name that contains this unique index.\n     */\n    tableName: string;\n\n    /**\n     * Index name.\n     */\n    name: string;\n\n    /**\n     * Columns included in this index.\n     */\n    columnNames: string[];\n\n    /**\n     * Indicates if this index is unique.\n     */\n    isUnique: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(tableName: string, name: string, columnNames: string[], isUnique: boolean) {\n        this.tableName = tableName;\n        this.name = name;\n        this.columnNames = columnNames;\n        this.isUnique = isUnique;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    clone() {\n        return new IndexSchema(this.tableName, this.name, this.columnNames.map(name => name), this.isUnique);\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates index from the index metadata object.\n     */\n    static create(indexMetadata: IndexMetadata): IndexSchema {\n        return new IndexSchema(\n            indexMetadata.entityMetadata.tableName,\n            indexMetadata.name,\n            indexMetadata.columns.map(column => column.databaseName),\n            indexMetadata.isUnique\n        );\n    }\n\n}","import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class ForeignKeySchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the table which contains this foreign key.\n     */\n    name: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[];\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[];\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string,\n                columnNames: string[],\n                referencedColumnNames: string[],\n                referencedTable: string,\n                onDelete?: string) {\n\n        this.name = name;\n        this.columnNames = columnNames;\n        this.referencedColumnNames = referencedColumnNames;\n        this.referencedTableName = referencedTable;\n        this.onDelete = onDelete;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone() {\n        return new ForeignKeySchema(\n            this.name,\n            this.columnNames,\n            this.referencedColumnNames,\n            this.referencedTableName\n        );\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new foreign schema from the given foreign key metadata.\n     */\n    static create(metadata: ForeignKeyMetadata) {\n        return new ForeignKeySchema(\n            metadata.name,\n            metadata.columnNames,\n            metadata.referencedColumnNames,\n            metadata.referencedTableName,\n            metadata.onDelete\n        );\n    }\n\n}","/**\n * Primary key from the database stored in this class.\n */\nexport class PrimaryKeySchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Key name.\n     */\n    name: string;\n\n    /**\n     * Column to which this primary key is bind.\n     */\n    columnName: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string, columnName: string) {\n        this.name = name;\n        this.columnName = columnName;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this primary key with exactly same properties.\n     */\n    clone() {\n        return new PrimaryKeySchema(this.name, this.columnName);\n    }\n\n}","import {ColumnSchema} from \"./ColumnSchema\";\nimport {IndexSchema} from \"./IndexSchema\";\nimport {ForeignKeySchema} from \"./ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"./PrimaryKeySchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {Driver} from \"../../driver/Driver\";\n\n/**\n * Table schema in the database represented in this class.\n */\nexport class TableSchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Table name.\n     */\n    name: string;\n\n    /**\n     * Table columns.\n     */\n    columns: ColumnSchema[] = [];\n\n    /**\n     * Table indices.\n     */\n    indices: IndexSchema[] = [];\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: ForeignKeySchema[] = [];\n\n    /**\n     * Table primary keys.\n     */\n    primaryKeys: PrimaryKeySchema[] = [];\n\n    /**\n     * Indicates if table schema was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new table schemas.\n     */\n    justCreated: boolean = false;\n\n    /**\n     * Table engine.\n     */\n    engine?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string, columns?: ColumnSchema[]|ObjectLiteral[], justCreated?: boolean) {\n        this.name = name;\n        if (columns) {\n            this.columns = (columns as any[]).map(column => { // as any[] is a temporary fix (some weird compiler error)\n                if (column instanceof ColumnSchema) {\n                    return column;\n                } else {\n                    return new ColumnSchema(column);\n                }\n            });\n        }\n\n        if (justCreated !== undefined)\n            this.justCreated = justCreated;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets only those primary keys that does not\n     */\n    get primaryKeysWithoutGenerated(): PrimaryKeySchema[] {\n        const generatedColumn = this.columns.find(column => column.isGenerated);\n        if (!generatedColumn)\n            return this.primaryKeys;\n\n        return this.primaryKeys.filter(primaryKey => {\n            return primaryKey.columnName !== generatedColumn.name;\n        });\n    }\n\n    get hasGeneratedColumn(): boolean {\n        return !!this.columns.find(column => column.isGenerated);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table schema to a new table schema with all properties cloned.\n     */\n    clone(): TableSchema {\n        const cloned = new TableSchema(this.name);\n        cloned.columns = this.columns.map(column => column.clone());\n        cloned.indices = this.indices.map(index => index.clone());\n        cloned.foreignKeys = this.foreignKeys.map(key => key.clone());\n        cloned.primaryKeys = this.primaryKeys.map(key => key.clone());\n        cloned.engine = this.engine;\n        return cloned;\n    }\n\n    /**\n     * Adds column schemas.\n     */\n    addColumns(columns: ColumnSchema[]) {\n        this.columns = this.columns.concat(columns);\n    }\n\n    /**\n     * Replaces given column.\n     */\n    replaceColumn(oldColumn: ColumnSchema, newColumn: ColumnSchema) {\n        this.columns[this.columns.indexOf(oldColumn)] = newColumn;\n    }\n\n    /**\n     * Removes a column schema from this table schema.\n     */\n    removeColumn(columnToRemove: ColumnSchema) {\n        const foundColumn = this.columns.find(column => column.name === columnToRemove.name);\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    }\n\n    /**\n     * Remove all column schemas from this table schema.\n     */\n    removeColumns(columns: ColumnSchema[]) {\n        columns.forEach(column => this.removeColumn(column));\n    }\n\n    /**\n     * Adds all given primary keys.\n     */\n    addPrimaryKeys(addedKeys: PrimaryKeySchema[]) {\n        addedKeys.forEach(key => this.primaryKeys.push(key));\n    }\n\n    /**\n     * Removes all given primary keys.\n     */\n    removePrimaryKeys(droppedKeys: PrimaryKeySchema[]) {\n        droppedKeys.forEach(key => {\n            this.primaryKeys.splice(this.primaryKeys.indexOf(key), 1);\n        });\n    }\n\n    /**\n     * Removes primary keys of the given columns.\n     */\n    removePrimaryKeysOfColumns(columns: ColumnSchema[]) {\n        this.primaryKeys = this.primaryKeys.filter(primaryKey => {\n            return !columns.find(column => column.name === primaryKey.columnName);\n        });\n    }\n\n    /**\n     * Adds foreign key schemas.\n     */\n    addForeignKeys(foreignKeys: ForeignKeySchema[]) {\n        this.foreignKeys = this.foreignKeys.concat(foreignKeys);\n    }\n\n    /**\n     * Removes foreign key from this table schema.\n     */\n    removeForeignKey(removedForeignKey: ForeignKeySchema) {\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name); // this must be by name\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    }\n\n    /**\n     * Removes all foreign keys from this table schema.\n     */\n    removeForeignKeys(dbForeignKeys: ForeignKeySchema[]) {\n        dbForeignKeys.forEach(foreignKey => this.removeForeignKey(foreignKey));\n    }\n\n    /**\n     * Removes index schema from this table schema.\n     */\n    removeIndex(indexSchema: IndexSchema) {\n        const index = this.indices.find(index => index.name === indexSchema.name);\n        if (index)\n            this.indices.splice(this.indices.indexOf(index), 1);\n    }\n\n    /**\n     * Differentiate columns of this table schema and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(driver: Driver, columnMetadatas: ColumnMetadata[]): ColumnSchema[] {\n        return this.columns.filter(columnSchema => {\n            const columnMetadata = columnMetadatas.find(columnMetadata => columnMetadata.databaseName === columnSchema.name);\n            if (!columnMetadata)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(columnSchema.name, \"!==\", columnMetadata.databaseName); //  ||\n            // console.log(columnSchema.type, \"!==\", driver.normalizeType(columnMetadata)); // ||\n            // console.log(columnSchema.comment, \"!==\", columnMetadata.comment); //  ||\n            // console.log(this.compareDefaultValues(driver.normalizeDefault(columnMetadata), columnSchema.default)); // || // we included check for generated here, because generated columns already can have default values\n            // console.log(columnSchema.isNullable, \"!==\", columnMetadata.isNullable); //  ||\n            // console.log(columnSchema.isUnique, \"!==\", columnMetadata.isUnique); //  ||\n            // console.log(columnSchema.isGenerated, \"!==\", columnMetadata.isGenerated); // d;\n\n            return  columnSchema.name !== columnMetadata.databaseName ||\n                    columnSchema.type !== driver.normalizeType(columnMetadata) ||\n                    columnSchema.comment !== columnMetadata.comment ||\n                    (!columnSchema.isGenerated && !this.compareDefaultValues(driver.normalizeDefault(columnMetadata), columnSchema.default)) || // we included check for generated here, because generated columns already can have default values\n                    columnSchema.isNullable !== columnMetadata.isNullable ||\n                    columnSchema.isUnique !== columnMetadata.isUnique ||\n                    // columnSchema.isPrimary !== columnMetadata.isPrimary ||\n                    columnSchema.isGenerated !== columnMetadata.isGenerated;\n        });\n    }\n\n    findColumnByName(name: string): ColumnSchema|undefined {\n        return this.columns.find(column => column.name === name);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    protected compareDefaultValues(columnMetadataValue: string, databaseValue: string): boolean {\n\n        // if (typeof columnMetadataValue === \"number\")\n        //     return columnMetadataValue === parseInt(databaseValue);\n        // if (typeof columnMetadataValue === \"boolean\")\n        //     return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        // if (typeof columnMetadataValue === \"function\")\n        // if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\")\n        //     return columnMetadataValue.toLowerCase() === databaseValue.toLowerCase();\n\n\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\n\n            // we need to cut out \"((x))\" where x number generated by mssql\n            columnMetadataValue = columnMetadataValue.replace(/\\(\\([0-9.]*\\)\\)$/g, \"$1\");\n            databaseValue = databaseValue.replace(/\\(\\(([0-9.]*?)\\)\\)$/g, \"$1\");\n\n            // we need to cut out \"(\" because in mssql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^\\(|\\)$/g, \"\");\n            databaseValue = databaseValue.replace(/^\\(|\\)$/g, \"\");\n\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n\n        // console.log(\"columnMetadataValue\", columnMetadataValue);\n        // console.log(\"databaseValue\", databaseValue);\n        return columnMetadataValue === databaseValue;\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table schema from a given entity metadata.\n     *\n     * todo: need deeper implementation\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver) {\n        const tableSchema = new TableSchema(entityMetadata.tableName);\n        tableSchema.engine = entityMetadata.engine;\n        entityMetadata.columns.forEach(column => {\n            tableSchema.columns.push(ColumnSchema.create(column, driver.normalizeType(column), driver.normalizeDefault(column)));\n        });\n\n        return tableSchema;\n    }\n\n}","/**\n */\nexport class QueryRunnerAlreadyReleasedError extends Error {\n    name = \"QueryRunnerAlreadyReleasedError\";\n\n    constructor() {\n        super();\n        this.message = `Query runner already released. Cannot run queries anymore.`;\n    }\n\n}","/**\n * Used to specify what entity relations should be loaded.\n *\n * Example:\n *  const options: JoinOptions = {\n *     alias: \"photo\",\n *     leftJoin: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     },\n *     innerJoin: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     },\n *     leftJoinAndSelect: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     },\n *     innerJoinAndSelect: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     }\n * };\n */\nexport interface JoinOptions {\n\n    /**\n     * Alias of the main entity.\n     */\n    alias: string;\n\n    /**\n     * Array of columns to LEFT JOIN.\n     */\n    leftJoinAndSelect?: { [key: string]: string };\n\n    /**\n     * Array of columns to INNER JOIN.\n     */\n    innerJoinAndSelect?: { [key: string]: string };\n\n    /**\n     * Array of columns to LEFT JOIN.\n     */\n    leftJoin?: { [key: string]: string };\n\n    /**\n     * Array of columns to INNER JOIN.\n     */\n    innerJoin?: { [key: string]: string };\n\n}\n","import {JoinOptions} from \"./JoinOptions\";\n\n/**\n * Defines a special criteria to find specific entity.\n */\nexport interface FindOneOptions<Entity> {\n\n    /**\n     * Simple condition that should be applied to match entities.\n     */\n    where?: Partial<Entity>;\n\n    /**\n     * Specifies what relations should be loaded.\n     */\n    join?: JoinOptions;\n\n    /**\n     * Order, in which entities should be ordered.\n     */\n    order?: { [P in keyof Entity]?: \"ASC\"|\"DESC\" };\n\n}\n","import {FindOneOptions} from \"./FindOneOptions\";\n\n/**\n * Defines a special criteria to find specific entities.\n */\nexport interface FindManyOptions<Entity> extends FindOneOptions<Entity> {\n\n    /**\n     * Offset (paginated) where from entities should be taken.\n     */\n    skip?: number;\n\n    /**\n     * Limit (paginated) - max number of entities should be taken.\n     */\n    take?: number;\n\n}\n","/**\n * Represents some Type of the Object.\n */\nexport type ObjectType<T> = { new (): T }|Function;\n","/**\n * Thrown when consumer tries to use query runner from query runner provider after it was released.\n */\nexport class QueryRunnerProviderAlreadyReleasedError extends Error {\n    name = \"QueryRunnerProviderAlreadyReleasedError\";\n\n    constructor() {\n        super();\n        this.message = `Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Same as Partial<T> but goes deeper and makes Partial<T> all its properties and sub-properties.\n */\nexport type DeepPartial<T> = {\n    [P in keyof T]?: DeepPartial<T[P]>;\n};\n","/**\n * Special options passed to Repository#remove method.\n */\nexport interface RemoveOptions {\n\n    /**\n     * Additional data to be passed with remove method.\n     * This data can be used in subscribers then.\n     */\n    data?: any;\n\n}","/**\n * Special options passed to Repository#persist method.\n */\nexport interface SaveOptions {\n\n    /**\n     * Additional data to be passed with persist method.\n     * This data can be used in subscribers then.\n     */\n    data?: any;\n\n}","/**\n * Thrown when consumer tries to release entity manager that does not use single database connection.\n */\nexport class NoNeedToReleaseEntityManagerError extends Error {\n    name = \"NoNeedToReleaseEntityManagerError\";\n\n    constructor() {\n        super();\n        this.message = `Entity manager is not using single database connection and cannot be released. ` +\n            `Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection ` +\n            `methods have a single database connection and they should be released.`;\n        this.stack = new Error().stack;\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    // todo: wny not to make them public?\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    protected manager: EntityManager;\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    protected metadata: EntityMetadata;\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    protected queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder(this.metadata.target, alias, queryRunner || this.queryRunner);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(plainEntityLikeOrPlainEntityLikes?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        return this.manager.create<any>(this.metadata.target, plainEntityLikeOrPlainEntityLikes as any);\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\n        return this.manager.merge(this.metadata.target, mergeIntoEntity, ...entityLikes);\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    async preload(entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        return this.manager.preload(this.metadata.target, entityLike);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    async save(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    async save(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    async save(entityOrEntities: Entity|Entity[], options?: SaveOptions): Promise<Entity|Entity[]> {\n        return this.manager.save(this.metadata.target, entityOrEntities as any, options);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    async persist(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    async persist(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    async persist(entityOrEntities: Entity|Entity[], options?: SaveOptions): Promise<Entity|Entity[]> {\n        return this.save(entityOrEntities as any, options);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     */\n    async update(conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\n\n    /**\n     * Updates entity partially. Entity can be found by a given find options.\n     */\n    async update(findOptions: FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     */\n    async update(conditionsOrFindOptions: Partial<Entity>|FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        const entity = await this.findOne(conditionsOrFindOptions as any); // this is temporary, in the future can be refactored to perform better\n        if (!entity)\n            throw new Error(`Cannot find entity to update by a given criteria`);\n\n        Object.assign(entity, partialEntity);\n        await this.save(entity, options);\n    }\n\n    /**\n     * Updates entity partially. Entity will be found by a given id.\n     */\n    async updateById(id: any, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        return this.manager.updateById(this.metadata.target, id, partialEntity, options);\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    async remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    async remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    async remove(entityOrEntities: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\n        return this.manager.remove(this.metadata.target, entityOrEntities as any, options);\n    }\n\n    /**\n     * Removes entity by a given entity id.\n     */\n    async removeById(id: any, options?: RemoveOptions): Promise<void> {\n        return this.manager.removeById(this.metadata.target, id, options);\n    }\n\n    /**\n     * Removes entity by a given entity id.\n     */\n    async removeByIds(ids: any[], options?: RemoveOptions): Promise<void> {\n        return this.manager.removeByIds(this.metadata.target, ids, options);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count(conditions?: DeepPartial<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    count(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find(conditions?: DeepPartial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(options?: FindManyOptions<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(conditions?: DeepPartial<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<[ Entity[], number ]> {\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds(ids: any[], conditions?: DeepPartial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOne(this.metadata.target, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entity by given id.\n     * Optionally find options can be applied.\n     */\n    findOneById(id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity by given id.\n     * Optionally conditions can be applied.\n     */\n    findOneById(id: any, conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity by given id.\n     * Optionally find options or conditions can be applied.\n     */\n    findOneById(id: any, optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOneById(this.metadata.target, id, optionsOrConditions as any);\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters);\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     */\n    async clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target);\n    }\n\n}","import {EventEmitter} from \"events\";\nimport {Readable, Writable} from \"stream\";\n\n/**\n * Creates a new MongoClient instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html\n */\nexport declare class MongoClient {\n\n    constructor();\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param callback The command result callback.\n     */\n    static connect(url: string, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     */\n    static connect(url: string, options?: MongoClientOptions): Promise<Db>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     */\n    static connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param callback The command result callback.\n     */\n    connect(url: string, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     */\n    connect(url: string, options?: MongoClientOptions): Promise<Db>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     */\n    connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\n}\n\n/**\n * The callback format for results.\n */\nexport interface MongoCallback<T> {\n\n    /**\n     * @param error An error instance representing the error during the execution.\n     * @param result The result of execution.\n     */\n    (error: MongoError, result: T): void;\n}\n\n// http://mongodb.github.io/node-mongodb-native/2.1/api/MongoError.html\nexport declare class MongoError extends Error {\n    constructor(message: string);\n    static create(options: Object): MongoError;\n}\n\n/**\n * Options for MongoClient#connect method.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#.connect\n */\nexport interface MongoClientOptions {\n\n    /**\n     * The maximum size of the individual server pool.\n     */\n    poolSize?: number;\n\n    /**\n     * Enable SSL connection.\n     */\n    ssl?: boolean;\n\n    /**\n     * SSL Certificate store binary buffer.\n     */\n    sslCA?: Buffer;\n\n    /**\n     * Uri decode the user name and password for authentication.\n     */\n    uri_decode_auth?: boolean;\n\n    /**\n     * A hash of options to set on the db object, see Db constructor.\n     */\n    db?: DbCreateOptions;\n\n    /**\n     * A hash of options to set on the server objects, see Server constructor**.\n     */\n    server?: ServerOptions;\n\n    /**\n     * A hash of options to set on the replSet object, see ReplSet constructor**.\n     */\n    replSet?: ReplSetOptions;\n\n    /**\n     * A hash of options to set on the mongos object, see Mongos constructor**.\n     */\n    mongos?: MongosOptions;\n\n    /**\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\n     */\n    promiseLibrary?: Object;\n}\n\nexport interface CommandOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS?: number;\n}\n\n/**\n * Options for Db class.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\n */\nexport interface DbCreateOptions {\n\n    /**\n     * If the database authentication is dependent on another databaseName.\n     */\n    authSource?: string;\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * The current value of the parameter native_parser.\n     */\n    native_parser?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Specify if the BSON serializer should ignore undefined fields.\n     */\n    ignoreUndefined?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * Promotes Long values to number if they fit inside the 53 bits resolution.\n     */\n    promoteLongs?: boolean;\n\n    /**\n     * Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n     */\n    bufferMaxEntries?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\n     */\n    promiseLibrary?: Object;\n\n    /**\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\n     */\n    readConcern?: { level?: Object };\n}\n\n/**\n * Creates a new ReadPreference instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReadPreference.html\n */\nexport declare class ReadPreference {\n    constructor(mode: string, tags: Object);\n\n    /**\n     * The ReadPreference mode as listed above.\n     */\n    mode: string;\n\n    /**\n     * An object representing read preference tags.\n     */\n    tags: any;\n\n    /**\n     * Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).\n     */\n    static PRIMARY: string;\n\n    /**\n     * Read from primary if available, otherwise a secondary.\n     */\n    static PRIMARY_PREFERRED: string;\n\n    /**\n     * Read from secondary if available, otherwise error.\n     */\n    static SECONDARY: string;\n\n    /**\n     * Read from a secondary if available, otherwise read from the primary.\n     */\n    static SECONDARY_PREFERRED: string;\n\n    /**\n     * All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.\n     */\n    static NEAREST: string;\n\n    /**\n     * Validate if a mode is legal.\n     */\n    isValid(mode: string): boolean;\n\n    /**\n     * Validate if a mode is legal.\n     */\n    static isValid(mode: string): boolean;\n}\n\n/**\n * Creates a new Server instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport interface SocketOptions {\n\n    /**\n     * Reconnect on error.\n     */\n    autoReconnect?: boolean;\n\n    /**\n     * TCP Socket NoDelay option.\n     */\n    noDelay?: boolean;\n\n    /**\n     * TCP KeepAlive on the socket with a X ms delay before start.\n     */\n    keepAlive?: number;\n\n    /**\n     * TCP Connection timeout setting.\n     */\n    connectTimeoutMS?: number;\n\n    /**\n     * TCP Socket timeout setting.\n     */\n    socketTimeoutMS?: number;\n}\n\n/**\n * Creates a new Server instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport interface ServerOptions {\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n\n    /**\n     * Server attempt to reconnect #times.\n     */\n    reconnectTries?: number;\n\n    /**\n     * Server will wait # milliseconds between retries.\n     */\n    reconnectInterval?: number;\n}\n\n/**\n * Creates a new ReplSet instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\n */\nexport interface ReplSetOptions {\n\n    /**\n     * Turn on high availability monitoring.\n     */\n    ha?: boolean;\n\n    /**\n     * Time between each replicaset status check.\n     */\n    haInterval?: number;\n\n    /**\n     * The name of the replicaset to connect to.\n     */\n    replicaSet?: string;\n\n    /**\n     * Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms).\n     */\n    secondaryAcceptableLatencyMS?: number;\n\n    /**\n     * Sets if the driver should connect even if no primary is available.\n     */\n    connectWithNoPrimary?: boolean;\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n}\n\n/**\n * Creates a new Mongos instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\n */\nexport interface MongosOptions {\n\n    /**\n     * Turn on high availability monitoring.\n     */\n    ha?: boolean;\n\n    /**\n     * Time between each replicaset status check.\n     */\n    haInterval?: number;\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n}\n\nexport interface DbOptions {\n\n    /**\n     * Do not make the db an event listener to the original connection.\n     */\n    noListener?: boolean;\n\n    /**\n     * Control if you want to return a cached instance or have a new one created.\n     */\n    returnNonCachedInstance?: boolean;\n}\n\nexport interface IndexInformationOptions {\n\n    /**\n     * Returns the full raw index information.\n     */\n    full?: boolean;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY,\n     * ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY,\n     * ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\nexport interface ExecuteDbAdminCommandOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    // maxTimeMS?: number;\n}\n\nexport interface ListCollectionsOptions {\n\n    /**\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\n     */\n    batchSize?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Db.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\n */\nexport declare class Db extends EventEmitter {\n\n    /**\n     *\n     * @param databaseName The name of the database this instance represents.\n     * @param serverConfig The server topology for the database.\n     * @param options Optional.\n     */\n    constructor(databaseName: string, serverConfig: Server | ReplSet | Mongos, options?: DbCreateOptions);\n\n    /**\n     * Get the current db topology.\n     */\n    serverConfig: Server | ReplSet | Mongos;\n\n    /**\n     * Current bufferMaxEntries value for the database.\n     */\n    bufferMaxEntries: number;\n\n    /**\n     * The name of the database this instance represents.\n     */\n    databaseName: string;\n\n    /**\n     * The options associated with the db instance.\n     */\n    options: any;\n\n    /**\n     * The current value of the parameter native_parser.\n     */\n    native_parser: boolean;\n\n    /**\n     * The current slaveOk value for the db instance.\n     */\n    slaveOk: boolean;\n\n    /**\n     * The current write concern values.\n     */\n    writeConcern: any;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, options?: DbAddUserOptions): Promise<any>;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, options: DbAddUserOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Return the Admin db instance.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#admin\n     */\n    admin(): Admin;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, options?: { authMechanism: string }): Promise<any>;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param password\n     * @param options\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, options: { authMechanism: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(callback: MongoCallback<void>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param forceClose Force close, emitting no events.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(forceClose?: boolean): Promise<void>;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param forceClose Force close, emitting no events.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(forceClose: boolean, callback: MongoCallback<void>): void;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string): Collection;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string, callback: MongoCallback<Collection>): Collection;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string, options: DbCollectionOptions, callback: MongoCallback<Collection>): Collection;\n\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\n     */\n    collections(): Promise<Collection[]>;\n\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\n     */\n    collections(callback: MongoCallback<Collection[]>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, options?: { readPreference: ReadPreference | string }): Promise<any>;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, options: { readPreference: ReadPreference | string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param callback The results callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, callback: MongoCallback<Collection>): void;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param options Oprional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, options?: CollectionCreateOptions): Promise<Collection>;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional settings.\n     * @param callback The results callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, options: CollectionCreateOptions, callback: MongoCallback<Collection>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, options?: MongodbIndexOptions): Promise<any>;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, options: MongodbIndexOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     *\n     * @param dbName The name of the database we want to use.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\n     */\n    db(dbName: string): Db;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     *\n     * @param dbName The name of the database we want to use.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\n     */\n    db(dbName: string, options: DbOptions): Db;\n\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name Name of collection to drop.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\n     */\n    dropCollection(name: string): Promise<boolean>;\n\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name Name of collection to drop.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\n     */\n    dropCollection(name: string, callback: MongoCallback<boolean>): void;\n\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\n     */\n    dropDatabase(): Promise<any>;\n\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\n     */\n    dropDatabase(callback: MongoCallback<any>): void;\n\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#ensureIndex\n    // ensureIndex(collectionName: any, fieldOrSpec: any, options: IndexOptions, callback: Function): void;\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#eval\n    // eval(code: any, parameters: any[], options?: any, callback?: MongoCallback<any>): void;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, options?: ExecuteDbAdminCommandOptions): Promise<any>;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, options: ExecuteDbAdminCommandOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, options?: IndexInformationOptions): Promise<any>;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, options: IndexInformationOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Get the list of all collection information for the specified db.\n     *\n     * @param filter Query to filter collections by.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#listCollections\n     */\n    listCollections(filter: Object, options?: ListCollectionsOptions): CommandCursor;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(callback: MongoCallback<any>): void;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(options?: { dbName?: string }): Promise<any>;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(options: { dbName?: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Open the database.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\n     */\n    open(): Promise<Db>;\n\n    /**\n     * Open the database\n     *\n     * @param callback Callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\n     */\n    open(callback: MongoCallback<Db>): void;\n\n\n    /**\n     *\n     * @param username\n     * @param callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#removeUser\n     */\n    removeUser(username: string, callback: MongoCallback<any>): void;\n    removeUser(username: string, options?: { w?: number | string, wtimeout?: number, j?: boolean }): Promise<any>;\n    removeUser(username: string, options: { w?: number | string, wtimeout?: number, j?: boolean }, callback: MongoCallback<any>): void;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, callback: MongoCallback<Collection>): void;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, options?: { dropTarget?: boolean }): Promise<Collection>;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param options Optional settings.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection>): void;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(callback: MongoCallback<any>): void;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(options?: { scale?: number }): Promise<any>;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(options: { scale?: number }, callback: MongoCallback<any>): void;\n}\n\n/**\n * Server.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport declare class Server extends EventEmitter {\n\n    /**\n     *\n     * @param host The host for the server, can be either an IP4, IP6 or domain socket style host.\n     * @param port The server port if IP4.\n     * @param options Optional.\n     */\n    constructor(host: string, port: number, options?: ServerOptions);\n\n    /**\n     * All raw connections.\n     */\n    connections(): Array<any>;\n}\n\n/**\n * ReplSet.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\n */\nexport declare class ReplSet extends EventEmitter {\n\n    /**\n     *\n     * @param servers A seedlist of servers participating in the replicaset.\n     * @param options Optional.\n     */\n    constructor(servers: Array<Server>, options?: ReplSetOptions);\n\n    /**\n     * All raw connections\n     */\n    connections(): Array<any>;\n}\n\n/**\n * Mongos.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\n */\nexport declare class Mongos extends EventEmitter {\n\n    /**\n     *\n     * @param servers A seedlist of servers participating in the replicaset.\n     * @param options Optional.\n     */\n    constructor(servers: Array<Server>, options?: MongosOptions);\n\n    /**\n     * All raw connections\n     */\n    connections(): Array<any>;\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n */\nexport interface DbAddUserOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: string | number;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\n     */\n    customData?: Object;\n\n    /**\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\n     */\n    roles?: Object[];\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n */\nexport interface CollectionCreateOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Returns an error if the collection does not exist.\n     */\n    strict?: boolean;\n\n    /**\n     * Create a capped collection.\n     */\n    capped?: boolean;\n\n    /**\n     * The size of the capped collection in bytes.\n     */\n    size?: number;\n\n    /**\n     * The maximum number of documents in the capped collection.\n     */\n    max?: number;\n\n    /**\n     * Create an index on the _id field of the document, True by default on MongoDB 2.2 or higher off for version < 2.2.\n     */\n    autoIndexId?: boolean;\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n */\nexport interface DbCollectionOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Returns an error if the collection does not exist.\n     */\n    strict?: boolean;\n\n    /**\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\n     */\n    readConcern?: { level: Object };\n}\n\n/**\n * Creates an index on the db and collection collection.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n */\nexport interface MongodbIndexOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Creates an unique index.\n     */\n    unique?: boolean;\n\n    /**\n     * Creates a sparse index.\n     */\n    sparse?: boolean;\n\n    /**\n     * Creates the index in the background, yielding whenever possible.\n     */\n    background?: boolean;\n\n    /**\n     * A unique index cannot be created on a key that has pre-existing duplicate values.\n     * If you would like to create the index anyway, keeping the first document\n     * the database indexes and deleting all subsequent documents that have duplicate value.\n     */\n    dropDups?: boolean;\n\n    /**\n     * For geospatial indexes set the lower bound for the co-ordinates.\n     */\n    min?: number;\n\n    /**\n     * For geospatial indexes set the high bound for the co-ordinates.\n     */\n    max?: number;\n\n    /**\n     * Specify the format version of the indexes.\n     */\n    v?: number;\n\n    /**\n     * Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher).\n     */\n    expireAfterSeconds?: number;\n\n    /**\n     * Override the autogenerated index name (useful if the resulting name is larger than 128 bytes).\n     */\n    name?: string;\n\n}\n\n/**\n * Admin.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html\n */\nexport interface Admin {\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, options?: AddUserOptions): Promise<any>;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, options: AddUserOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, password?: string): Promise<any>;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the server information for the current instance of the db client\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\n     */\n    buildInfo(): Promise<any>;\n\n    /**\n     * Retrieve the server information for the current instance of the db client\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\n     */\n    buildInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, options?: CommandOptions): Promise<any>;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, options: CommandOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * List the available databases.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\n     */\n    listDatabases(): Promise<any>;\n\n    /**\n     * List the available databases.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\n     */\n    listDatabases(callback: MongoCallback<any>): void;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\n     */\n    logout(): Promise<any>;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\n     */\n    logout(callback: MongoCallback<any>): void;\n\n    /**\n     * Ping the MongoDB server and retrieve results.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\n     */\n    ping(): Promise<any>;\n\n    /**\n     * Ping the MongoDB server and retrieve results.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\n     */\n    ping(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrive the current profiling information for MongoDB.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\n     */\n    profilingInfo(): Promise<any>;\n\n    /**\n     * Retrive the current profiling information for MongoDB.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\n     */\n    profilingInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the current profiling Level for MongoDB.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\n     */\n    profilingLevel(): Promise<any>;\n\n    /**\n     * Retrieve the current profiling Level for MongoDB.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\n     */\n    profilingLevel(callback: MongoCallback<any>): void;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, options?: FSyncOptions): Promise<any>;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, options: FSyncOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Get ReplicaSet status.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\n     */\n    replSetGetStatus(): Promise<any>;\n\n    /**\n     * Get ReplicaSet status.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\n     */\n    replSetGetStatus(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the server information for the current\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\n     */\n    serverInfo(): Promise<any>;\n\n    /**\n     * instance of the db client\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\n     * @param callback The command result callback.\n     */\n    serverInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve this db's server status.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\n     */\n    serverStatus(): Promise<any>;\n\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\n     */\n    serverStatus(callback: MongoCallback<any>): void;\n\n    /**\n     * Set the current profiling level of MongoDB.\n     *\n     * @param level The new profiling level (off, slow_only, all).\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\n     */\n    setProfilingLevel(level: string): Promise<any>;\n\n    /**\n     * Set the current profiling level of MongoDB.\n     *\n     * @param level The new profiling level (off, slow_only, all).\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\n     */\n    setProfilingLevel(level: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, options?: Object): Promise<any>;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param options Optional settings.\n     * @param callback The command result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, options: Object, callback: MongoCallback<any>): void;\n}\n\n/**\n * Add a user to the database.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n */\nexport interface AddUserOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Specify a file sync write concern.\n     */\n    fsync: boolean;\n\n    /**\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\n     */\n    customData?: Object;\n\n    /**\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\n     */\n    roles?: Object[];\n}\nexport interface ListIndexesOptions {\n\n    /**\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\n     */\n    batchSize?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\nexport interface GroupOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Remove a user from a database.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n */\nexport interface FSyncOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Specify a file sync write concern.\n     */\n    fsync?: boolean;\n}\n\nexport interface FindOneAndDeleteOptions {\n\n    /**\n     * Limits the fields to return for all matching documents.\n     */\n    projection?: Object;\n\n    /**\n     * Determines which document the operation modifies if the query selects multiple documents.\n     */\n    sort?: Object;\n\n    /**\n     * The maximum amount of time to allow the query to run.\n     */\n    maxTimeMS?: number;\n}\n\n/**\n * Create a new ObjectID instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ObjectID.html\n */\nexport declare class ObjectID {\n    constructor(s?: string | number);\n\n    /**\n     * The generation time of this ObjectId instance.\n     */\n    generationTime: number;\n\n    /**\n     * Creates an ObjectID from a hex string representation of an ObjectID.\n     */\n    static createFromHexString(hexString: string): ObjectID;\n\n    /**\n     * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n     */\n    static createFromTime(time: number): ObjectID;\n\n    /**\n     * Checks if a value is a valid bson ObjectId.\n     */\n    static isValid(id: any): boolean;\n\n    /**\n     * Compares the equality of this ObjectID with otherID.\n     */\n    equals(otherID: ObjectID): boolean;\n\n    /**\n     * Generate a 12 byte id buffer used in ObjectID's.\n     */\n    generate(time?: number): string;\n\n    /**\n     * Returns the generation date (accurate up to the second) that this ID was generated.\n     *\n     */\n    getTimestamp(): Date;\n\n    /**\n     * Return the ObjectID id as a 24 byte hex string representation.\n     */\n    toHexString(): string;\n\n    /**\n     * Get the timestamp and validate correctness.\n     */\n    toString(): string;\n}\n\n/**\n * A class representation of the BSON Binary type.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Binary.html\n */\nexport declare class Binary {\n\n    /**\n     * @param buffer A buffer object containing the binary data.\n     * @param subType The option binary type.\n     */\n    constructor(buffer: Buffer, subType?: number);\n\n    /**\n     * Byte Array BSON type.\n     */\n    static SUBTYPE_BYTE_ARRAY: number;\n\n    /**\n     * Default BSON type.\n     */\n    static SUBTYPE_DEFAULT: number;\n\n    /**\n     * Function BSON type.\n     */\n    static SUBTYPE_FUNCTION: number;\n\n    /**\n     * MD5 BSON type.\n     */\n    static SUBTYPE_MD5: number;\n\n    /**\n     * User BSON type.\n     */\n    static SUBTYPE_USER_DEFINED: number;\n\n    /**\n     * UUID BSON type.\n     */\n    static SUBTYPE_UUID: number;\n\n    /**\n     * OLD UUID BSON type\n     */\n    static SUBTYPE_UUID_OLD: number;\n\n    /**\n     * The length of the binary.\n     */\n    length(): number;\n\n    /**\n     * Updates this binary with byte_value.\n     *\n     * @param byte_value A single byte we wish to write.\n     */\n    put(byte_value: number | string): void;\n\n    /**\n     * Reads length bytes starting at position.\n     *\n     * @param position Read from the given position in the Binary.\n     * @param length The number of bytes to read.\n     */\n    read(position: number, length: number): Buffer;\n\n    /**\n     * Returns the value of this binary as a string.\n     */\n    value(): string;\n\n    /**\n     * Writes a buffer or string to the binary\n     *\n     * @param buffer A string or buffer to be written to the Binary BSON object.\n     * @param offset Specify the binary of where to write the content.\n     */\n    write(buffer: Buffer | string, offset: number): void;\n}\n/**\n * A class representation of the BSON Double type.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Double.html\n */\nexport declare class Double {\n\n    /**\n     * @param value The number we want to represent as a double.\n     */\n    constructor(value: number);\n\n    /**\n     * Access the number value.\n     */\n    valueOf(): number;\n}\n\n/**\n * Long\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Long.html\n */\nexport declare class Long {\n\n    /**\n     * @param low The low (signed) 32 bits of the Long.\n     * @param high The high (signed) 32 bits of the Long.\n     */\n    constructor(low: number, high: number);\n\n    static MAX_VALUE: Long;\n    static MIN_VALUE: Long;\n    static NEG_ONE: Long;\n    static ONE: Long;\n    static ZERO: Long;\n\n    /**\n     * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits.\n     * Each is assumed to use 32 bits.\n     *\n     * @param lowBits The low 32-bits.\n     * @param highBits The high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Long;\n\n    /**\n     * Returns a Long representing the given (32-bit) integer value.\n     *\n     * @param value The 32-bit integer in question.\n     */\n    static fromInt(value: number): Long;\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     *\n     * @param value The number in question.\n     */\n    static fromNumber(value: number): Long;\n\n    /**\n     * Returns a Long representation of the given string, written using the given radix.\n     *\n     * @param str The textual representation of the Long.\n     * @param radix The radix in which the text is written.\n     */\n    static fromString(str: string, radix?: number): Long;\n\n    /**\n     * Returns the sum of this and the given Long.\n     *\n     * @param other Long to add to this one.\n     */\n    add(other: Long): Long;\n\n    /**\n     * Returns the bitwise-AND of this Long and the given one.\n     *\n     * @param other The Long with which to AND.\n     */\n    and(other: Long): Long;\n\n    /**\n     * Compares this Long with the given one.\n     *\n     * @param other Long to compare against.\n     */\n    compare(other: Long): number;\n\n    /**\n     * Returns this Long divided by the given one.\n     *\n     * @param other Long by which to divide.\n     */\n    div(other: Long): Long;\n\n    /**\n     * Return whether this Long equals the other.\n     *\n     * @param other Long to compare against.\n     */\n    equals(other: Long): boolean;\n\n    /**\n     * Return the high 32-bits value.\n     */\n    getHighBits(): number;\n\n    /**\n     * Return the low 32-bits value.\n     */\n    getLowBits(): number;\n\n    /**\n     * Return the low unsigned 32-bits value.\n     */\n    getLowBitsUnsigned(): number;\n\n    /**\n     * Returns the number of bits needed to represent the absolute value of this Long.\n     */\n    getNumBitsAbs(): number;\n\n    /**\n     * Return whether this Long is greater than the other.\n     *\n     * @param other Long to compare against.\n     */\n    greaterThan(other: Long): number;\n\n    /**\n     * Return whether this Long is greater than or equal to the other.\n     *\n     * @param other Long to compare against.\n     */\n    greaterThanOrEqual(other: Long): number;\n\n    /**\n     * Return whether this value is negative.\n     */\n    isNegative(): boolean;\n\n    /**\n     * Return whether this value is odd.\n     */\n    isOdd(): boolean;\n\n    /**\n     * Return whether this value is zero.\n     */\n    isZero(): boolean;\n\n    /**\n     * Return whether this Long is less than the other.\n     *\n     * @param other Long to compare against.\n     */\n    lessThan(other: Long): boolean;\n\n    /**\n     * Return whether this Long is less than or equal to the other.\n     *\n     * @param other Long to compare against.\n     */\n    lessThanOrEqual(other: Long): boolean;\n\n    /**\n     * Returns this Long modulo the given one.\n     *\n     * @param other Long by which to mod.\n     */\n    modulo(other: Long): Long;\n\n    /**\n     * Returns the product of this and the given Long.\n     *\n     * @param other Long to multiply with this.\n     */\n    multiply(other: Long): Long;\n\n    /**\n     * The negation of this value.\n     */\n    negate(): Long;\n\n    /**\n     * The bitwise-NOT of this value.\n     */\n    not(): Long;\n\n    /**\n     * Return whether this Long does not equal the other.\n     *\n     * @param other Long to compare against.\n     */\n    notEquals(other: Long): boolean;\n\n    /**\n     * Returns the bitwise-OR of this Long and the given one.\n     *\n     * @param other The Long with which to OR.\n     */\n    or(other: Long): Long;\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftLeft(other: number): Long;\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRight(other: number): Long;\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRightUnsigned(other: number): Long;\n\n    /**\n     * Returns the difference of this and the given Long.\n     *\n     * @param other Long to subtract from this.\n     */\n    subtract(other: Long): Long;\n\n    /**\n     * Return the int value.\n     */\n    toInt(): number;\n\n    /**\n     * Return the JSON value.\n     */\n    toJSON(): string;\n\n    /**\n     * Return the Number value.\n     */\n    toNumber(): number;\n\n    /**\n     * Return the String value.\n     *\n     * @param opt_radix The radix in which the text should be written.\n     */\n    toString(opt_radix?: number): string;\n\n    /**\n     * Returns the bitwise-XOR of this Long and the given one.\n     *\n     * @param other The Long with which to XOR.\n     */\n    xor(other: Long): Long;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MaxKey.html\n */\nexport declare class MaxKey { }\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MinKey.html\n */\nexport declare class MinKey { }\n\n/**\n * Timestamp.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Timestamp.html\n */\nexport declare class Timestamp {\n\n    /**\n     * @param low The low (signed) 32 bits of the Timestamp.\n     * @param high The high (signed) 32 bits of the Timestamp.\n     */\n    constructor(low: number, high: number);\n\n    static MAX_VALUE: Timestamp;\n    static MIN_VALUE: Timestamp;\n    static NEG_ONE: Timestamp;\n    static ONE: Timestamp;\n    static ZERO: Timestamp;\n\n    /**\n     * Returns a Timestamp representing the 64-bit integer that comes by concatenating the\n     * given high and low bits. Each is assumed to use 32 bits..\n     *\n     * @param lowBits The low 32-bits.\n     * @param highBits The high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representing the given (32-bit) integer value.\n     *\n     * @param value The 32-bit integer in question.\n     */\n    static fromInt(value: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     *\n     * @param value The number in question.\n     */\n    static fromNumber(value: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representation of the given string, written using the given radix.\n     *\n     * @param str The textual representation of the Timestamp.\n     * @param radix The radix in which the text is written.\n     */\n    static fromString(str: string, radix?: number): Timestamp;\n\n    /**\n     * Returns the sum of this and the given Timestamp.\n     *\n     * @param other Timestamp to add to this one.\n     */\n    add(other: Timestamp): Timestamp;\n\n    /**\n     * Returns the bitwise-AND of this Timestamp and the given one.\n     *\n     * @param other Timestamp to add to this one.\n     */\n    and(other: Timestamp): Timestamp;\n\n    /**\n     * Compares this Timestamp with the given one.\n     *\n     * @param other Timestamp to compare against.\n     */\n    compare(other: Timestamp): number;\n\n    /**\n     * Returns this Timestamp divided by the given one.\n     *\n     * @param other Timestamp by which to divide.\n     */\n    div(other: Timestamp): Timestamp;\n\n    /**\n     * Return whether this Timestamp equals the other\n     *\n     * @param other\n     */\n    equals(other: Timestamp): boolean;\n\n    /**\n     * Return the high 32-bits value.\n     */\n    getHighBits(): number;\n\n    /**\n     * Return the low 32-bits value.\n     */\n    getLowBits(): number;\n\n    /**\n     * Return the low unsigned 32-bits value.\n     */\n    getLowBitsUnsigned(): number;\n\n    /**\n     * Returns the number of bits needed to represent the absolute value of this Timestamp.\n     */\n    getNumBitsAbs(): number;\n\n    /**\n     * Return whether this Timestamp is greater than the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    greaterThan(other: Timestamp): number;\n\n    /**\n     * Return whether this Timestamp is greater than or equal to the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    greaterThanOrEqual(other: Timestamp): number;\n\n    /**\n     * Return whether this value is negative.\n     */\n    isNegative(): boolean;\n\n    /**\n     * IsOdd.\n     * Return whether this value is odd.\n     */\n    isOdd(): boolean;\n\n    /**\n     * Return whether this value is zero.\n     */\n    isZero(): boolean;\n\n    /**\n     * Return whether this Timestamp is less than the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    lessThan(other: Timestamp): boolean;\n\n    /**\n     * Return whether this Timestamp is less than or equal to the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    lessThanOrEqual(other: Timestamp): boolean;\n\n    /**\n     * Returns this Timestamp modulo the given one.\n     *\n     * @param other Timestamp by which to mod.\n     */\n    modulo(other: Timestamp): Timestamp;\n\n    /**\n     * Returns the product of this and the given Timestamp.\n     *\n     * @param other Timestamp to multiply with this.\n     */\n    multiply(other: Timestamp): Timestamp;\n\n    /**\n     * The negation of this value.\n     */\n    negate(): Timestamp;\n\n    /**\n     * The bitwise-NOT of this value.\n     */\n    not(): Timestamp;\n\n    /**\n     * Return whether this Timestamp does not equal the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    notEquals(other: Timestamp): boolean;\n\n    /**\n     * Returns the bitwise-OR of this Timestamp and the given one.\n     *\n     * @param other The Timestamp with which to OR.\n     */\n    or(other: Timestamp): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the left by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftLeft(other: number): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the right by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRight(other: number): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n     *\n     * @param other\n     */\n    shiftRightUnsigned(other: number): Timestamp;\n\n    /**\n     * Returns the difference of this and the given Timestamp.\n     *\n     * @param other Timestamp to subtract from this.\n     */\n    subtract(other: Timestamp): Timestamp;\n\n    /**\n     * Return the int value.\n     */\n    toInt(): number;\n\n    /**\n     * Return the JSON value.\n     */\n    toJSON(): string;\n\n    /**\n     * Return the Number value.\n     */\n    toNumber(): number;\n\n    /**\n     * Return the String value.\n     *\n     * @param radix The radix in which the text should be written.\n     */\n    toString(radix?: number): string;\n\n    /**\n     * Returns the bitwise-XOR of this Timestamp and the given one.\n     *\n     * @param other The Timestamp with which to XOR.\n     */\n    xor(other: Timestamp): Timestamp;\n}\n\nexport interface CollectionDeleteOneOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimmeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\nexport interface CollectionDistinctOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Create a new ObjectID instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html\n */\nexport interface Collection {\n\n    /**\n     * Get the collection name.\n     */\n    collectionName: string;\n\n    /**\n     * Get the full collection namespace.\n     */\n    namespace: string;\n\n    /**\n     * The current write concern values.\n     */\n    writeConcern: any;\n\n    /**\n     * The current read concern values.\n     */\n    readConcern: any;\n\n    /**\n     * Get current index hint for collection.\n     */\n    hint: any;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<any>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param options Optional.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<any>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate<T>(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<T>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param options Optional.\n     * @param callback Optional\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate<T>(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<T>;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], callback: MongoCallback<BulkWriteOpResultObject>): void;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject>;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], options: CollectionBluckWriteOptions, callback: MongoCallback<BulkWriteOpResultObject>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: Object, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: Object, options?: MongoCountPreferences): Promise<number>;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count=\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: Object, options: MongoCountPreferences, callback: MongoCallback<number>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, callback: MongoCallback<string>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, options?: MongodbIndexOptions): Promise<string>;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, options: MongodbIndexOptions, callback: MongoCallback<string>): void;\n\n    /**\n     * CreateIndexes.\n     *\n     * @param indexSpecs An array of index specifications to be created.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\n     */\n    createIndexes(indexSpecs: Object[]): Promise<any>;\n\n    /**\n     * CreateIndexes.\n     *\n     * @param indexSpecs An array of index specifications to be created.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\n     */\n    createIndexes(indexSpecs: Object[], callback: MongoCallback<any>): void;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: Object, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: Object, options?: CollectionOptions): Promise<DeleteWriteOpResultObject>;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: Object, options: CollectionOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: Object, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: Object, options?: CollectionDeleteOneOptions): Promise<DeleteWriteOpResultObject>;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: Object, options: CollectionDeleteOneOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: Object, options?: CollectionDistinctOptions): Promise<any>;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: Object, options: CollectionDistinctOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\n     */\n    drop(): Promise<any>;\n\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\n     */\n    drop(callback: MongoCallback<any>): void;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, options?: CollectionOptions): Promise<any>;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, options: CollectionOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\n     */\n    dropIndexes(): Promise<any>;\n\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\n     */\n    dropIndexes(callback?: MongoCallback<any>): void;\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     *\n     * @param query The cursor query object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\n     */\n    find(query?: Object): Cursor<any>;\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     *\n     * @param query The cursor query object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\n     */\n    find<T>(query?: Object): Cursor<T>;\n\n    /** @deprecated */\n    find(query: Object, fields?: Object, skip?: number, limit?: number, timeout?: number): Cursor<any>;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: Object, options?: FindOneOptions): Promise<any>;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: Object, options: FindOneOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: Object, options?: FindOneAndDeleteOptions): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: Object, options: FindOneAndDeleteOptions, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: Object, replacement: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: Object, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: Object, replacement: Object, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: Object, update: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: Object, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: Object, update: Object, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any>;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional settings\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, options: GeoHaystackSearchOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optionals.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any>;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, options: GeoNearOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, callback: MongoCallback<any>): void;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: GroupOptions): Promise<any>;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options: GroupOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\n     */\n    indexes(): Promise<any>;\n\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\n     */\n    indexes(callback: MongoCallback<any>): void;\n\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\n     *\n     * @param indexes One or more index names to check.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\n     */\n    indexExists(indexes: string | string[]): Promise<boolean>;\n\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\n     *\n     * @param indexes One or more index names to check.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\n     */\n    indexExists(indexes: string | string[], callback: MongoCallback<boolean>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param callback The command result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(options?: { full: boolean }): Promise<any>;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(options: { full: boolean }, callback: MongoCallback<any>): void;\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added,\n     * creating a new operation for each switch in types.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeOrderedBulkOp\n     */\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation;\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeUnorderedBulkOp\n     */\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], callback: MongoCallback<InsertWriteOpResult>): void;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult>;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], options: CollectionInsertManyOptions, callback: MongoCallback<InsertWriteOpResult>): void;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * Returns if the collection is a capped collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\n     */\n    isCapped(): Promise<any>;\n\n    /**\n     * Returns if the collection is a capped collection.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\n     */\n    isCapped(callback: MongoCallback<any>): void;\n\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#listIndexes\n     */\n    listIndexes(options?: ListIndexesOptions): CommandCursor;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, callback: MongoCallback<any>): void;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any>;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, options: MapReduceOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Returns the options of the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\n     */\n    options(): Promise<any>;\n\n    /**\n     * Returns the options of the collection.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\n     */\n    options(callback: MongoCallback<any>): void;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(callback: MongoCallback<Cursor<any>[]>): void;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]>;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(options: ParallelCollectionScanOptions, callback: MongoCallback<Cursor<any>[]>): void;\n\n    /**\n     * Reindex all indexes on the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\n     */\n    reIndex(): Promise<any>;\n\n    /**\n     * Reindex all indexes on the collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\n     */\n    reIndex(callback: MongoCallback<any>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#remove\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }): Promise<WriteOpResult>;\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }, callback?: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, callback: MongoCallback<Collection>): void;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection>;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param options Optional settings.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection>): void;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: Object, doc: Object, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: Object, doc: Object, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: Object, doc: Object, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#save\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, options?: CollectionOptions): Promise<WriteOpResult>;\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, options: CollectionOptions, callback: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(callback: MongoCallback<CollStats>): void;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(options?: { scale: number }): Promise<CollStats>;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(options: { scale: number }, callback: MongoCallback<CollStats>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#update\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: Object, update: Object, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: Object, update: Object, options?: ReplaceOneOptions & { multi?: boolean }): Promise<WriteOpResult>;\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: Object, update: Object, options: ReplaceOneOptions & { multi?: boolean }, callback: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: Object, update: Object, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: Object, update: Object, options?: UpdateManyOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: Object, update: Object, options: UpdateManyOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: Object, update: Object, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: Object, update: Object, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: Object, update: Object, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n}\n\n/**\n * The name of the target collection.\n *\n * @see http://docs.mongodb.org/manual/reference/command/collStats/\n */\nexport interface CollStats {\n\n    /**\n     * Namespace.\n     */\n    ns: string;\n\n    /**\n     * The number of objects or documents in this collection.\n     */\n    count: number;\n\n    /**\n     * Collection size in bytes.\n     */\n    size: number;\n\n    /**\n     * Average object size in bytes.\n     */\n    avgObjSize: number;\n\n    /**\n     * (Pre)allocated space for the collection in bytes.\n     */\n    storageSize: number;\n\n    /**\n     * Number of extents (contiguously allocated chunks of datafile space).\n     */\n    numExtents: number;\n\n    /**\n     * Number of indexes.\n     */\n    nindexes: number;\n\n    /**\n     * Size of the most recently created extent in bytes.\n     */\n    lastExtentSize: number;\n\n    /**\n     * Padding can speed up updates if documents grow.\n     */\n    paddingFactor: number;\n\n    /**\n     * A number that indicates the user-set flags on the collection. userFlags\n     * only appears when using the mmapv1 storage engine.\n     */\n    userFlags: number;\n\n    /**\n     * Total index size in bytes.\n     */\n    totalIndexSize: number;\n\n    /**\n     * Size of specific indexes in bytes.\n     */\n    indexSizes: {\n        _id_: number;\n        username: number;\n    };\n\n    /**\n     * This field will be “true” if the collection is capped.\n     */\n    capped: boolean;\n\n    /**\n     * Shows the maximum size of a capped collection.\n     */\n    maxSize: boolean;\n\n    /**\n     * This document contains data reported directly by the WiredTiger engine and other data for internal diagnostic use.\n     */\n    wiredTiger: any;\n\n    /**\n     * A document that reports data from the WiredTiger storage engine for each index in the collection.\n     * Other storage engines will return an empty document.\n     */\n    indexDetails: any;\n\n    /**\n     *\n     */\n    ok: number;\n}\n\n/**\n * CollectionAggregationOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n */\nexport interface CollectionAggregationOptions {\n\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\n     */\n    cursor?: { batchSize: number };\n\n    /**\n     * Explain returns the aggregation execution plan (requires mongodb 2.6 >).\n     */\n    explain?: boolean;\n\n    /**\n     * allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\n     */\n    allowDiskUse?: boolean;\n\n    /**\n     * maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n     */\n    maxTimeMS?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * CollectionInsertManyOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n */\nexport interface CollectionInsertManyOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n}\n\nexport interface UpdateManyOptions {\n\n    /**\n     * Update operation is an upsert.\n     */\n    upsert?: boolean;\n\n    /**\n     * The write concern.\n     */\n    w?: any;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n}\n\n/**\n * CollectionBluckWriteOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n */\nexport interface CollectionBluckWriteOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Execute write operation in ordered or unordered fashion.\n     */\n    ordered?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * BulkWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~BulkWriteOpResult\n */\nexport interface BulkWriteOpResultObject {\n\n    /**\n     * Number of documents inserted.\n     */\n    insertedCount?: number;\n\n    /**\n     * Number of documents matched for update.\n     */\n    matchedCount?: number;\n\n    /**\n     * Number of documents modified.\n     */\n    modifiedCount?: number;\n\n    /**\n     * Number of documents deleted.\n     */\n    deletedCount?: number;\n\n    /**\n     * Number of documents upserted.\n     */\n    upsertedCount?: number;\n\n    /**\n     * Inserted document generated Id's, hash key is the index of the originating operation.\n     */\n    insertedIds?: any;\n\n    /**\n     * Upserted document generated Id's, hash key is the index of the originating operation.\n     */\n    upsertedIds?: any;\n\n    /**\n     * The command result object.\n     */\n    result?: any;\n}\n\n/**\n * MongoCountPreferences.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n */\nexport interface MongoCountPreferences {\n\n    /**\n     * The limit of documents to count.\n     */\n    limit?: number;\n\n    /**\n     * The number of documents to skip for the count.\n     */\n    skip?: boolean;\n\n    /**\n     * An index name hint for the query.\n     */\n    hint?: string;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * DeleteWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~deleteWriteOpResult\n */\nexport interface DeleteWriteOpResultObject {\n\n    /**\n     * The raw result returned from MongoDB, field will vary depending on server version.\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents deleted.\n     */\n    result: {\n        ok?: number;\n        n?: number;\n    };\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection?: any;\n\n    /**\n     * The number of documents deleted.\n     */\n    deletedCount?: number;\n}\n\n/**\n * FindAndModifyWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~findAndModifyWriteOpResult\n */\nexport interface FindAndModifyWriteOpResultObject {\n\n    /**\n     * Document returned from findAndModify command.\n     */\n    value?: any;\n\n    /**\n     * The raw lastErrorObject returned from the command.\n     */\n    lastErrorObject?: any;\n\n    /**\n     * Is 1 if the command executed correctly.\n     */\n    ok?: number;\n}\n\n/**\n * FindOneAndReplaceOption.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n */\nexport interface FindOneAndReplaceOption {\n\n    /**\n     * Limits the fields to return for all matching documents.\n     */\n    projection?: Object;\n\n    /**\n     * Determines which document the operation modifies if the query selects multiple documents.\n     */\n    sort?: Object;\n\n    /**\n     * The maximum amount of time to allow the query to run.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * Upsert the document if it does not exist.\n     */\n    upsert?: boolean;\n\n    /**\n     * When false, returns the updated document rather than the original. The default is true.\n     */\n    returnOriginal?: boolean;\n}\n\n/**\n * GeoHaystackSearchOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n */\nexport interface GeoHaystackSearchOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Include results up to maxDistance from the point.\n     */\n    maxDistance?: number;\n\n    /**\n     * Filter the results by a query.\n     */\n    search?: Object;\n\n    /**\n     * Max number of results to return.\n     */\n    limit?: number;\n}\n\n/**\n * GeoNearOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n */\nexport interface GeoNearOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Max number of results to return.\n     */\n    num?: number;\n\n    /**\n     * Include results starting at minDistance from a point (2.6 or higher).\n     */\n    minDistance?: number;\n\n    /**\n     * Include results up to maxDistance from the point.\n     */\n    maxDistance?: number;\n\n    /**\n     * Include a value to multiply the distances with allowing for range conversions.\n     */\n    distanceMultiplier?: number;\n\n    /**\n     * Filter the results by a query.\n     */\n    query?: Object;\n\n    /**\n     * Perform query using a spherical model.\n     */\n    spherical?: boolean;\n\n    /**\n     * The closest location in a document to the center of the search region will always be returned MongoDB > 2.X.\n     */\n    uniqueDocs?: boolean;\n\n    /**\n     * Include the location data fields in the top level of the results MongoDB > 2.X.\n     */\n    includeLocs?: boolean;\n}\n\n/**\n * A class representation of the BSON Code type.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Code.html\n */\nexport declare class Code {\n    /**\n     *\n     * @param code a string or function.\n     * @param scope optional\n     */\n    constructor(code: string | Function, scope?: Object)\n\n    /**\n     * A string or function.\n     */\n    code: string | Function;\n\n    /**\n     * An optional scope for the function.\n     */\n    scope: any;\n}\n\n/**\n * CollectionOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n */\nexport interface CollectionOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n}\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html\n */\nexport interface OrderedBulkOperation {\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\n     * @param selector The selector for the bulk operation.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#find\n     */\n    find(selector: Object): FindOperatorsOrdered;\n\n    /**\n     * Add a single insert document to the bulk operation.\n     * @param doc The document to insert\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#insert\n     */\n    insert(doc: Object): OrderedBulkOperation;\n}\n\n/**\n * BulkWriteResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/BulkWriteResult.html\n */\nexport interface BulkWriteResult {\n\n    /**\n     * Did bulk operation correctly execute.\n     */\n    ok: number;\n\n    /**\n     * number of inserted documents.\n     */\n    nInserted: number;\n\n    /**\n     * number of documents updated logically.\n     */\n    nUpdated: number;\n\n    /**\n     * Number of upserted documents.\n     */\n    nUpserted: number;\n\n    /**\n     *\n     Number of documents updated physically on disk.\n     */\n    nModified: number;\n\n    /**\n     * Number of removed documents.\n     */\n    nRemoved: number;\n\n    /**\n     * Return an array of inserted ids.\n     */\n    getInsertedIds(): Array<Object>;\n\n    /**\n     * Retrieve lastOp if available.\n     */\n    getLastOp(): Object;\n\n    /**\n     * Return raw internal result.\n     */\n    getRawResponse(): Object;\n\n    /**\n     * Return the upserted id at position x.\n     */\n    getUpsertedIdAt(index: number): Object;\n\n    /**\n     * Return an array of upserted ids.\n     */\n    getUpsertedIds(): Array<Object>;\n\n    /**\n     * Retrieve the write concern error if any.\n     */\n    getWriteConcernError(): WriteConcernError;\n\n    /**\n     * Returns a specific write error object.\n     */\n    getWriteErrorAt(index: number): WriteError;\n\n    /**\n     * Returns the number of write errors off the bulk operation.\n     */\n    getWriteErrorCount(): number;\n\n    /**\n     * Retrieve all write errors.\n     */\n    getWriteErrors(): Array<Object>;\n\n    /**\n     * Returns true if the bulk operation contains a write error.\n     */\n    hasWriteErrors(): boolean;\n}\n\n/**\n * Create a new WriteError instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteError.html\n */\nexport interface WriteError {\n\n    /**\n     * Write concern error code.\n     */\n    code: number;\n\n    /**\n     * Write concern error original bulk operation index.\n     */\n    index: number;\n\n    /**\n     * Write concern error message.\n     */\n    errmsg: string;\n}\n\n/**\n * Create a new WriteConcernError instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteConcernError.html\n */\nexport interface WriteConcernError {\n\n    /**\n     * Write concern error code.\n     */\n    code: number;\n\n    /**\n     * Write concern error message.\n     */\n    errmsg: string;\n}\n\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsOrdered.html\n */\nexport interface FindOperatorsOrdered {\n\n    /**\n     * Add a remove operation to the bulk operation.\n     */\n    delete(): OrderedBulkOperation;\n\n    /**\n     * Add a remove one operation to the bulk operation.\n     */\n    deleteOne(): OrderedBulkOperation;\n\n    /**\n     * Add a replace one operation to the bulk operation.\n     */\n    replaceOne(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Add a single update document to the bulk operation.\n     */\n    update(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Add a single update one document to the bulk operation.\n     */\n    updateOne(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Upsert modifier for update bulk operation.\n     */\n    upsert(): FindOperatorsOrdered;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html\n */\nexport interface UnorderedBulkOperation {\n\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\n     * @param selector The selector for the bulk operation.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#find\n     */\n    find(selector: Object): FindOperatorsUnordered;\n\n    /**\n     * Add a single insert document to the bulk operation.\n     * @param doc The document to insert.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#insert\n     */\n    insert(doc: Object): UnorderedBulkOperation;\n}\n\n/**\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsUnordered.html\n */\nexport interface FindOperatorsUnordered {\n\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Add a remove operation to the bulk operation.\n     */\n    remove(): UnorderedBulkOperation;\n\n    /**\n     * Add a remove one operation to the bulk operation.\n     */\n    removeOne(): UnorderedBulkOperation;\n\n    /**\n     * Add a replace one operation to the bulk operation.\n     * @param doc The new document to replace the existing one with.\n     */\n    replaceOne(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Add a single update document to the bulk operation.\n     * @param doc Update operations\n     */\n    update(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Add a single update one document to the bulk operation.\n     * @param doc Update operations\n     */\n    updateOne(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Upsert modifier for update bulk operation.\n     */\n    upsert(): FindOperatorsUnordered;\n}\n\n/**\n * FindOneOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n */\nexport interface FindOneOptions {\n\n    /**\n     * Sets the limit of documents returned in the query.\n     */\n    limit?: number;\n\n    /**\n     * Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n     */\n    sort?: Array<any> | Object;\n\n    /**\n     * The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}.\n     */\n    fields?: Object;\n\n    /**\n     * Set to skip N documents ahead in your query (useful for pagination).\n     */\n    skip?: number;\n\n    /**\n     * Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}.\n     */\n    hint?: Object;\n\n    /**\n     * Explain the query instead of returning the data.\n     */\n    explain?: boolean;\n\n    /**\n     * Snapshot query.\n     */\n    snapshot?: boolean;\n\n    /**\n     * Specify if the cursor can timeout.\n     */\n    timeout?: boolean;\n\n    /**\n     * Specify if the cursor is tailable.\n     */\n    tailable?: boolean;\n\n    /**\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\n     */\n    batchSize?: number;\n\n    /**\n     * Only return the index key.\n     */\n    returnKey?: boolean;\n\n    /**\n     * Limit the number of items to scan.\n     */\n    maxScan?: number;\n\n    /**\n     * Set index bounds.\n     */\n    min?: number;\n\n    /**\n     * Set index bounds.\n     */\n    max?: number;\n\n    /**\n     * Show disk location of results.\n     */\n    showDiskLoc?: boolean;\n\n    /**\n     * You can put a $comment field on a query to make looking in the profiler logs simpler.\n     */\n    comment?: string;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Specify if the cursor should return partial results when querying against a sharded system.\n     */\n    partial?: boolean;\n\n    /**\n     * Number of miliseconds to wait before aborting the query.\n     */\n    maxTimeMs?: number;\n}\n\n/**\n * InsertWriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertWriteOpResult\n */\nexport interface InsertWriteOpResult {\n\n    /**\n     * The total amount of documents inserted.\n     */\n    insertedCount: number;\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * All the generated _id's for the inserted documents.\n     */\n    insertedIds: Array<ObjectID>;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The raw command result object returned from MongoDB (content might vary by server version).\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents inserted.\n     */\n    result: { ok: number, n: number };\n}\n\n/**\n * CollectionInsertOneOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n */\nexport interface CollectionInsertOneOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * InsertOneWriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertOneWriteOpResult\n */\nexport interface InsertOneWriteOpResult {\n\n    /**\n     * The total amount of documents inserted.\n     */\n    insertedCount: number;\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * The driver generated ObjectId for the insert operation.\n     */\n    insertedId: ObjectID;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The raw command result object returned from MongoDB (content might vary by server version).\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents inserted.\n     */\n    result: { ok: number, n: number };\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n */\nexport interface ParallelCollectionScanOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\n     */\n    batchSize?: number;\n\n    /**\n     * The maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors).\n     */\n    numCursors?: number;\n\n    /**\n     * Return all BSON documents as Raw Buffer documents.\n     */\n    raw?: boolean;\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n */\nexport interface ReplaceOneOptions {\n\n    /**\n     * Update operation is an upsert.\n     */\n    upsert?: boolean;\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~updateWriteOpResult\n */\nexport interface UpdateWriteOpResult {\n\n    /**\n     * The raw result returned from MongoDB, field will vary depending on server version.\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents scanned.\n     * @param nModified The total count of documents modified.\n     */\n    result: { ok: number, n: number, nModified: number };\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The number of documents that matched the filter.\n     */\n    matchedCount: number;\n\n    /**\n     * The number of documents that were modified.\n     */\n    modifiedCount: number;\n\n    /**\n     * The number of documents upserted.\n     */\n    upsertedCount: number;\n\n    /**\n     * The upserted id.\n     * @param _id The upserted _id returned from the server.\n     */\n    upsertedId: { _id: ObjectID };\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n */\nexport interface MapReduceOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Sets the output target for the map reduce job.\n     * {inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}.\n     */\n    out?: Object;\n\n    /**\n     * Query filter object.\n     */\n    query?: Object;\n\n    /**\n     * Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.\n     */\n    sort?: Object;\n\n    /**\n     * Number of objects to return from collection.\n     */\n    limit?: number;\n\n    /**\n     * Keep temporary data.\n     */\n    keeptemp?: boolean;\n\n    /**\n     * Finalize function.\n     */\n    finalize?: Function | string;\n\n    /**\n     * Can pass in variables that can be access from map/reduce/finalize.\n     */\n    scope?: Object;\n\n    /**\n     * It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.\n     */\n    jsMode?: boolean;\n\n    /**\n     * Provide statistics on job execution time.\n     */\n    verbose?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * WriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~WriteOpResult\n */\nexport interface WriteOpResult {\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The command result object.\n     */\n    result: any;\n}\n\n/**\n * WriteOpResult.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~resultCallback\n */\nexport type CursorResult = any | void | boolean;\n\n/**\n * Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly).\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html\n */\nexport declare class Cursor<T> extends Readable {\n\n    /**\n     * Cursor query sort setting.\n     */\n    sortValue: string;\n\n    /**\n     * Is Cursor able to time out.\n     */\n    timeout: boolean;\n\n    /**\n     * Get cursor ReadPreference.\n     */\n    readPreference: ReadPreference;\n\n    /**\n     * @param flag The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial'].\n     * @param value The flag boolean value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addCursorFlag\n     */\n    addCursorFlag(flag: string, value: boolean): Cursor<T>;\n\n    /**\n     * @param name The query modifier (must start with $, such as $orderby etc).\n     * @param value The flag boolean value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addQueryModifier\n     */\n    addQueryModifier(name: string, value: boolean): Cursor<T>;\n\n    /**\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#batchSize\n     */\n    batchSize(value: number): Cursor<T>;\n\n    /**\n     * Clone the cursor.\n     * still returns the same type.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#clone\n     */\n    clone(): Cursor<T>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * The result callback.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n     */\n    close(): Promise<CursorResult>;\n    close(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     * @param value The comment attached to this query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#comment\n     */\n    comment(value: string): Cursor<T>;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, callback: MongoCallback<number>): void;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, options?: CursorCommentOptions): Promise<number>;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, options: CursorCommentOptions, callback: MongoCallback<number>): void;\n\n    /**\n     * Execute the explain for the cursor.\n     * returns Promise if no callback passed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\n     */\n    explain(): Promise<CursorResult>;\n\n    /**\n     * Execute the explain for the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\n     */\n    explain(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Set the cursor query.\n     * @param filter The filter object used for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#filter\n     */\n    filter(filter: Object): Cursor<T>;\n\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     * @param iterator The iteration callback.\n     * @param callback The end callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#forEach\n     */\n    forEach(iterator: IteratorCallback<T>, callback: EndCallback): void;\n\n    /**\n     * Check if there is any document still available in the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\n     */\n    hasNext(): Promise<boolean>;\n\n    /**\n     * Check if there is any document still available in the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\n     */\n    hasNext(callback: MongoCallback<boolean>): void;\n\n    /**\n     * Set the cursor hint.\n     * @param hint If specified, then the query system will only consider plans using the hinted index.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hint\n     */\n    hint(hint: Object): Cursor<T>;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Set the limit for the cursor.\n     * @param value The limit for the cursor query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#limit\n     */\n    limit(value: number): Cursor<T>;\n\n    /**\n     * SMap all documents using the provided function.\n     * @param transform The mapping transformation method.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#map\n     */\n    map(transform: Function): Cursor<T>;\n\n    /**\n     * Set the cursor max.\n     * @param max Specify a $max value to specify the exclusive upper bound for a specific index in\n     * order to constrain the results of find(). The $max specifies the upper bound for\n     * all keys of a specific index in order.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#max\n     */\n    max(max: number): Cursor<T>;\n\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the\n     * timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise).\n     * @param value Number of milliseconds to wait before aborting the tailed query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxAwaitTimeMS\n     */\n    maxAwaitTimeMS(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor maxScan.\n     * @param maxScan Constrains the query to only scan the specified number of documents when fulfilling the query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxScan\n     */\n    maxScan(maxScan: Object): Cursor<T>;\n\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher).\n     * @param value Number of milliseconds to wait before aborting the query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor min.\n     * @param min Specify a $min value to specify the inclusive lower bound for a specific index in order to\n     * constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#min\n     */\n    min(min: number): Cursor<T>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    next(): Promise<CursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    next(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Sets a field projection for the query.\n     * @param value The field projection object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#project\n     */\n    project(value: Object): Cursor<T>;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Set the cursor returnKey.\n     * @param returnKey Only return the index field or fields for the results of the query. If $returnKey is set\n     * to true and the query does not use an index to perform the read operation,\n     * the returned documents will not contain any fields. Use one of the following forms:\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    returnKey(returnKey: Object): Cursor<T>;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#rewind\n     */\n    rewind(): void;\n\n    /**\n     * Set a node.js specific cursor option.\n     * @param field The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].\n     * @param value The field value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setCursorOption\n     */\n    setCursorOption(field: string, value: Object): Cursor<T>;\n\n    /**\n     * Set the ReadPreference for the cursor.\n     * @param readPreference The new read preference for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setReadPreference\n     */\n    setReadPreference(readPreference: string | ReadPreference): Cursor<T>;\n\n    /**\n     * Set the cursor showRecordId.\n     * @param showRecordId The $showDiskLoc option has now been deprecated and replaced with the\n     * showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#showRecordId\n     */\n    showRecordId(showRecordId: Object): Cursor<T>;\n\n    /**\n     * Set the skip for the cursor.\n     * @param value The skip for the cursor query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#skip\n     */\n    skip(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor snapshot.\n     * @param snapshot The $snapshot operator prevents the cursor from returning a document more than\n     * once because an intervening write operation results in a move of the document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#snapshot\n     */\n    snapshot(snapshot: Object): Cursor<T>;\n\n    /**\n     * Sets the sort order of the cursor query.\n     * @param keyOrList The key or keys set for the sort.\n     * @param direction The direction of the sorting (1 or -1).\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#sort\n     */\n    sort(keyOrList: string | Object[] | Object, direction?: number): Cursor<T>;\n\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @param options Optional settings.\n     * @param transform A transformation method applied to each document emitted by the stream.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#stream\n     */\n    stream(options?: { transform?: Function }): Cursor<T>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\n     * memory to store the results. Note that the array only contain partial results when this cursor had\n     * been previouly accessed. In that case, cursor.rewind() can be used to reset the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\n     */\n    toArray(): Promise<T[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\n     * memory to store the results. Note that the array only contain partial results when this cursor had\n     * been previouly accessed. In that case, cursor.rewind() can be used to reset the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\n     */\n    toArray(callback: MongoCallback<T[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some\n     * data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n}\n\n/**\n * Get the count of documents for this cursor.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n */\nexport interface CursorCommentOptions {\n\n    /**\n     * The number of documents to skip.\n     */\n    skip?: number;\n\n    /**\n     * The maximum amounts to count before aborting.\n     */\n    limit?: number;\n\n    /**\n     * Number of miliseconds to wait before aborting the query.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * An index name hint for the query.\n     */\n    hint?: string;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * The callback format for the forEach iterator method.\n * @param doc An emitted document for the iterator.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~iteratorCallback\n */\nexport interface IteratorCallback<T> {\n    (doc: T): void;\n}\n\n/**\n * The callback error format for the forEach iterator method.\n * @param error An error instance representing the error during the execution.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~endCallback\n */\nexport interface EndCallback {\n    (error: MongoError): void;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#~resultCallback\n */\nexport type AggregationCursorResult = any | void;\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly),\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html\n */\nexport interface AggregationCursor<T> extends Readable {\n\n    /**\n     * Set the batch size for the cursor.\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#batchSize\n     */\n    batchSize(value: number): AggregationCursor<T>;\n\n    /**\n     * Clone the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#clone\n     */\n    clone(): AggregationCursor<T>;\n\n    /**\n     * Close the cursor, sending a AggregationCursor command and emitting close.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\n     */\n    close(): Promise<AggregationCursorResult>;\n\n    /**\n     * Close the cursor, sending a AggregationCursor command and emitting close.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\n     */\n    close(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Iterates over all the documents for this cursor. As with {cursor.toArray}, not all of the elements will\n     * be iterated if this cursor had been previouly accessed. In that case, {cursor.rewind} can be used to reset\n     * the cursor. However, unlike {cursor.toArray}, the cursor will only hold a maximum of batch size elements\n     * at any given time if batch size is specified. Otherwise, the caller is responsible for making sure\n     * that the entire result can fit the memory.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#each\n     */\n    each(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Execute the explain for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\n     */\n    explain(): Promise<AggregationCursorResult>;\n\n    /**\n     * Execute the explain for the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\n     */\n    explain(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Add a geoNear stage to the aggregation pipeline.\n     * @param document The geoNear stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#geoNear\n     */\n    geoNear(document: Object): AggregationCursor<T>;\n\n    /**\n     * Add a group stage to the aggregation pipeline.\n     * @param document The group stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#group\n     */\n    group(document: Object): AggregationCursor<T>;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Add a limit stage to the aggregation pipeline.\n     * @param value The state limit value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#limit\n     */\n    limit(value: number): AggregationCursor<T>;\n\n    /**\n     * Add a match stage to the aggregation pipeline.\n     * @param document The match stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#match\n     */\n    match(document: Object): AggregationCursor<T>;\n\n    /**\n     * Add a maxTimeMS stage to the aggregation pipeline.\n     * @param value The state maxTimeMS value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): AggregationCursor<T>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\n     */\n    next(): Promise<AggregationCursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\n     */\n    next(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Add a out stage to the aggregation pipeline.\n     * @param destination The destination name.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#out\n     */\n    out(destination: string): AggregationCursor<T>;\n\n    /**\n     * Add a project stage to the aggregation pipeline.\n     * @param document The project stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#project\n     */\n    project(document: Object): AggregationCursor<T>;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Add a redact stage to the aggregation pipeline.\n     * @param document The redact stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#redact\n     */\n    redact(document: Object): AggregationCursor<T>;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#rewind\n     */\n    rewind(): AggregationCursor<T>;\n\n    /**\n     * Add a skip stage to the aggregation pipeline.\n     * @param value The state skip value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#setEncoding\n     */\n    skip(value: number): AggregationCursor<T>;\n\n    /**\n     * Add a sort stage to the aggregation pipeline.\n     * @param document The sort stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#sort\n     */\n    sort(document: Object): AggregationCursor<T>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contain partial\n     * results when this cursor had been previouly accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\n     */\n    toArray(): Promise<T[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contain partial\n     * results when this cursor had been previouly accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\n     */\n    toArray(callback: MongoCallback<T[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser,\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\n     * so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n\n    /**\n     * Add a unwind stage to the aggregation pipeline.\n     * @param field The unwind field name.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unwind\n     */\n    unwind(field: string): AggregationCursor<T>;\n}\n\n/**\n * CommandCursor.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html\n */\nexport interface CommandCursor extends Readable {\n\n    /**\n     * Set the batch size for the cursor.\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#batchSize\n     */\n    batchSize(value: number): CommandCursor;\n\n    /**\n     * Clone the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#clone\n     */\n    clone(): CommandCursor;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\n     */\n    close(): Promise<AggregationCursorResult>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\n     */\n    close(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Each\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#each\n     */\n    each(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Add a maxTimeMS stage to the aggregation pipeline.\n     * @param value The state maxTimeMS value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): CommandCursor;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\n     */\n    next(): Promise<AggregationCursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\n     */\n    next(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#rewind\n     */\n    rewind(): CommandCursor;\n\n    /**\n     * Set the ReadPreference for the cursor.\n     * @param readPreference The new read preference for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#setReadPreference\n     */\n    setReadPreference(readPreference: string | ReadPreference): CommandCursor;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\n     */\n    toArray(): Promise<any[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\n     */\n    toArray(callback: MongoCallback<any[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser,\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\n     * so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n}\n\n/**\n * GridFSBucket.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\n */\nexport declare class GridFSBucket {\n\n    /**\n     *\n     * @param db A db handle.\n     * @param options Optional settings.\n     */\n    constructor(db: Db, options?: GridFSBucketOptions);\n\n    /**\n     * Deletes a file with the given id.\n     * @param id The id of the file doc\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#delete\n     */\n    delete(id: ObjectID, callback?: GridFSBucketErrorCallback): void;\n\n    /**\n     * Removes this bucket's files collection, followed by its chunks collection.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#drop\n     */\n    drop(callback?: GridFSBucketErrorCallback): void;\n\n    /**\n     * Convenience wrapper around find on the files collection\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\n     */\n    find(filter?: Object, options?: GridFSBucketFindOptions): Cursor<any>;\n\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file.\n     * @param id The id of the file doc.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStream\n     */\n    openDownloadStream(id: ObjectID, options?: { start: number, end: number }): GridFSBucketReadStream;\n\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file\n     * @param filename The id of the file doc\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStreamByName\n     */\n\n    openDownloadStreamByName(filename: string, options?: { revision: number, start: number, end: number }): GridFSBucketReadStream;\n\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS.\n     * The stream's 'id' property contains the resulting file's id.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\n     */\n    openUploadStream(filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\n\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS for a custom file id.\n     * The stream's 'id' property contains the resulting file's id.\n     * @param id A custom id used to identify the file.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStreamWithId\n     */\n    openUploadStreamWithId(id: string | number | Object, filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\n\n    /**\n     * Renames the file with the given _id to the given string.\n     * @param id the id of the file to rename.\n     * @param filename new name for the file.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#rename\n     */\n    rename(id: ObjectID, filename: string, callback?: GridFSBucketErrorCallback): void;\n}\n\n/**\n * Constructor for a streaming GridFS interface.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\n */\nexport interface GridFSBucketOptions {\n\n    /**\n     * The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n     */\n    bucketName?: string;\n\n    /**\n     * Number of bytes stored in each chunk. Defaults to 255KB.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * Optional write concern to be passed to write operations, for instance { w: 1 }.\n     */\n    writeConcern?: Object;\n\n    /**\n     * Optional read preference to be passed to read operations.\n     */\n    ReadPreference?: Object;\n}\n\n/**\n * GridFSBucketErrorCallback.\n * @param err An error instance representing any errors that occurred.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#~errorCallback\n */\nexport interface GridFSBucketErrorCallback {\n    (err?: MongoError): void;\n}\n\n/**\n * GridFSBucketFindOptions.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\n */\nexport interface GridFSBucketFindOptions {\n\n    /**\n     * Optional batch size for cursor.\n     */\n    batchSize?: number;\n\n    /**\n     * Optional limit for cursor.\n     */\n    limit?: number;\n\n    /**\n     * Optional maxTimeMS for cursor.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * Optionally set cursor's noCursorTimeout flag.\n     */\n    noCursorTimeout?: boolean;\n\n    /**\n     * Optional skip for cursor.\n     */\n    skip?: number;\n\n    /**\n     * Optional sort for cursor.\n     */\n    sort?: Object;\n}\n\n/**\n * GridFSBucketOpenUploadStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\n */\nexport interface GridFSBucketOpenUploadStreamOptions {\n\n    /**\n     * Optional overwrite this bucket's chunkSizeBytes for this file.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * Optional object to store in the file document's metadata field.\n     */\n    metadata?: Object;\n\n    /**\n     * Optional string to store in the file document's contentType field.\n     */\n    contentType?: string;\n\n    /**\n     * Optional array of strings to store in the file document's aliases field.\n     */\n    aliases?: Array<string>;\n}\n\n/**\n * GridFSBucketReadStream.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\n */\nexport declare class GridFSBucketReadStream extends Readable {\n\n    /**\n     *\n     * @param chunks Handle for chunks collection.\n     * @param files Handle for files collection.\n     * @param readPreference The read preference to use.\n     * @param filter The query to use to find the file document.\n     * @param options Optional settings.\n     */\n    constructor(chunks: Collection, files: Collection, readPreference: Object, filter: Object, options?: GridFSBucketReadStreamOptions);\n}\n\n/**\n * GridFSBucketReadStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\n */\nexport interface GridFSBucketReadStreamOptions {\n\n    /**\n     * Optional sort for the file find query.\n     */\n    sort?: number;\n\n    /**\n     * Optional skip for the file find query.\n     */\n    skip?: number;\n\n    /**\n     * Optional 0-based offset in bytes to start streaming from.\n     */\n    start?: number;\n\n    /**\n     * Optional 0-based offset in bytes to stop streaming before.\n     */\n    end?: number;\n}\n\n/**\n * GridFSBucketWriteStream\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\n */\nexport declare class GridFSBucketWriteStream extends Writable {\n\n    /**\n     *\n     * @param bucket Handle for this stream's corresponding bucket.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings.\n     */\n    constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions);\n}\n\n/**\n * GridFSBucketWriteStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\n */\nexport interface GridFSBucketWriteStreamOptions {\n\n    /**\n     * Custom file id for the GridFS file.\n     */\n    id?: string | number | Object;\n\n    /**\n     * The chunk size to use, in bytes.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * The write concern.\n     */\n    w?: number;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * The journal write concern.\n     */\n    j?: number;\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {\n    AggregationCursor,\n    BulkWriteOpResultObject,\n    Code,\n    Collection,\n    CollectionAggregationOptions,\n    CollectionBluckWriteOptions,\n    CollectionInsertManyOptions,\n    CollectionInsertOneOptions,\n    CollectionOptions,\n    CollStats,\n    CommandCursor,\n    Cursor,\n    Db,\n    DeleteWriteOpResultObject,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    GeoHaystackSearchOptions,\n    GeoNearOptions,\n    InsertOneWriteOpResult,\n    InsertWriteOpResult,\n    MapReduceOptions,\n    MongoCountPreferences,\n    MongodbIndexOptions,\n    OrderedBulkOperation,\n    ParallelCollectionScanOptions,\n    ReadPreference,\n    ReplaceOneOptions,\n    UnorderedBulkOperation,\n    UpdateWriteOpResult\n} from \"./typings\";\nimport {Connection} from \"../../connection/Connection\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {ReadStream} from \"fs\";\n\n/**\n * Runs queries on a single MongoDB connection.\n */\nexport class MongoQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     * Always false for mongodb since mongodb has a single query executor instance.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is active in this query executor.\n     * Always false for mongodb since mongodb does not support transactions.\n     */\n    isTransactionActive = false;\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    databaseConnection: Db;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, databaseConnection: Db) {\n        this.connection = connection;\n        this.manager = connection.manager;\n        this.databaseConnection = databaseConnection;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    cursor(collectionName: string, query?: ObjectLiteral): Cursor<any> {\n        return this.getCollection(collectionName).find(query || {});\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate(collectionName: string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<any> {\n        return this.getCollection(collectionName).aggregate(pipeline, options);\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    async bulkWrite(collectionName: string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\n        return await this.getCollection(collectionName).bulkWrite(operations, options);\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    async count(collectionName: string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\n        return await this.getCollection(collectionName).count(query || {}, options);\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    async createCollectionIndex(collectionName: string, fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\n        return await this.getCollection(collectionName).createIndex(fieldOrSpec, options);\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    async createCollectionIndexes(collectionName: string, indexSpecs: ObjectLiteral[]): Promise<void> {\n        return await this.getCollection(collectionName).createIndexes(indexSpecs);\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    async deleteMany(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        return await this.getCollection(collectionName).deleteMany(query, options);\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    async deleteOne(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        return await this.getCollection(collectionName).deleteOne(query, options);\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    async distinct(collectionName: string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\n        return await this.getCollection(collectionName).distinct(key, query, options);\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    async dropCollectionIndex(collectionName: string, indexName: string, options?: CollectionOptions): Promise<any> {\n        return await this.getCollection(collectionName).dropIndex(indexName, options);\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    async dropCollectionIndexes(collectionName: string): Promise<any> {\n        return await this.getCollection(collectionName).dropIndexes();\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    async findOneAndDelete(collectionName: string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\n        return await this.getCollection(collectionName).findOneAndDelete(query, options);\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    async findOneAndReplace(collectionName: string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        return await this.getCollection(collectionName).findOneAndReplace(query, replacement, options);\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    async findOneAndUpdate(collectionName: string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        return await this.getCollection(collectionName).findOneAndUpdate(query, update, options);\n    }\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     */\n    async geoHaystackSearch(collectionName: string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\n        return await this.getCollection(collectionName).geoHaystackSearch(x, y, options);\n    }\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     */\n    async geoNear(collectionName: string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\n        return await this.getCollection(collectionName).geoNear(x, y, options);\n    }\n\n    /**\n     * Run a group command across a collection.\n     */\n    async group(collectionName: string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n        return await this.getCollection(collectionName).group(keys, condition, initial, reduce, finalize, command, options);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    async collectionIndexes(collectionName: string): Promise<any> {\n        return await this.getCollection(collectionName).indexes();\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    async collectionIndexExists(collectionName: string, indexes: string|string[]): Promise<boolean> {\n        return await this.getCollection(collectionName).indexExists(indexes);\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    async collectionIndexInformation(collectionName: string, options?: { full: boolean }): Promise<any> {\n        return await this.getCollection(collectionName).indexInformation(options);\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp(collectionName: string, options?: CollectionOptions): OrderedBulkOperation {\n        return this.getCollection(collectionName).initializeOrderedBulkOp(options);\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp(collectionName: string, options?: CollectionOptions): UnorderedBulkOperation {\n        return this.getCollection(collectionName).initializeUnorderedBulkOp(options);\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    async insertMany(collectionName: string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\n        return await this.getCollection(collectionName).insertMany(docs, options);\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    async insertOne(collectionName: string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\n        return await this.getCollection(collectionName).insertOne(doc, options);\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    async isCapped(collectionName: string): Promise<any> {\n        return await this.getCollection(collectionName).isCapped();\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes(collectionName: string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\n        return this.getCollection(collectionName).listIndexes(options);\n    }\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     */\n    async mapReduce(collectionName: string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\n        return await this.getCollection(collectionName).mapReduce(map, reduce, options);\n    }\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\n     * There are no ordering guarantees for returned results.\n     */\n    async parallelCollectionScan(collectionName: string, options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]> {\n        return await this.getCollection(collectionName).parallelCollectionScan(options);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    async reIndex(collectionName: string): Promise<any> {\n        return await this.getCollection(collectionName).reIndex();\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    async rename(collectionName: string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\n        return await this.getCollection(collectionName).rename(newName, options);\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    async replaceOne(collectionName: string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        return await this.getCollection(collectionName).replaceOne(query, doc, options);\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    async stats(collectionName: string, options?: { scale: number }): Promise<CollStats> {\n        return await this.getCollection(collectionName).stats(options);\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    async updateMany(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\n        return await this.getCollection(collectionName).updateMany(query, update, options);\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    async updateOne(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        return await this.getCollection(collectionName).updateOne(query, update, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods (from QueryRunner)\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes all collections from the currently connected database.\n     * Be careful with using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase(): Promise<void> {\n        await this.databaseConnection.dropDatabase();\n    }\n\n    /**\n     * For MongoDB database we don't create connection, because its single connection already created by a driver.\n     */\n    async connect(): Promise<any> {\n    }\n\n    /**\n     * For MongoDB database we don't release connection, because its single connection.\n     */\n    async release(): Promise<void> {\n        // releasing connection are not supported by mongodb driver, so simply don't do anything here\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        // transactions are not supported by mongodb driver, so simply don't do anything here\n    }\n\n    /**\n     * Commits transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        // transactions are not supported by mongodb driver, so simply don't do anything here\n    }\n\n    /**\n     * Rollbacks transaction.\n     */\n    async rollbackTransaction(): Promise<void> {\n        // transactions are not supported by mongodb driver, so simply don't do anything here\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new Error(`Executing SQL query is not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of inserted object id.\n     */\n    async insert(collectionName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        const results = await this.databaseConnection\n            .collection(collectionName)\n            .insertOne(keyValues);\n\n        return results.insertedId;\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(collectionName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        await this.databaseConnection\n            .collection(collectionName)\n            .updateOne(conditions, valuesMap);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(collectionName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        if (typeof conditions === \"string\")\n            throw new Error(`String condition is not supported by MongoDB driver.`);\n\n        await this.databaseConnection\n            .collection(collectionName)\n            .deleteOne(conditions);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(collectionName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(collectionName: string): Promise<TableSchema|undefined> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(collectionNames: string[]): Promise<TableSchema[]> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n        // так я от тебя не слышу что ты получаешь удовольствие. все что я слышу это как ты делаешь холодные расчеты для вы\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(collectionName: string): Promise<boolean> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Creates a new table from the given table schema and column schemas inside it.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(collectionName: string, columnName: string): Promise<boolean> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(collectionName: string, index: IndexSchema): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(collectionName: string, indexName: string): Promise<void> {\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Drops collection.\n     */\n    async truncate(collectionName: string): Promise<void> {\n        await this.databaseConnection\n            .dropCollection(collectionName);\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        throw new Error(`This operation is not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        throw new Error(`This operation is not supported by MongoDB driver.`);\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql():  (string|{ up: string, down: string })[] {\n        throw new Error(`This operation is not supported by MongoDB driver.`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets collection from the database with a given name.\n     */\n    protected getCollection(collectionName: string): Collection {\n        return this.databaseConnection.collection(collectionName);\n    }\n\n}","/**\n * Thrown if some required driver's option is not set.\n */\nexport class DriverOptionNotSetError extends Error {\n    name = \"DriverOptionNotSetError\";\n\n    constructor(optionName: string) {\n        super();\n        this.message = `Driver option (${optionName}) is not set. Please set it to perform connection to the database.`;\n    }\n\n}","/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\"|\"node\" = \"browser\";\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        return window;\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormilize(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n\n        return false;\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n\n}","/**\n * Table type. Tables can be abstract, closure, junction, embedded, etc.\n */\nexport type TableType = \"regular\"|\"abstract\"|\"junction\"|\"closure\"|\"closure-junction\"|\n    \"embeddable\"|\"single-table-child\"|\"class-table-child\";\n\n/**\n * Represents a class with constants - list of all possible table types.\n *\n * todo: remove if only regular table will left here\n */\nexport class TableTypes {\n\n    /**\n     * All non-specific tables are just regular tables. Its a default table type.\n     */\n    static REGULAR: TableType = \"regular\";\n\n    /**\n     * This type is for the tables that does not exist in the database,\n     * but provide columns and relations for the tables of the child classes who inherit them.\n     *\n     * @deprecated\n     */\n    static ABSTRACT: TableType = \"abstract\";\n\n    /**\n     * Junction table is a table automatically created by many-to-many relationship.\n     *\n     * todo: remove and isJunction condition is enough in entity metadata?\n     */\n    static JUNCTION: TableType = \"junction\";\n\n    /**\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\n     *\n     * todo: maybe we can determine if it is closure if it has some closure-specific decorator?\n     * todo: or if its not possible then maybe create a separate decorator for closure?\n     */\n    static CLOSURE: TableType = \"closure\";\n\n    /**\n     * This type is for tables that contain junction metadata of the closure tables.\n     *\n     * todo: remove and isClosureJunction condition is enough in entity metadata?\n     */\n    static CLOSURE_JUNCTION: TableType = \"closure-junction\";\n\n    /**\n     * Embeddable tables are not stored in the database as separate tables.\n     * Instead their columns are embed into tables who owns them.\n     *\n     * @deprecated\n     */\n    static EMBEDDABLE: TableType = \"embeddable\";\n\n    /**\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\n     *\n     * todo: create separate decorators?\n     */\n    static SINGLE_TABLE_CHILD: TableType = \"single-table-child\";\n\n    /**\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\n     *\n     * todo: create separate decorators?\n     */\n    static CLASS_TABLE_CHILD: TableType = \"class-table-child\";\n}","/**\n * Describes column options.\n */\nexport interface JoinColumnOptions {\n\n    /**\n     * Name of the column.\n     */\n    name?: string;\n\n    /**\n     * Name of the column in the entity to which this column is referenced.\n     */\n    referencedColumnName?: string; // TODO rename to referencedColumn\n\n}","import {JoinColumnOptions} from \"./JoinColumnOptions\";\n\n/**\n * Describes all relation's options.\n */\nexport interface JoinTableMultipleColumnsOptions {\n\n    /**\n     * Name of the table that will be created to store values of the both tables (join table).\n     * By default is auto generated.\n     */\n    name?: string;\n\n    /**\n     * First column of the join table.\n     */\n    joinColumns?: JoinColumnOptions[];\n\n    /**\n     * Second (inverse) column of the join table.\n     */\n    inverseJoinColumns?: JoinColumnOptions[];\n\n}","import {TableType} from \"../metadata/types/TableTypes\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {JoinColumnOptions} from \"../decorator/options/JoinColumnOptions\";\nimport {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {RelationType} from \"../metadata/types/RelationTypes\";\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMuplipleColumnsOptions\";\nimport {OnDeleteType} from \"../metadata/types/OnDeleteType\";\n\nexport interface EntitySchema {\n\n    /**\n     * Name of the schema it extends.\n     */\n    extends?: string;\n\n    /**\n     * Target bind to this entity schema. Optional.\n     */\n    target?: Function;\n\n    /**\n     * Entity name.\n     */\n    name: string;\n\n    /**\n     * Entity table's options.\n     */\n    table?: {\n\n        /**\n         * Table name.\n         */\n        name?: string;\n\n        /**\n         * Table type.\n         */\n        type?: TableType;\n\n        /**\n         * Specifies a property name by which queries will perform ordering by default when fetching rows.\n         */\n        orderBy?: OrderByCondition;\n\n    };\n\n    /**\n     * Entity column's options.\n     */\n    columns: {\n        [columnName: string]: {\n\n            /**\n             * Indicates if this column is a primary column.\n             */\n            primary: boolean;\n\n            /**\n             * Indicates if this column is a created date column.\n             */\n            createDate: boolean;\n\n            /**\n             * Indicates if this column is an update date column.\n             */\n            updateDate: boolean;\n\n            /**\n             * Indicates if this column is a version column.\n             */\n            version: boolean;\n\n            /**\n             * Indicates if this column is a treeChildrenCount column.\n             */\n            treeChildrenCount: boolean;\n\n            /**\n             * Indicates if this column is a treeLevel column.\n             */\n            treeLevel: boolean;\n\n            /**\n             * Column type. Must be one of the value from the ColumnTypes class.\n             */\n            type: ColumnType;\n\n            /**\n             * Column name in the database.\n             */\n            name?: string;\n\n            /**\n             * Column type's length. For example type = \"string\" and length = 100 means that ORM will create a column with\n             * type varchar(100).\n             */\n            length?: string;\n\n            /**\n             * Specifies if this column will use AUTO_INCREMENT or not (e.g. generated number).\n             */\n            generated?: boolean;\n\n            /**\n             * Specifies if column's value must be unique or not.\n             */\n            unique?: boolean;\n\n            /**\n             * Indicates if column's value can be set to NULL.\n             */\n            nullable?: boolean;\n\n            /**\n             * Extra column definition. Should be used only in emergency situations. Note that if you'll use this property\n             * auto schema generation will not work properly anymore. Avoid using it.\n             */\n            columnDefinition?: string;\n\n            /**\n             * Column comment.\n             */\n            comment?: string;\n\n            /**\n             * Default database value.\n             */\n            default?: string;\n\n            /**\n             * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n             * number of digits that are stored for the values.\n             */\n            precision?: number;\n\n            /**\n             * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n             * of digits to the right of the decimal point and must not be greater than precision.\n             */\n            scale?: number;\n\n            /**\n             * Column collation. Note that not all databases support it.\n             */\n            collation?: string; // todo: looks like this is not used\n\n        };\n    };\n\n    /**\n     * Entity relation's options.\n     */\n    relations: {\n        [relationName: string]: {\n\n            /**\n             * Indicates with which entity this relation is made.\n             */\n            target: Function|string;\n\n            /**\n             * Type of relation. Can be one of the value of the RelationTypes class.\n             */\n            type: RelationType;\n\n            /**\n             * Inverse side of the relation.\n             */\n            inverseSide?: string;\n\n            /**\n             * Indicates if this relation will be lazily loaded.\n             */\n            isLazy?: boolean;\n\n            /**\n             * Join table options of this column. If set to true then it simply means that it has a join table.\n             */\n            joinTable?: boolean|JoinColumnOptions|JoinTableMultipleColumnsOptions;\n\n            /**\n             * Join column options of this column. If set to true then it simply means that it has a join column.\n             */\n            joinColumn?: boolean|{\n\n                /**\n                 * Name of the column.\n                 */\n                name?: string;\n\n                /**\n                 * Name of the column in the entity to which this column is referenced.\n                 */\n                referencedColumnName?: string;\n            };\n\n            /**\n             * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n             */\n            isTreeParent?: boolean;\n\n            /**\n             * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n             */\n            isTreeChildren?: boolean;\n\n            /**\n             * If set to true then it means that related object can be allowed to be inserted / updated / removed to the db.\n             * This is option a shortcut if you would like to set cascadeInsert, cascadeUpdate and cascadeRemove to true.\n             */\n            cascadeAll?: boolean;\n\n            /**\n             * If set to true then it means that related object can be allowed to be inserted to the db.\n             */\n            cascadeInsert?: boolean;\n\n            /**\n             * If set to true then it means that related object can be allowed to be updated in the db.\n             */\n            cascadeUpdate?: boolean;\n\n            /**\n             * If set to true then it means that related object can be allowed to be remove from the db.\n             */\n            cascadeRemove?: boolean;\n\n            /**\n             * Default database value.\n             */\n            default?: any;\n\n            /**\n             * Indicates if relation column value can be nullable or not.\n             */\n            nullable?: boolean;\n\n            /**\n             * Database cascade action on delete.\n             */\n            onDelete?: OnDeleteType;\n\n        };\n    };\n\n}","import {QueryRunner} from \"../query-runner/QueryRunner\";\n/**\n * Logging options.\n */\nexport interface LoggerOptions {\n\n    /**\n     * Some specific logger to be used. By default it is a console.\n     */\n    readonly logger?: (level: string, message: any, queryRunner?: QueryRunner) => void;\n\n    /**\n     * Set to true if you want to log every executed query.\n     */\n    readonly logQueries?: boolean;\n\n    /**\n     * Set to true if you want to log only failed query.\n     */\n    readonly logOnlyFailedQueries?: boolean;\n\n    /**\n     * Set to true if you want to log error of the failed query.\n     */\n    readonly logFailedQueryError?: boolean;\n\n    /**\n     * If set to true then schema creation logs will be logged.\n     */\n    readonly logSchemaCreation?: boolean;\n\n}","import {DriverOptions} from \"../driver/DriverOptions\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {LoggerOptions} from \"../logger/LoggerOptions\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {DatabaseType} from \"../driver/types/DatabaseType\";\n\n/**\n * BaseConnectionOptions is set of connection options shared by all database types.\n */\nexport interface BaseConnectionOptions {\n\n    /**\n     * Database type. This value is required.\n     *\n     * \"?\" is temporary.\n     */\n    readonly type?: DatabaseType;\n\n    /**\n     * Connection name. If connection name is not given then it will be called \"default\".\n     * Different connections must have different names.\n     */\n    readonly name?: string;\n\n    /**\n     * Database options of this connection.\n     *\n     * @deprecated Define options right in the connection options section.\n     */\n    readonly driver?: DriverOptions;\n\n    /**\n     * Extra connection options to be passed to the underlying driver.\n     *\n     * todo: deprecate this and move all database-specific types into hts own connection options object.\n     */\n    readonly extra?: any;\n\n    /**\n     * Prefix to use on all tables (collections) of this connection in the database.\n     *\n     * todo: rename to entityPrefix\n     */\n    readonly tablesPrefix?: string;\n\n    /**\n     * Naming strategy to be used to name tables and columns in the database.\n     */\n    readonly namingStrategy?: NamingStrategyInterface;\n\n    /**\n     * Entities to be loaded for this connection.\n     * Accepts both entity classes and directories where from entities need to be loaded.\n     * Directories support glob patterns.\n     */\n    readonly entities?: Function[]|string[];\n\n    /**\n     * Subscribers to be loaded for this connection.\n     * Accepts both subscriber classes and directories where from subscribers need to be loaded.\n     * Directories support glob patterns.\n     */\n    readonly subscribers?: Function[]|string[];\n\n    /**\n     * Entity schemas to be loaded for this connection.\n     * Accepts both entity schema classes and directories where from entity schemas need to be loaded.\n     * Directories support glob patterns.\n     */\n    readonly entitySchemas?: EntitySchema[]|string[];\n\n    /**\n     * Migrations to be loaded for this connection.\n     * Accepts both migration classes and directories where from migrations need to be loaded.\n     * Directories support glob patterns.\n     */\n    readonly migrations?: Function[]|string[];\n\n    /**\n     * Logging options.\n     */\n    readonly logging?: LoggerOptions;\n\n    /**\n     * Drops the schema each time connection is being established.\n     * Be careful with this option and don't use this in production - otherwise you'll loose all production data.\n     * This option is useful during debug and development.\n     */\n    readonly dropSchemaOnConnection?: boolean;\n\n    /**\n     * Indicates if database schema should be auto created on every application launch.\n     * Be careful with this option and don't use this in production - otherwise you can loose production data.\n     * This option is useful during debug and development.\n     * Alternative to it, you can use CLI and run schema:sync command.\n     *\n     * Note that for MongoDB database it does not create schema, because MongoDB is schemaless.\n     * Instead, it syncs just by creating indices.\n     *\n     * todo: rename it simply to synchronize: boolean ?\n     */\n    readonly autoSchemaSync?: boolean;\n\n    /**\n     * Indicates if migrations should be auto run on every application launch.\n     * Alternative to it, you can use CLI and run migration:create command.\n     *\n     * todo: rename it simply to runMigrations: boolean ?\n     */\n    readonly autoMigrationsRun?: boolean;\n\n    /**\n     * Environment in which connection will run.\n     * Current environment is determined from the environment NODE_ENV variable's value.\n     * For example, if NODE_ENV is \"test\" and this property is set to \"test\",\n     * then this connection will be created. On any other NODE_ENV value it will be skipped.\n     * This option is specific to the configuration in the ormconfig.json file.\n     */\n    readonly environment?: string;\n\n    /**\n     * CLI settings.\n     */\n    readonly cli?: {\n\n        /**\n         * Directory where entities should be created by default.\n         */\n        readonly entitiesDir?: string;\n\n        /**\n         * Directory where migrations should be created by default.\n         */\n        readonly migrationsDir?: string;\n\n        /**\n         * Directory where subscribers should be created by default.\n         */\n        readonly subscribersDir?: string;\n\n    };\n\n}","import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\n\n/**\n * MongoDB specific connection options.\n */\nexport interface MongoConnectionOptions extends BaseConnectionOptions {\n\n    /**\n     * Database type.\n     */\n    readonly type: \"mongodb\";\n\n    /**\n     * Connection url where perform connection to.\n     */\n    readonly url?: string;\n\n    /**\n     * Database host.\n     */\n    readonly host?: string;\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number;\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string;\n\n}","import {ColumnType} from \"./ColumnTypes\";\n\n/**\n * Orm has special columns and we need to know what database column types should be for those types.\n * Column types are driver dependant.\n */\nexport interface MappedColumnTypes {\n\n    /**\n     * Column type for the create date column.\n     */\n    createDate: ColumnType;\n\n    /**\n     * Default value should be used by a database for \"created date\" column.\n     */\n    createDateDefault: string;\n\n    /**\n     * Column type for the update date column.\n     */\n    updateDate: ColumnType;\n\n    /**\n     * Default value should be used by a database for \"updated date\" column.\n     */\n    updateDateDefault: string;\n\n    /**\n     * Column type for the version column.\n     */\n    version: ColumnType;\n\n    /**\n     * Column type for the tree level column.\n     */\n    treeLevel: ColumnType;\n\n    /**\n     * Column type of timestamp column used for migrations table.\n     */\n    migrationTimestamp: ColumnType;\n\n    /**\n     * Column type for migration name column used for migrations table.\n     */\n    migrationName: ColumnType;\n\n}","/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n */\nexport interface SchemaBuilder {\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    build(): Promise<void>;\n\n    /**\n     * Returns queries to be executed by schema builder.\n     */\n    log(): Promise<(string|{ up: string, down: string })[]>;\n\n}","import {Connection} from \"../connection/Connection\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class MongoSchemaBuilder implements SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        const queryRunner = (this.connection.driver as MongoDriver).createQueryRunner();\n        const promises: Promise<any>[] = [];\n        this.connection.entityMetadatas.forEach(metadata => {\n            metadata.indices.forEach(index => {\n                const options = { name: index.name };\n                promises.push(queryRunner.createCollectionIndex(metadata.tableName, index.columnNamesWithOrderingMap, options));\n            });\n        });\n        await Promise.all(promises);\n    }\n\n    /**\n     * Returns query to be executed by schema builder.\n     */\n    log(): Promise<(string|{ up: string, down: string })[]> {\n        return Promise.resolve([]);\n    }\n\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {MongoQueryRunner} from \"./MongoQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {MongoConnectionOptions} from \"./MongoConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {MongoSchemaBuilder} from \"../../schema-builder/MongoSchemaBuilder\";\n\n/**\n * Organizes communication with MongoDB.\n */\nexport class MongoDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Mongodb does not require to dynamically create query runner each time,\n     * because it does not have a regular connection pool as RDBMS systems have.\n     */\n    queryRunner?: MongoQueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Mongodb does not need to have column types because they are not used in schema sync.\n     */\n    supportedDataTypes: ColumnType[] = [];\n\n    /**\n     * Mongodb does not need to have a strong defined mapped column types because they are not used in schema sync.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"int\",\n        createDateDefault: \"\",\n        updateDate: \"int\",\n        updateDateDefault: \"\",\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationName: \"int\",\n        migrationTimestamp: \"int\",\n    };\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    protected options: MongoConnectionOptions;\n\n    /**\n     * Underlying mongodb library.\n     */\n    protected mongodb: any;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n        this.options = connection.options as MongoConnectionOptions;\n\n        // validate options to make sure everything is correct and driver will be able to establish connection\n        this.validateOptions(connection.options);\n\n        // load mongodb package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    connect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.mongodb.MongoClient.connect(this.buildConnectionUrl(), this.options.extra, (err: any, dbConnection: any) => {\n                if (err) return fail(err);\n\n                this.queryRunner = new MongoQueryRunner(this.connection, dbConnection);\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            if (!this.queryRunner)\n                return fail(new ConnectionIsNotSetError(\"mongodb\"));\n\n            const handler = (err: any) => err ? fail(err) : ok();\n            this.queryRunner.databaseConnection.close(handler);\n            this.queryRunner = undefined;\n        });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new MongoSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        return this.queryRunner!;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        throw new Error(`This operation is not supported by Mongodb driver.`);\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return columnName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number, array?: string|boolean }): string {\n        throw new Error(`MongoDB is schema-less, not supported by this driver.`);\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        throw new Error(`MongoDB is schema-less, not supported by this driver.`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validate driver options to make sure everything is correct and driver will be able to establish connection.\n     */\n    protected validateOptions(options: DriverOptions) {\n        if (!options.url) {\n            if (!options.database)\n                throw new DriverOptionNotSetError(\"database\");\n        }\n    }\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): any {\n        try {\n            this.mongodb = PlatformTools.load(\"mongodb\");  // try to load native driver dynamically\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"MongoDB\", \"mongodb\");\n        }\n    }\n\n    /**\n     * Builds connection url that is passed to underlying driver to perform connection to the mongodb database.\n     */\n    protected buildConnectionUrl(): string {\n        if (this.options.url)\n            return this.options.url;\n\n        return `mongodb://${this.options.host || \"127.0.0.1\"}:${this.options.port || \"27017\"}/${this.options.database}`;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EmbeddedMetadata} from \"../../metadata/EmbeddedMetadata\";\n\n/**\n * Transforms raw document into entity object.\n * Entity is constructed based on its entity metadata.\n */\nexport class DocumentToEntityTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(// private selectionMap: AliasMap,\n                // private joinMappings: JoinMapping[],\n                // private relationCountMetas: RelationCountAttribute[],\n                private enableRelationIdValues: boolean = false\n    ) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transformAll(documents: ObjectLiteral[], metadata: EntityMetadata) {\n        return documents.map(document => this.transform(document, metadata));\n    }\n\n    transform(document: any, metadata: EntityMetadata) {\n        const entity: any = metadata.create();\n        let hasData = false;\n\n        // handle _id property the special way\n        if (metadata.objectIdColumn && document[metadata.objectIdColumn.databaseNameWithoutPrefixes]) {\n            // todo: we can't use driver in this class\n            // do we really need prepare hydrated value here? If no then no problem. If yes then think maybe prepareHydratedValue process should be extracted out of driver class?\n            // entity[metadata.objectIdColumn.propertyName] = this.driver.prepareHydratedValue(document[metadata.objectIdColumn.name\"], metadata.objectIdColumn);\n            entity[metadata.objectIdColumn.propertyName] = document[metadata.objectIdColumn.databaseNameWithoutPrefixes];\n            hasData = true;\n        }\n\n        // add special columns that contains relation ids\n        if (this.enableRelationIdValues) {\n            metadata.columns.filter(column => !!column.relationMetadata).forEach(column => {\n                const valueInObject = document[column.databaseNameWithoutPrefixes];\n                if (valueInObject !== undefined && valueInObject !== null && column.propertyName) {\n                    // todo: we can't use driver in this class\n                    // const value = this.driver.prepareHydratedValue(valueInObject, column);\n                    entity[column.propertyName] = valueInObject;\n                    hasData = true;\n                }\n            });\n        }\n\n        /*this.joinMappings\n            .filter(joinMapping => joinMapping.parentName === alias.name && !joinMapping.alias.relationOwnerSelection && joinMapping.alias.target)\n            .map(joinMapping => {\n                const relatedEntities = this.transformRawResultsGroup(rawSqlResults, joinMapping.alias);\n                const isResultArray = joinMapping.isMany;\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\n\n                if (result && (!isResultArray || result.length > 0)) {\n                    entity[joinMapping.propertyName] = result;\n                    hasData = true;\n                }\n            });*/\n\n        // get value from columns selections and put them into object\n        metadata.ownColumns.forEach(column => {\n            const valueInObject = document[column.databaseNameWithoutPrefixes];\n            if (valueInObject !== undefined &&\n                valueInObject !== null &&\n                column.propertyName &&\n                !column.isVirtual &&\n                !column.isParentId &&\n                !column.isDiscriminator) {\n                // const value = this.driver.prepareHydratedValue(valueInObject, column);\n\n                entity[column.propertyName] = valueInObject;\n                hasData = true;\n            }\n        });\n\n        const addEmbeddedValuesRecursively = (entity: any, document: any, embeddeds: EmbeddedMetadata[]) => {\n            embeddeds.forEach(embedded => {\n                if (!document[embedded.prefix])\n                    return;\n\n                if (embedded.isArray) {\n                    entity[embedded.propertyName] = (document[embedded.prefix] as any[]).map(subValue => {\n                        const newItem = embedded.create();\n                        embedded.columns.forEach(column => {\n                            newItem[column.propertyName] = subValue[column.databaseNameWithoutPrefixes];\n                        });\n                        return newItem;\n                    });\n\n                } else {\n                    embedded.columns.forEach(column => {\n                        const value = document[embedded.prefix][column.databaseNameWithoutPrefixes];\n                        if (!value) return;\n\n                        if (!entity[embedded.propertyName])\n                            entity[embedded.propertyName] = embedded.create();\n\n                        entity[embedded.propertyName][column.propertyName] = value;\n                    });\n                }\n                addEmbeddedValuesRecursively(entity[embedded.propertyName], document[embedded.prefix], embedded.embeddeds);\n            });\n        };\n\n        addEmbeddedValuesRecursively(entity, document, metadata.embeddeds);\n\n        // if relation is loaded then go into it recursively and transform its values too\n        /*metadata.relations.forEach(relation => {\n            const relationAlias = this.selectionMap.findSelectionByParent(alias.name, relation.propertyName);\n            if (relationAlias) {\n                const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"join\" && joinMapping.alias === relationAlias);\n                const relatedEntities = this.transformRawResultsGroup(rawSqlResults, relationAlias);\n                const isResultArray = relation.isManyToMany || relation.isOneToMany;\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\n\n                if (result) {\n                    let propertyName = relation.propertyName;\n                    if (joinMapping) {\n                        propertyName = joinMapping.propertyName;\n                    }\n\n                    if (relation.isLazy) {\n                        entity[\"__\" + propertyName + \"__\"] = result;\n                    } else {\n                        entity[propertyName] = result;\n                    }\n\n                    if (!isResultArray || result.length > 0)\n                        hasData = true;\n                }\n            }\n\n            // if relation has id field then relation id/ids to that field.\n            if (relation.isManyToMany) {\n                if (relationAlias) {\n                    const ids: any[] = [];\n                    const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"relationId\" && joinMapping.alias === relationAlias);\n\n                    if (relation.idField || joinMapping) {\n                        const propertyName = joinMapping ? joinMapping.propertyName : relation.idField as string;\n                        const junctionMetadata = relation.junctionEntityMetadata;\n                        const columnName = relation.isOwning ? junctionMetadata.columns[1].name : junctionMetadata.columns[0].name;\n\n                        rawSqlResults.forEach(results => {\n                            if (relationAlias) {\n                                const resultsKey = relationAlias.name + \"_\" + columnName;\n                                const value = this.driver.prepareHydratedValue(results[resultsKey], relation.referencedColumn);\n                                if (value !== undefined && value !== null)\n                                    ids.push(value);\n                            }\n                        });\n\n                        if (ids && ids.length)\n                            entity[propertyName] = ids;\n                    }\n                }\n            } else if (relation.idField) {\n                const relationName = relation.name;\n                entity[relation.idField] = this.driver.prepareHydratedValue(rawSqlResults[0][alias.name + \"_\" + relationName], relation.referencedColumn);\n            }\n\n            // if relation counter\n            this.relationCountMetas.forEach(joinMeta => {\n                if (joinMeta.alias === relationAlias) {\n                    // console.log(\"relation count was found for relation: \", relation);\n                    // joinMeta.entity = entity;\n                    joinMeta.entities.push({ entity: entity, metadata: metadata });\n                    // console.log(joinMeta);\n                    // console.log(\"---------------------\");\n                }\n            });\n        });*/\n\n        return hasData ? entity : null;\n    }\n\n}","import {FindManyOptions} from \"./FindManyOptions\";\nimport {FindOneOptions} from \"./FindOneOptions\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOneOptions(object: any): object is FindOneOptions<any> {\n        const possibleOptions: FindOneOptions<any> = object;\n        return possibleOptions &&\n                (\n                    possibleOptions.where instanceof Object ||\n                    possibleOptions.join instanceof Object ||\n                    possibleOptions.order instanceof Object\n                );\n    }\n\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    static isFindManyOptions(object: any): object is FindManyOptions<any> {\n        const possibleOptions: FindManyOptions<any> = object;\n        return possibleOptions &&\n                (\n                    possibleOptions.where instanceof Object ||\n                    possibleOptions.join instanceof Object ||\n                    possibleOptions.order instanceof Object ||\n                    typeof possibleOptions.skip === \"number\" ||\n                    typeof possibleOptions.take === \"number\"\n                );\n    }\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindOneOptionsAlias(object: any): string|undefined {\n        if (this.isFindOneOptions(object) && object.join)\n            return object.join.alias;\n\n        return undefined;\n    }\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindManyOptionsAlias(object: any): string|undefined {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias;\n\n        return undefined;\n    }\n\n    /**\n     * Applies give find one options to the given query builder.\n     */\n    static applyFindOneOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindOneOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return this.applyConditions(qb, options);\n\n        return qb;\n    }\n\n    /**\n     * Applies give find many options to the given query builder.\n     */\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return this.applyConditions(qb, options);\n\n        return qb;\n    }\n\n    /**\n     * Applies give find options to the given query builder.\n     */\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\n\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || !this.isFindOneOptions(options))\n            return qb;\n\n        // apply all options from FindOptions\n        if (options.where)\n            this.applyConditions(qb, options.where);\n\n        if ((options as FindManyOptions<T>).skip)\n            qb.skip((options as FindManyOptions<T>).skip!);\n\n        if ((options as FindManyOptions<T>).take)\n            qb.take((options as FindManyOptions<T>).take!);\n\n        if (options.order)\n            Object.keys(options.order).forEach(key => {\n                qb.addOrderBy(qb.alias + \".\" + key, (options as FindOneOptions<T>).order![key as any]);\n            });\n\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(key => {\n                    qb.leftJoin(options.join!.leftJoin![key], key);\n                });\n\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(key => {\n                    qb.innerJoin(options.join!.innerJoin![key], key);\n                });\n\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\n                });\n\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\n                });\n        }\n\n        return qb;\n    }\n\n    /**\n     * Applies given simple conditions set to a given query builder.\n     */\n    static applyConditions<T>(qb: SelectQueryBuilder<T>, conditions: ObjectLiteral): SelectQueryBuilder<T> {\n        Object.keys(conditions).forEach((key, index) => {\n            if (conditions![key] === null) {\n                qb.andWhere(`${qb.alias}.${key} IS NULL`);\n\n            } else {\n                const parameterName = \"where_\" + index;\n                qb.andWhere(`${qb.alias}.${key}=:${parameterName}`)\n                    .setParameter(parameterName, conditions![key]);\n            }\n        });\n\n        return qb;\n    }\n\n}","import {Connection} from \"../connection/Connection\";\nimport {EntityManager} from \"./EntityManager\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {\n    AggregationCursor,\n    BulkWriteOpResultObject,\n    Code,\n    Collection,\n    CollectionAggregationOptions,\n    CollectionBluckWriteOptions,\n    CollectionInsertManyOptions,\n    CollectionInsertOneOptions,\n    CollectionOptions,\n    CollStats,\n    CommandCursor,\n    Cursor,\n    CursorResult,\n    DeleteWriteOpResultObject,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    GeoHaystackSearchOptions,\n    GeoNearOptions,\n    InsertOneWriteOpResult,\n    InsertWriteOpResult,\n    MapReduceOptions,\n    MongoCallback,\n    MongoCountPreferences,\n    MongodbIndexOptions,\n    MongoError,\n    OrderedBulkOperation,\n    ParallelCollectionScanOptions,\n    ReadPreference,\n    ReplaceOneOptions,\n    UnorderedBulkOperation,\n    UpdateWriteOpResult\n} from \"../driver/mongodb/typings\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {DocumentToEntityTransformer} from \"../query-builder/transformer/DocumentToEntityTransformer\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport class MongoEntityManager extends EntityManager {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(entityClassOrName: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.skip)\n                cursor.skip(optionsOrConditions.skip);\n            if (optionsOrConditions.take)\n                cursor.limit(optionsOrConditions.take);\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n        return cursor.toArray();\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(entityClassOrName: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[ Entity[], number ]> {\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.skip)\n                cursor.skip(optionsOrConditions.skip);\n            if (optionsOrConditions.take)\n                cursor.limit(optionsOrConditions.take);\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n        const [results, count] = await Promise.all<any>([\n            cursor.toArray(),\n            this.count(entityClassOrName, query),\n        ]);\n        return [results, parseInt(count)];\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    async findByIds<Entity>(entityClassOrName: ObjectType<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\n        const objectIdInstance = require(\"mongodb\").ObjectID;\n        query[\"_id\"] = { $in: ids.map(id => {\n            if (id instanceof objectIdInstance)\n                return id;\n\n            return id[metadata.objectIdColumn!.propertyName];\n        }) };\n\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.skip)\n                cursor.skip(optionsOrConditions.skip);\n            if (optionsOrConditions.take)\n                cursor.limit(optionsOrConditions.take);\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n        return await cursor.toArray();\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne<Entity>(entityClassOrName: ObjectType<Entity>|string, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions);\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray();\n        return result.length > 0 ? result[0] : undefined;\n    }\n\n    /**\n     * Finds entity by given id.\n     * Optionally find options or conditions can be applied.\n     */\n    async findOneById<Entity>(entityClassOrName: ObjectType<Entity>|string, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\n        query[\"_id\"] = id;\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray();\n        return result.length > 0 ? result[0] : undefined;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.cursor(metadata.tableName, query);\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\n\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        const cursor = this.createCursor(entityClassOrName, query);\n        const ParentCursor = require(\"mongodb\").Cursor;\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\n            if (callback) {\n                ParentCursor.prototype.toArray.call(this, (error: MongoError, results: Entity[]): void => {\n                    if (error) {\n                        callback(error, results);\n                        return;\n                    }\n\n                    const transformer = new DocumentToEntityTransformer();\n                    return callback(error, transformer.transformAll(results, metadata));\n                });\n            } else {\n                return ParentCursor.prototype.toArray.call(this).then((results: Entity[]) => {\n                    const transformer = new DocumentToEntityTransformer();\n                    return transformer.transformAll(results, metadata);\n                });\n            }\n        };\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\n            if (callback) {\n                ParentCursor.prototype.next.call(this, (error: MongoError, result: CursorResult): void => {\n                    if (error || !result) {\n                        callback(error, result);\n                        return;\n                    }\n\n                    const transformer = new DocumentToEntityTransformer();\n                    return callback(error, transformer.transform(result, metadata));\n                });\n            } else {\n                return ParentCursor.prototype.next.call(this).then((result: Entity) => {\n                    if (!result) return result;\n                    const transformer = new DocumentToEntityTransformer();\n                    return transformer.transform(result, metadata);\n                });\n            }\n        };\n        return cursor;\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<Entity>(entityClassOrName: ObjectType<Entity>|string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.aggregate(metadata.tableName, pipeline, options);\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite<Entity>(entityClassOrName: ObjectType<Entity>|string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.bulkWrite(metadata.tableName, operations, options);\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.count(metadata.tableName, query, options);\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.createCollectionIndex(metadata.tableName, fieldOrSpec, options);\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, indexSpecs: ObjectLiteral[]): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.createCollectionIndexes(metadata.tableName, indexSpecs);\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.deleteMany(metadata.tableName, query, options);\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.deleteOne(metadata.tableName, query, options);\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct<Entity>(entityClassOrName: ObjectType<Entity>|string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.distinct(metadata.tableName, key, query, options);\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, indexName: string, options?: CollectionOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.dropCollectionIndex(metadata.tableName, indexName, options);\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.dropCollectionIndexes(metadata.tableName);\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     */\n    geoHaystackSearch<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.geoHaystackSearch(metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     */\n    geoNear<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.geoNear(metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Run a group command across a collection.\n     */\n    group<Entity>(entityClassOrName: ObjectType<Entity>|string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.group(metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.collectionIndexes(metadata.tableName);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists<Entity>(entityClassOrName: ObjectType<Entity>|string, indexes: string|string[]): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.collectionIndexExists(metadata.tableName, indexes);\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { full: boolean }): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.collectionIndexInformation(metadata.tableName, options);\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): OrderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.initializeOrderedBulkOp(metadata.tableName, options);\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): UnorderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.initializeUnorderedBulkOp(metadata.tableName, options);\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany<Entity>(entityClassOrName: ObjectType<Entity>|string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.insertMany(metadata.tableName, docs, options);\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne<Entity>(entityClassOrName: ObjectType<Entity>|string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.insertOne(metadata.tableName, doc, options);\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.isCapped(metadata.tableName);\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.listCollectionIndexes(metadata.tableName, options);\n    }\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     */\n    mapReduce<Entity>(entityClassOrName: ObjectType<Entity>|string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.mapReduce(metadata.tableName, map, reduce, options);\n    }\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\n     * There are no ordering guarantees for returned results.\n     */\n    parallelCollectionScan<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.parallelCollectionScan(metadata.tableName, options);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    reIndex<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.reIndex(metadata.tableName);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename<Entity>(entityClassOrName: ObjectType<Entity>|string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.rename(metadata.tableName, newName, options);\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { scale: number }): Promise<CollStats> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.stats(metadata.tableName, options);\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.updateMany(metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.updateOne(metadata.tableName, query, update, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected get queryRunner(): MongoQueryRunner {\n        return (this.connection.driver as MongoDriver).queryRunner!;\n    }\n\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\n        if (!optionsOrConditions)\n            return undefined;\n\n        return FindOptionsUtils.isFindManyOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\n    }\n\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\n        if (!optionsOrConditions)\n            return undefined;\n\n        return FindOptionsUtils.isFindOneOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\n    }\n\n    protected convertFindOptionsOrderToOrderCriteria<Entity, P>(order: { [P in keyof Entity]?: \"ASC\"|\"DESC\" }) {\n        const orderCriteria: ObjectLiteral = {};\n        Object.keys(order).forEach(key => orderCriteria[key] = [key, order[key]!.toLowerCase()]);\n        return orderCriteria;\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Repository} from \"./Repository\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {\n    AggregationCursor,\n    BulkWriteOpResultObject,\n    Code,\n    Collection,\n    CollectionAggregationOptions,\n    CollectionBluckWriteOptions,\n    CollectionInsertManyOptions,\n    CollectionInsertOneOptions,\n    CollectionOptions,\n    CollStats,\n    CommandCursor,\n    Cursor,\n    DeleteWriteOpResultObject,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    GeoHaystackSearchOptions,\n    GeoNearOptions,\n    InsertOneWriteOpResult,\n    InsertWriteOpResult,\n    MapReduceOptions,\n    MongoCountPreferences,\n    MongodbIndexOptions,\n    OrderedBulkOperation,\n    ParallelCollectionScanOptions,\n    ReadPreference,\n    ReplaceOneOptions,\n    UnorderedBulkOperation,\n    UpdateWriteOpResult\n} from \"../driver/mongodb/typings\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Repository used to manage mongodb documents of a single entity type.\n */\nexport class MongoRepository<Entity extends ObjectLiteral> extends Repository<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    protected manager: MongoEntityManager;\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Raw SQL query execution is not supported by MongoDB.\n     * Calling this method will return an error.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new Error(`Queries aren't supported by MongoDB.`);\n    }\n\n    /**\n     * Using Query Builder with MongoDB is not supported yet.\n     * Calling this method will return an error.\n     */\n    createQueryBuilder(alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        throw new Error(`Query Builder is not supported by MongoDB.`);\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, optionsOrConditions);\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[ Entity[], number ]> {\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    findOne(optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOne(this.metadata.target, optionsOrConditions);\n    }\n\n    /**\n     * Finds entity by given id.\n     * Optionally find options or conditions can be applied.\n     */\n    findOneById(id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOneById(this.metadata.target, id, optionsOrConditions);\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor(query?: ObjectLiteral): Cursor<Entity> {\n        return this.manager.createCursor(this.metadata.target, query);\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor(query?: ObjectLiteral): Cursor<Entity> {\n        return this.manager.createEntityCursor(this.metadata.target, query);\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate(pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\n        return this.manager.aggregate(this.metadata.target, pipeline, options);\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite(operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\n        return this.manager.bulkWrite(this.metadata.target, operations, options);\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count(query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\n        return this.manager.count(this.metadata.target, query || {}, options);\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex(fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\n        return this.manager.createCollectionIndex(this.metadata.target, fieldOrSpec, options);\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes(indexSpecs: ObjectLiteral[]): Promise<void> {\n        return this.manager.createCollectionIndexes(this.metadata.target, indexSpecs);\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        return this.manager.deleteMany(this.metadata.tableName, query, options);\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        return this.manager.deleteOne(this.metadata.tableName, query, options);\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct(key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\n        return this.manager.distinct(this.metadata.tableName, key, query, options);\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex(indexName: string, options?: CollectionOptions): Promise<any> {\n        return this.manager.dropCollectionIndex(this.metadata.tableName, indexName, options);\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes(): Promise<any> {\n        return this.manager.dropCollectionIndexes(this.metadata.tableName);\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete(query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\n        return this.manager.findOneAndDelete(this.metadata.tableName, query, options);\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace(query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate(query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     */\n    geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\n        return this.manager.geoHaystackSearch(this.metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     */\n    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any> {\n        return this.manager.geoNear(this.metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Run a group command across a collection.\n     */\n    group(keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n        return this.manager.group(this.metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes(): Promise<any> {\n        return this.manager.collectionIndexes(this.metadata.tableName);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists(indexes: string|string[]): Promise<boolean> {\n        return this.manager.collectionIndexExists(this.metadata.tableName, indexes);\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation(options?: { full: boolean }): Promise<any> {\n        return this.manager.collectionIndexInformation(this.metadata.tableName, options);\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation {\n        return this.manager.initializeOrderedBulkOp(this.metadata.tableName, options);\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation {\n        return this.manager.initializeUnorderedBulkOp(this.metadata.tableName, options);\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany(docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\n        return this.manager.insertMany(this.metadata.tableName, docs, options);\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne(doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\n        return this.manager.insertOne(this.metadata.tableName, doc, options);\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped(): Promise<any> {\n        return this.manager.isCapped(this.metadata.tableName);\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes(options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\n        return this.manager.listCollectionIndexes(this.metadata.tableName, options);\n    }\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     */\n    mapReduce(map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\n        return this.manager.mapReduce(this.metadata.tableName, map, reduce, options);\n    }\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\n     * There are no ordering guarantees for returned results.\n     */\n    parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\n        return this.manager.parallelCollectionScan(this.metadata.tableName, options);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    reIndex(): Promise<any> {\n        return this.manager.reIndex(this.metadata.tableName);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\n        return this.manager.rename(this.metadata.tableName, newName, options);\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne(query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        return this.manager.replaceOne(this.metadata.tableName, query, doc, options);\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats(options?: { scale: number }): Promise<CollStats> {\n        return this.manager.stats(this.metadata.tableName, options);\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany(query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\n        return this.manager.updateMany(this.metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne(query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        return this.manager.updateOne(this.metadata.tableName, query, update, options);\n    }\n\n}","import {Repository} from \"./Repository\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Repository with additional functions to work with trees.\n *\n * @see Repository\n */\nexport class TreeRepository<Entity> extends Repository<Entity> {\n\n    // todo: implement moving\n    // todo: implement removing\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets complete trees for all roots in the table.\n     */\n    async findTrees(): Promise<Entity[]> {\n        const roots = await this.findRoots();\n        await Promise.all(roots.map(async root => {\n            await this.findDescendantsTree(root);\n        }));\n\n        return roots;\n    }\n\n    /**\n     * Roots are entities that have no ancestors. Finds them all.\n     */\n    findRoots(): Promise<Entity[]> {\n\n        const parentPropertyName = this.metadata.treeParentRelation!.propertyName;\n        return this.createQueryBuilder(\"treeEntity\")\n            .where(`treeEntity.${parentPropertyName} IS NULL`)\n            .getMany();\n    }\n\n    /**\n     * Creates a query builder used to get descendants of the entities in a tree.\n     */\n    createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        const escapeAlias = (alias: string) => this.manager.connection.driver.escape(alias);\n        const escapeColumn = (column: string) => this.manager.connection.driver.escape(column);\n\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.primaryColumns[0].databaseName)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}`;\n        return this.createQueryBuilder(alias)\n            .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.primaryColumns[0].propertyName]}`);\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\n     */\n    findDescendants(entity: Entity): Promise<Entity[]> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findDescendantsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of descendants of the entity.\n     */\n    countDescendants(entity: Entity): Promise<number> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Creates a query builder used to get ancestors of the entities in the tree.\n     */\n    createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        const escapeAlias = (alias: string) => this.manager.connection.driver.escape(alias);\n        const escapeColumn = (column: string) => this.manager.connection.driver.escape(column);\n\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.primaryColumns[0].databaseName)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}`;\n        return this.createQueryBuilder(alias)\n            .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.primaryColumns[0].propertyName]}`);\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\n     */\n    findAncestors(entity: Entity): Promise<Entity[]> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findAncestorsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of ancestors of the entity.\n     */\n    countAncestors(entity: Entity): Promise<number> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Moves entity to the children of then given entity.\n     *\n    move(entity: Entity, to: Entity): Promise<void> {\n        return Promise.resolve();\n    } */\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected createRelationMaps(alias: string, rawResults: any[]): { id: any, parentId: any }[] {\n        return rawResults.map(rawResult => {\n            return {\n                id: rawResult[alias + \"_\" + this.metadata.primaryColumns[0].databaseName],\n                parentId: rawResult[alias + \"_\" + this.metadata.treeParentRelation!.joinColumns[0].referencedColumn!.databaseName]\n            };\n        });\n    }\n\n    protected buildChildrenEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const childProperty = this.metadata.treeChildrenRelation!.propertyName;\n        const parentEntityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\n        const childIds = childRelationMaps.map(relationMap => relationMap.id);\n        entity[childProperty] = entities.filter(entity => childIds.indexOf(this.metadata.primaryColumns[0].getEntityValue(entity)) !== -1);\n        entity[childProperty].forEach((childEntity: any) => {\n            this.buildChildrenEntityTree(childEntity, entities, relationMaps);\n        });\n    }\n\n    protected buildParentEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const parentProperty = this.metadata.treeParentRelation!.propertyName;\n        const entityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\n        const parentEntity = entities.find(entity => {\n            if (!parentRelationMap)\n                return false;\n\n            return entity[this.metadata.primaryColumns[0].propertyName] === parentRelationMap.parentId;\n        });\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity;\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\n        }\n    }\n\n}","/**\n * Provides utilities to transform hydrated and persisted data.\n */\nexport class DateUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes date object hydrated from the database.\n     */\n    static normalizeHydratedDate(mixedDate: Date|string|undefined): Date|string|undefined {\n        if (!mixedDate)\n            return mixedDate;\n\n        const date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate as Date;\n        // if (!storedInLocal) {\n\n        // else if it was not stored in local timezone, means it was stored in UTC\n        // because driver hydrates it with timezone applied why we need to add timezone hours to match a local timezone\n\n        const correctedDate = new Date();\n        correctedDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n        correctedDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n        return correctedDate;\n        // }\n        // return date;\n    }\n\n    /**\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\n     */\n    static mixedDateToDateString(value: Date|any): string|any {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\n\n        return value;\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedDateToTimeString(value: Date|any): string|any {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getHours()) + \":\" + this.formatZerolessValue(value.getMinutes()) + \":\" + this.formatZerolessValue(value.getSeconds());\n\n        return value;\n    }\n\n    /**\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToString(value: string|any): string|any {\n        value = value instanceof Date ? (value.getHours() + \":\" + value.getMinutes() + \":\" + value.getSeconds()) : value;\n        if (typeof value === \"string\") {\n            return value.split(\":\")\n                .map(v => v.length === 1 ? \"0\" + v : v) // append zero at beginning if we have a first-zero-less number\n                .join(\":\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToDatetimeString(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getDate()) + \" \" +\n                this.formatZerolessValue(value.getHours()) + \":\" +\n                this.formatZerolessValue(value.getMinutes()) + \":\" +\n                this.formatZerolessValue(value.getSeconds());\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToUtcDatetimeString(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getUTCDate()) + \" \" +\n                this.formatZerolessValue(value.getUTCHours()) + \":\" +\n                this.formatZerolessValue(value.getUTCMinutes()) + \":\" +\n                this.formatZerolessValue(value.getUTCSeconds());\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts each item in the given array to string joined by \",\" separator.\n     */\n    static simpleArrayToString(value: any[]|any): string[]|any {\n        if (value instanceof Array) {\n            return (value as any[])\n                .map(i => String(i))\n                .join(\",\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given string to simple array split by \",\" separator.\n     */\n    static stringToSimpleArray(value: string|any): string|any {\n        if (value instanceof String || typeof value === \"string\") {\n            return value.split(\",\");\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatZerolessValue(value: number): string {\n        if (value < 10)\n            return \"0\" + value;\n\n        return String(value);\n    }\n\n}\n","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {DateUtils} from \"../util/DateUtils\";\n\n/**\n * Holds information about insert operation into junction table.\n */\nexport interface JunctionInsert {\n\n    /**\n     * Relation of the junction table.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Entities that needs to be \"bind\" to the subject.\n     */\n    junctionEntities: ObjectLiteral[];\n}\n\n/**\n * Holds information about remove operation from the junction table.\n */\nexport interface JunctionRemove {\n\n    /**\n     * Relation of the junction table.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Entity ids that needs to be removed from the junction table.\n     */\n    junctionRelationIds: any[];\n}\n\n/**\n * Holds information about relation update in some subject.\n */\nexport interface RelationUpdate {\n\n    /**\n     * Relation that needs to be updated.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * New value that needs to be set into into new relation.\n     */\n    value: any;\n}\n\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Persist entity (changed entity).\n     */\n    private _persistEntity?: ObjectLiteral;\n\n    /**\n     * Database entity.\n     */\n    private _databaseEntity?: ObjectLiteral;\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the subject entity.\n     */\n    readonly metadata: EntityMetadata;\n\n    /**\n     * Date when this entity is persisted.\n     */\n    readonly date: Date = new Date();\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    canBeInserted: boolean = false;\n\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    canBeUpdated: boolean = false;\n\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    mustBeRemoved: boolean = false;\n\n    /**\n     * Differentiated columns between persisted and database entities.\n     */\n    diffColumns: ColumnMetadata[] = [];\n\n    /**\n     * Differentiated relations between persisted and database entities.\n     */\n    diffRelations: RelationMetadata[] = [];\n\n    /**\n     * List of relations which need to be unset.\n     * This is used to update relation from inverse side.\n     */\n    relationUpdates: RelationUpdate[] = [];\n\n    /**\n     * Records that needs to be inserted into the junction tables of this subject.\n     */\n    junctionInserts: JunctionInsert[] = [];\n\n    /**\n     * Records that needs to be removed from the junction tables of this subject.\n     */\n    junctionRemoves: JunctionRemove[] = [];\n\n    /**\n     * When subject is newly persisted it may have a generated entity id.\n     * In this case it should be written here.\n     */\n    newlyGeneratedId?: any;\n\n    /**\n     * When subject is newly persisted it may have a generated object id.\n     * This value will be stored here. This is actual only for mongodb database.\n     */\n    generatedObjectId?: any;\n\n    /**\n     * Generated id of the parent entity. Used in the class-table-inheritance.\n     */\n    parentGeneratedId?: any;\n\n    /**\n     * Used in newly persisted entities which are tree tables.\n     */\n    treeLevel?: number;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral) {\n        this.metadata = metadata;\n        this._persistEntity = entity;\n        this._databaseEntity = databaseEntity;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity sent to the persistence (e.g. changed entity).\n     * Throws error if persisted entity was not set.\n     */\n    get entity(): ObjectLiteral {\n        if (!this._persistEntity)\n            throw new Error(`Persistence entity is not set for the given subject.`);\n\n        return this._persistEntity;\n    }\n\n    /**\n     * Checks if subject has a persisted entity.\n     */\n    get hasEntity(): boolean {\n        return !!this._persistEntity;\n    }\n\n    /**\n     * Gets entity from the database (e.g. original entity).\n     * THIS IS NOT RAW ENTITY DATA.\n     * Throws error if database entity was not set.\n     */\n    get databaseEntity(): ObjectLiteral {\n        if (!this._databaseEntity)\n            throw new Error(`Database entity is not set for the given subject.`);\n\n        return this._databaseEntity;\n    }\n\n    /**\n     * Checks if subject has a database entity.\n     */\n    get hasDatabaseEntity(): boolean {\n        return !!this._databaseEntity;\n    }\n\n    /**\n     * Sets entity from the database (e.g. original entity).\n     * Once database entity set it calculates differentiated columns and relations\n     * between persistent entity and database entity.\n     */\n    set databaseEntity(databaseEntity: ObjectLiteral) {\n        this._databaseEntity = databaseEntity;\n        this.recompute();\n    }\n\n    /**\n     * Gets entity target from the entity metadata of this subject.\n     */\n    get entityTarget(): Function|string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.hasDatabaseEntity;\n    }\n\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return this.canBeUpdated && (this.diffColumns.length > 0 || this.diffRelations.length > 0);\n    }\n\n    /**\n     * Checks if this subject has relations to be updated.\n     */\n    get hasRelationUpdates(): boolean {\n        return this.relationUpdates.length > 0;\n    }\n\n    /**\n     * Gets id of the persisted entity.\n     * If entity is not set then it returns undefined.\n     * If entity itself has an id then it simply returns it.\n     * If entity does not have an id then it returns newly generated id.\n\n    get getPersistedEntityIdMap(): any|undefined {\n        if (!this.hasEntity)\n            return undefined;\n\n        const entityIdMap = this.metadata.getDatabaseEntityIdMap(this.entity);\n        if (entityIdMap)\n            return entityIdMap;\n\n        if (this.newlyGeneratedId)\n            return this.metadata.createSimpleDatabaseIdMap(this.newlyGeneratedId);\n\n        return undefined;\n    }*/\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates this subject for errors.\n     * Subject cannot be at the same time inserted and updated, removed and inserted, removed and updated.\n     */\n    validate() {\n\n        if (this.mustBeInserted && this.mustBeRemoved)\n            throw new Error(`Removed entity ${this.metadata.name} is also scheduled for insert operation. This looks like ORM problem. Please report a github issue.`);\n\n        if (this.mustBeUpdated && this.mustBeRemoved)\n            throw new Error(`Removed entity \"${this.metadata.name}\" is also scheduled for update operation. ` +\n                `Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).`);\n\n        if (this.mustBeInserted && this.mustBeUpdated)\n            throw new Error(`Inserted entity ${this.metadata.name} is also scheduled for updated operation. This looks like ORM problem. Please report a github issue.`);\n\n    }\n\n    /**\n     * Performs entity re-computations.\n     */\n    recompute() {\n        if (this.hasEntity && this._databaseEntity) {\n            this.computeDiffColumns();\n            this.computeDiffRelationalColumns();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Differentiate columns from the updated entity and entity stored in the database.\n     */\n    protected computeDiffColumns(): void {\n        this.diffColumns = this.metadata.columns.filter(column => {\n\n            // prepare both entity and database values to make comparision\n            let entityValue = column.getEntityValue(this.entity);\n            let databaseValue = column.getEntityValue(this.databaseEntity);\n            if (entityValue === undefined)\n                return false;\n\n            // normalize special values to make proper comparision (todo: arent they already normalized at this point?!)\n            if (entityValue !== null && entityValue !== undefined) {\n                if (column.type === \"date\") {\n                    entityValue = DateUtils.mixedDateToDateString(entityValue);\n\n                } else if (column.type === \"time\") {\n                    entityValue = DateUtils.mixedDateToTimeString(entityValue);\n\n                } else if (column.type === \"datetime\" || column.type === Date) {\n                    entityValue = DateUtils.mixedDateToUtcDatetimeString(entityValue);\n                    databaseValue = DateUtils.mixedDateToUtcDatetimeString(databaseValue);\n\n                } else if (column.type === \"json\" || column.type === \"jsonb\" || column.type === Object) {\n                    entityValue = JSON.stringify(entityValue);\n                    if (databaseValue !== null && databaseValue !== undefined)\n                        databaseValue = JSON.stringify(databaseValue);\n\n                } else if (column.type === \"sample-array\") {\n                    entityValue = DateUtils.simpleArrayToString(entityValue);\n                    databaseValue = DateUtils.simpleArrayToString(databaseValue);\n                }\n            }\n            // todo: this mechanism does not get in count embeddeds in embeddeds\n\n            // if value is not defined then no need to update it\n            // if (!column.isInEmbedded && this.entity[column.propertyName] === undefined)\n            //     return false;\n            //\n            // if value is in embedded and is not defined then no need to update it\n            // if (column.isInEmbedded && (this.entity[column.embeddedProperty] === undefined || this.entity[column.embeddedProperty][column.propertyName] === undefined))\n            //     return false;\n\n            // if its a special column or value is not changed - then do nothing\n            if (column.isVirtual ||\n                column.isParentId ||\n                column.isDiscriminator ||\n                column.isUpdateDate ||\n                column.isVersion ||\n                column.isCreateDate ||\n                entityValue === databaseValue)\n                return false;\n\n            // filter out \"relational columns\" only in the case if there is a relation object in entity\n            const relation = this.metadata.findRelationWithDbName(column.databaseName);\n            if (relation) {\n                const value = relation.getEntityValue(this.entity);\n                if (value !== null && value !== undefined)\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    /**\n     * Difference columns of the owning one-to-one and many-to-one columns.\n     */\n    protected computeDiffRelationalColumns(/*todo: updatesByRelations: UpdateByRelationOperation[], */): void {\n        this.diffRelations = this.metadata.relations.filter(relation => {\n            if (!relation.isManyToOne && !(relation.isOneToOne && relation.isOwning))\n                return false;\n\n            // here we cover two scenarios:\n            // 1. related entity can be another entity which is natural way\n            // 2. related entity can be entity id which is hacked way of updating entity\n            // todo: what to do if there is a column with relationId? (cover this too?)\n            const entityValue = relation.getEntityValue(this.entity);\n            const updatedEntityRelationId: any = entityValue instanceof Object\n                    ? relation.inverseEntityMetadata.getEntityIdMixedMap(entityValue)\n                    : entityValue;\n\n            const dbEntityRelationId = relation.getEntityValue(this.databaseEntity);\n\n            // todo: try to find if there is update by relation operation - we dont need to generate update relation operation for this\n            // todo: if (updatesByRelations.find(operation => operation.targetEntity === this && operation.updatedRelation === relation))\n            // todo:     return false;\n\n            // we don't perform operation over undefined properties\n            if (updatedEntityRelationId === undefined)\n                return false;\n\n            // if both are empty totally no need to do anything\n            if ((updatedEntityRelationId === undefined || updatedEntityRelationId === null) &&\n                (dbEntityRelationId === undefined || dbEntityRelationId === null))\n                return false;\n\n            // if relation ids aren't equal then we need to update them\n            return updatedEntityRelationId !== dbEntityRelationId;\n        });\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Connection} from \"../connection/Connection\";\nimport {Subject} from \"./Subject\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * To be able to execute persistence operations we need to load all entities from the database we need.\n * Loading should be efficient - we need to load entities in as few queries as possible + load as less data as we can.\n * This is how we determine which entities needs to be loaded from db:\n *\n * 1. example with cascade updates and inserts:\n *\n * [Y] - means \"yes, we load\"\n * [N] - means \"no, we don't load\"\n * in {} braces we specify what cascade options are set between relations\n *\n * if Post is new, author is not set in the post\n *\n * [Y] Post -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *   [Y] Author -> {all} // no because author is not set\n *     [Y] Photo -> {all} // no because author and its photo are not set\n *       [Y] Tag -> {all} // no because author and its photo and its tag are not set\n *\n * if Post is new, author is new (or anything else is new)\n * if Post is updated\n * if Post and/or Author are updated\n *\n * [Y] Post -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *   [Y] Author -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *     [Y] Photo -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *       [Y] Tag -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *\n * Here we load post, author, photo, tag to check if they are new or not to persist insert or update operation.\n * We load post, author, photo, tag only if they exist in the relation.\n * From these examples we can see that we always load entity relations when it has \"update\" or \"insert\" cascades.\n *\n * 2. example with cascade removes\n *\n * if entity is new its remove operations by cascades should not be executed\n * if entity is updated then values that are null or missing in array (not undefined!, undefined means skip - don't do anything) are treated as removed\n * if entity is removed then all its downside relations which has cascade remove should be removed\n *\n * Once we find removed entity - we load it, and every downside entity which has \"remove\" cascade set.\n *\n * At the end we have all entities we need to operate with.\n * Next step is to store all loaded entities to manipulate them efficiently.\n *\n * Rules of updating by cascades.\n * Insert operation can lead to:\n *  - insert operations\n *  - update operations\n * Update operation can lead to:\n *  - insert operations\n *  - update operations\n *  - remove operations\n * Remove operation can lead to:\n *  - remove operation\n */\nexport class SubjectBuilder<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * If this gonna be reused then what to do with marked flags?\n     * One of solution can be clone this object and reset all marked states for this persistence.\n     * Or from reused just extract databaseEntities from their subjects? (looks better)\n     */\n    operateSubjects: Subject[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection, protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds operations for entity that is being inserted/updated.\n     */\n    async persist(entity: Entity, metadata: EntityMetadata): Promise<void> {\n\n        // create subject for currently persisted entity and mark that it can be inserted and updated\n        const mainPersistedSubject = new Subject(metadata, entity);\n        mainPersistedSubject.canBeInserted = true;\n        mainPersistedSubject.canBeUpdated = true;\n        this.operateSubjects.push(mainPersistedSubject);\n\n        // next step we build list of subjects we will operate with\n        // these subjects are subjects that we need to insert or update alongside with main persisted entity\n        this.buildCascadeUpdateAndInsertOperateSubjects(mainPersistedSubject);\n\n        // next step is to load database entities of all operate subjects\n        await this.loadOperateSubjectsDatabaseEntities();\n\n        // next step - we filter subjects with database entities (only for non-new entities)\n        // and find operate subjects that needs to be removed\n        // here we also find operate subjects which relations should be updated\n        // these relations usually are \"update from inverse side\" operations\n        const operateSubjectsWithDatabaseEntities = this.operateSubjects.filter(subject => subject.hasDatabaseEntity);\n        await Promise.all(operateSubjectsWithDatabaseEntities.map(subject => {\n            return this.buildCascadeRemovedAndRelationUpdateOperateSubjects(subject);\n        }));\n\n        // finally find which operate subjects have insert and remove operations in their junction tables\n        await this.buildJunctionOperations({ insert: true, remove: true });\n    }\n\n    /**\n     * Builds only remove operations for entity that is being removed.\n     */\n    async remove(entity: Entity, metadata: EntityMetadata): Promise<void> {\n\n        // create subject for currently removed entity and mark that it must be removed\n        const mainRemovedSubject = new Subject(metadata, entity);\n        mainRemovedSubject.mustBeRemoved = true;\n        this.operateSubjects.push(mainRemovedSubject);\n\n        // next step we build list of subjects we will operate with\n        // these subjects are subjects that we need to remove alongside with main removed entity\n        this.buildCascadeRemoveOperateSubjects(mainRemovedSubject);\n\n        // next step is to load database entities for all operate subjects\n        await this.loadOperateSubjectsDatabaseEntities();\n\n        // next step - we filter subjects with database entities (only for non-new entities)\n        // and find operate subjects that needs to be removed\n        // todo(this should not be in remove?) // here we also find operate subjects which relations should be updated\n        // todo(this should not be in remove?) // these relations usually are \"update from inverse side\" operations\n        const operateSubjectsWithDatabaseEntities = this.operateSubjects.filter(subject => subject.hasDatabaseEntity);\n        await Promise.all(operateSubjectsWithDatabaseEntities.map(subject => {\n            return this.buildCascadeRemovedAndRelationUpdateOperateSubjects(subject);\n        }));\n\n        // finally find which operate subjects have remove operations in their junction tables\n        await this.buildJunctionOperations({ insert: false, remove: true });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds and pushes to array of operate entities all entities that we will work with.\n     * These are only relational entities which has insert and update cascades.\n     * All such entities will be loaded from the database, because they can be inserted or updated.\n     * That's why we load them - to understand if they should be inserted or updated, or which columns we need to update.\n     * We can't add removed entities here, because to know which entity was removed we need first to\n     * load original entity (particularly its id) from the database.\n     * That's why we first need to load all changed entities, then extract ids of the removed entities from them,\n     * and only then load removed entities by extracted ids.\n     */\n    protected buildCascadeUpdateAndInsertOperateSubjects(subject: Subject): void {\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations)\n            .filter(([relation, value, valueMetadata]) => {\n\n                // we need only defined values and insert or update cascades of the relation should be set\n                return value !== undefined && value !== null && (relation.isCascadeInsert || relation.isCascadeUpdate);\n            })\n            .forEach(([relation, value, valueMetadata]) => {\n\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\n                const alreadyExistValueSubject = this.findByEntityLike(valueMetadata.target, value);\n                if (alreadyExistValueSubject) {\n                    if (alreadyExistValueSubject.canBeInserted === false)\n                        alreadyExistValueSubject.canBeInserted = relation.isCascadeInsert === true;\n                    if (alreadyExistValueSubject.canBeUpdated === false)\n                        alreadyExistValueSubject.canBeUpdated = relation.isCascadeUpdate === true;\n                    return;\n                }\n\n                // mark subject with what we can do with it\n                // and add to the array of subjects to load only if there is no same entity there already\n                const valueSubject = new Subject(valueMetadata, value);\n                valueSubject.canBeInserted = relation.isCascadeInsert === true;\n                valueSubject.canBeUpdated = relation.isCascadeUpdate === true;\n                this.operateSubjects.push(valueSubject);\n\n                // go recursively and find other entities we need to operate with\n                this.buildCascadeUpdateAndInsertOperateSubjects(valueSubject);\n            });\n    }\n\n    /**\n     * Builds and pushes to array of operate entities all entities that must be removed.\n     */\n    protected buildCascadeRemoveOperateSubjects(subject: Subject): void {\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations)\n            .filter(([relation, value, valueMetadata]) => {\n\n                // we need only defined values and insert cascades of the relation should be set\n                return value !== undefined && value !== null && relation.isCascadeRemove;\n            })\n            .forEach(([relation, value, valueMetadata]) => {\n\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\n                const alreadyExistValueSubject = this.findByEntityLike(valueMetadata.target, value);\n                if (alreadyExistValueSubject) {\n                    alreadyExistValueSubject.mustBeRemoved = true;\n                    return;\n                }\n\n                // add to the array of subjects to load only if there is no same entity there already\n                const valueSubject = new Subject(valueMetadata, value);\n                valueSubject.mustBeRemoved = true;\n                this.operateSubjects.push(valueSubject);\n\n                // go recursively and find other entities to load by cascades in currently inserted entities\n                this.buildCascadeRemoveOperateSubjects(valueSubject);\n            });\n    }\n\n    /**\n     * Loads database entities for all operate subjects which do not have database entity set.\n     * All entities that we load database entities for are marked as updated or inserted.\n     * To understand which of them really needs to be inserted or updated we need to load\n     * their original representations from the database.\n     */\n    protected async loadOperateSubjectsDatabaseEntities(): Promise<void> {\n\n        // we are grouping subjects by target to perform more optimized queries using WHERE IN operator\n        // go throw the groups and perform loading of database entities of each subject in the group\n        const promises = this.groupByEntityTargets().map(async subjectGroup => {\n\n            // prepare entity ids of the subjects we need to load\n            const allIds = subjectGroup.subjects\n                .filter(subject => !subject.hasDatabaseEntity) // we don't load if subject already has a database entity loaded\n                .filter(subject => {\n                    return !subject.metadata.isEntityMapEmpty(subject.entity);\n                }) // we only need entity id\n                .map(subject => { // we don't need empty ids\n                    // console.log(subject.entity);\n                    return subject.metadata.getEntityIdMap(subject.entity);\n                    // if (mixedId instanceof Object)\n                    //     return Object.keys(mixedId).every(key => mixedId[key] !== undefined && mixedId[key] !== null && mixedId[key] !== \"\");\n                    //\n                    // return mixedId !== undefined && mixedId !== null && mixedId !== \"\";\n                });\n\n            // if there no ids found (which means all entities are new and have generated ids) - then nothing to load there\n            // console.log(\"allIds: \", allIds);\n            // console.log(\"subject.entity: \", subjectGroup.subjects);\n            // console.log(\"allIds: \", allIds);\n            if (!allIds.length)\n                return;\n            // console.log(\"Y\");\n\n            // load database entities for all given ids\n            // todo: such implementation is temporary, need to create a good abstraction there\n            // todo: its already possible to do that with repository.findByIds method however setting \"RELATION_ID_VALUES\" option is an issue\n            // todo: also custom queryRunnerProvider is an issue\n            let entities: any[];\n            if (this.connection.driver instanceof MongoDriver) {\n\n                entities = await this.connection\n                    .getMongoRepository<ObjectLiteral>(subjectGroup.target)\n                    .findByIds(allIds);\n\n            } else {\n                entities = await this.connection\n                    .getRepository<ObjectLiteral>(subjectGroup.target)\n                    .createQueryBuilder(\"operateSubject\", this.queryRunner)\n                    .whereInIds(allIds)\n                    .loadAllRelationIds()\n                    .getMany();\n            }\n\n            // now when we have entities we need to find subject of each entity\n            // and insert that entity into database entity of the found subject\n            entities.forEach(entity => {\n                // console.log(1);\n                const subject = this.findByEntityLike(subjectGroup.target, entity);\n                if (subject)\n                    subject.databaseEntity = entity;\n            });\n\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * We need to load removed entity when:\n     *  - entity with relations is not new (this can be determined only after entity is loaded from db)\n     *      (note: simple \"id\" check will not work because id can be not generated)\n     *  - entity missing relation. When relation is simple\n     *      - in the case of one-to-one owner (with join column) relation we need to load owner entity\n     *      - in the case of one-to-one (without join column) relation we need to load inverse side entity\n     *      - in the case of many-to-one relations we need to load entity itself\n     *      - in the case of one-to-many relations we need to load entities by relation from inverse side\n     *\n     *  Before loading each entity we need to check in the loaded subjects - maybe it was already loaded.\n     *\n     *  BIG NOTE: objects are being removed by cascades not only when relation is removed, but also when\n     *  relation is replaced (e.g. changed with different object).\n     */\n    protected async buildCascadeRemovedAndRelationUpdateOperateSubjects(subject: Subject): Promise<void> {\n\n        // note: we can't use extractRelationValuesFromEntity here because it does not handle empty arrays\n        const promises = subject.metadata.relations.map(async relation => {\n            const valueMetadata = relation.inverseEntityMetadata;\n            const qbAlias = valueMetadata.tableName;\n\n            // added for type-safety, but subject without databaseEntity cant come here anyway because of checks on upper levels\n            if (!subject.hasDatabaseEntity) return;\n\n            // for one-to-one owner and many-to-one relations no need to load entity to check if something removed\n            // because join column is in this side of relation and we have a database entity with which we can compare\n            // and understand if relation was removed or not\n            if (relation.isOneToOneOwner || relation.isManyToOne) {\n\n                // we only work with cascade removes here\n                if (!relation.isCascadeRemove) return;\n\n                /**\n                 * By example (one-to-one owner). Let's say we have a one-to-one relation between Post and Details.\n                 * Post contains detailsId. It means he owns relation. Post has cascade remove with details.\n                 * Now here we have a post object with removed details.\n                 * We need to remove Details if post.details = null\n                 * or if post.details != databasePost.details\n                 */\n\n                /**\n                 * By example (many-to-one). Let's say we have a many-to-one relation between Post and Details.\n                 * Post contains detailsId. It means he owns relation.\n                 * It also means that post can have only one details, and details can have multiple posts.\n                 * Post has cascade remove with details.\n                 * Now here we have a post object with removed details.\n                 * We need to remove Details (one) if post.details = null\n                 * or if post.details != databasePost.details\n                 */\n\n                // (example) \"relation\" - is a relation in post with details.\n                // (example) \"valueMetadata\" - is an entity metadata of the Details object.\n                // (example) \"persistValue\" - is a detailsId from the persisted entity\n\n                // note that if databaseEntity has relation, it can only be a relation id,\n                // because of query builder option \"RELATION_ID_VALUES\" we used\n                const relationIdInDatabaseEntity = relation.getEntityValue(subject.databaseEntity); // (example) returns post.detailsId\n\n                // if database relation id does not exist in the database object then nothing to remove\n                if (relationIdInDatabaseEntity === null || relationIdInDatabaseEntity === undefined)\n                    return;\n\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\n                let persistValueRelationId: any = undefined, persistValue: any = undefined;\n                if (subject.hasEntity) {\n                    persistValue = relation.getEntityValue(subject.entity);\n                    if (persistValue === null) persistValueRelationId = null;\n                    if (persistValue) persistValueRelationId = relation.joinColumns.reduce((map, column) => column.referencedColumn!.getEntityValueMap(persistValue), {} as ObjectLiteral);\n                    if (persistValueRelationId === undefined) return; // skip undefined properties\n                }\n\n                // object is removed only if relation id in the persisted entity is empty or is changed\n                // if (persistValueRelationId !== null && persistValueRelationId === relationIdInDatabaseEntity)\n                //     return;\n                // console.log(\"relationIdInDatabaseEntity:\", relationIdInDatabaseEntity);\n                // console.log(\"persistValue:\", persistValue);\n                // console.log(\"compareEntities:\", relation.entityMetadata.compareEntities(relationIdInDatabaseEntity, persistValue));\n                // console.log(\"compareIds:\", relation.entityMetadata.compareIds(relationIdInDatabaseEntity, persistValue));\n                if (persistValueRelationId !== null && relation.entityMetadata.compareIds(relationIdInDatabaseEntity, persistValue))\n                    return;\n\n                // first check if we already loaded this object before load from the database\n                let alreadyLoadedRelatedDatabaseSubject = this.operateSubjects.find(relatedSubject => {\n\n                    // (example) filter only subject that has database entity loaded and its target is Details\n                    if (!relatedSubject.hasDatabaseEntity || relatedSubject.entityTarget !== valueMetadata.target)\n                        return false;\n\n                    // (example) here we seek a Details loaded from the database in the subjects\n                    // (example) here relatedSubject.databaseEntity is a Details\n                    // (example) and we need to compare details.id === post.detailsId\n                    return relation.entityMetadata.compareIds(relationIdInDatabaseEntity, relation.getEntityValue(relatedSubject.databaseEntity));\n                });\n\n                // if not loaded yet then load it from the database\n                if (!alreadyLoadedRelatedDatabaseSubject) {\n\n                    // (example) we need to load a details where details.id = post.details\n                    const qb = this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunner) // todo: this wont work for mongodb. implement this in some method and call it here instead?\n                        .loadAllRelationIds();\n\n                    const condition = relation.joinColumns.map(joinColumn => {\n                        return `${qbAlias}.${joinColumn.referencedColumn!.propertyPath} = :${joinColumn.databaseName}`;\n                    }).join(\" AND \");\n\n                    const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\n                        parameters[joinColumn.databaseName] = joinColumn.referencedColumn!.getEntityValue(relationIdInDatabaseEntity);\n                        return parameters;\n                    }, {} as ObjectLiteral);\n\n                    qb.where(condition)\n                        .setParameters(parameters);\n\n                    const databaseEntity = await qb.getOne();\n\n                    if (databaseEntity) {\n                        alreadyLoadedRelatedDatabaseSubject = new Subject(valueMetadata, undefined, databaseEntity);\n                        this.operateSubjects.push(alreadyLoadedRelatedDatabaseSubject);\n                    }\n                }\n\n                if (alreadyLoadedRelatedDatabaseSubject) {\n\n                    // if object is already marked as removed then no need to proceed because it already was proceed\n                    // if we remove this it will cause a recursion\n                    if (alreadyLoadedRelatedDatabaseSubject.mustBeRemoved)\n                        return;\n\n                    alreadyLoadedRelatedDatabaseSubject.mustBeRemoved = true;\n                    await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(alreadyLoadedRelatedDatabaseSubject);\n                }\n            }\n\n            // for one-to-one not owner we need to load entity to understand that it was really removed or not,\n            // since column value that indicates relation is stored on inverse side\n            if (relation.isOneToOneNotOwner) {\n\n                // we only work with cascade removes here\n                if (!relation.isCascadeRemove) return; // todo: no\n\n                /**\n                 * By example. Let's say we have a one-to-one relation between Post and Details.\n                 * Post contains detailsId. It means he owns relation. Details has cascade remove with post.\n                 * Now here we have a details object with removed post.\n                 * We need to remove Post if details.post = null and databasePost.detailsId = details.id exist in the db,\n                 * or if databasePost.id === details.post.id (we need to load it) and databasePost.detailsId != details.id\n                 */\n\n                // (example) \"relation\" - is a relation in details with post.\n                // (example) \"valueMetadata\" - is an entity metadata of the Post object.\n                // (example) \"subject.databaseEntity\" - is a details object\n\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\n                let persistValueRelationId: any = undefined;\n                if (subject.hasEntity && !subject.mustBeRemoved) {\n                    const persistValue = relation.getEntityValue(subject.entity);\n                    if (persistValue) persistValueRelationId = relation.inverseRelation!.getEntityValue(persistValue);\n                    if (persistValueRelationId === undefined) return; // skip undefined properties\n                }\n\n                // (example) returns us referenced column (detail's id)\n                const relationIdInDatabaseEntity = relation.inverseRelation!.joinColumns[0].referencedColumn!.getEntityValue(subject.databaseEntity);\n\n                // if database relation id does not exist then nothing to remove (but can this be possible?)\n                if (relationIdInDatabaseEntity === null || relationIdInDatabaseEntity === undefined)\n                    return;\n\n                // first check if we already have this object loaded before load from the database\n                let alreadyLoadedRelatedDatabaseSubject = this.operateSubjects.find(relatedSubject => {\n\n                    // (example) filter only subject that has database entity loaded and its target is Post\n                    if (!relatedSubject.hasDatabaseEntity || relatedSubject.entityTarget !== valueMetadata.target)\n                        return false;\n\n                    // (example) here we seek a Post loaded from the database in the subjects\n                    // (example) here relatedSubject.databaseEntity is a Post\n                    // (example) and we need to compare post.detailsId === details.id\n                    return relation.inverseRelation!.getEntityValue(relatedSubject.databaseEntity) === relationIdInDatabaseEntity;\n                });\n\n                // if not loaded yet then load it from the database\n                if (!alreadyLoadedRelatedDatabaseSubject) {\n\n                    // (example) we need to load a post where post.detailsId = details.id\n                    const databaseEntity = await this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunner) // todo: this wont work for mongodb. implement this in some method and call it here instead?\n                        .where(qbAlias + \".\" + relation.inverseSidePropertyPath + \"=:id\") // TODO relation.inverseRelation.joinColumns\n                        .setParameter(\"id\", relationIdInDatabaseEntity) // (example) subject.entity is a details here, and the value is details.id\n                        .loadAllRelationIds()\n                        .getOne();\n\n                    // add only if database entity exist - because in the case of inverse side of the one-to-one relation\n                    // we cannot check if it was removed or not until we query the database\n                    // and it can be a situation that relation wasn't exist at all. This is particular that case\n                    alreadyLoadedRelatedDatabaseSubject = new Subject(valueMetadata, undefined, databaseEntity);\n                    this.operateSubjects.push(alreadyLoadedRelatedDatabaseSubject);\n                }\n\n                // check if we really has a relation between entities. If relation not found then alreadyLoadedRelatedDatabaseSubject will be empty\n                if (alreadyLoadedRelatedDatabaseSubject && alreadyLoadedRelatedDatabaseSubject.hasDatabaseEntity) {\n\n                    // also check if relation value exist then then make sure its changed\n                    // (example) persistValue is a postFromPersistedDetails here\n                    // (example) alreadyLoadedRelatedDatabaseSubject.databaseEntity is a postFromDatabaseDetails here\n                    // (example) postFromPersistedDetails.id === postFromDatabaseDetails - means nothing changed\n                    const inverseEntityRelationId = relation.inverseRelation!.getEntityValue(alreadyLoadedRelatedDatabaseSubject.databaseEntity);\n                    if (persistValueRelationId && persistValueRelationId === inverseEntityRelationId)\n                        return;\n\n                    // if object is already marked as removed then no need to proceed because it already was proceed\n                    // if we remove this it will cause a recursion\n                    if (alreadyLoadedRelatedDatabaseSubject.mustBeRemoved)\n                        return;\n\n                    alreadyLoadedRelatedDatabaseSubject.mustBeRemoved = true;\n                    await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(alreadyLoadedRelatedDatabaseSubject);\n                }\n            }\n\n            // for one-to-many we need to load entities to understand which was really removed\n            // since column value that indicates relation is stored on inverse side\n            if (relation.isOneToMany || relation.isManyToMany) {\n\n                // we only work with cascade removes here\n                // if (!relation.isCascadeRemove && !relation.isCascadeUpdate) return;\n\n                /**\n                 * By example. Let's say we have a one-to-many relation between Post and Details.\n                 * Post contains detailsId. It means he owns relation.\n                 * It also means that one details contains multiple post, and one post contain only one details.\n                 * Details has cascade remove with post.\n                 * Now here we have a details object with removed post.\n                 * There can be one or multiple removed posts, because posts is an array in details.\n                 * If details.posts is undefined then we skip it as we do with any persisted undefined property.\n                 * If details.posts is an empty array it means all its items should be removed.\n                 * If details.posts is a null it means same - all its items has been removed.\n                 * We need to remove each Post in the databaseDetails where post is missing in details.posts\n                 * but databasePost.detailsId = details.id exist in the db.\n                 */\n\n                // (example) \"relation\" - is a relation in details with post.\n                // (example) \"valueMetadata\" - is an entity metadata of the Post object.\n                // (example) \"subject.databaseEntity\" - is a details object\n\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\n                let persistValue: any = undefined;\n                if (subject.hasEntity) {\n                    persistValue = relation.getEntityValue(subject.entity);\n                    if (persistValue === undefined) return; // skip undefined properties\n                }\n\n                // we can't get already loaded objects from loadMap because we don't know exactly how\n                // many objects are in database entity, and entities from loadMap may return us not all of them\n                // that's why we are forced to load all its entities from the database even if loaded some of them before\n                // (example) we need to load a posts where post.detailsId = details.id\n                let databaseEntities: ObjectLiteral[] = [];\n\n                // create shortcuts for better readability\n                const escape = (name: string) => this.connection.driver.escape(name);\n\n                if (relation.isManyToManyOwner) {\n\n                    // we only need to load inverse entities if cascade removes are set\n                    // because remove by cascades is the only reason we need relational entities here\n                    if (!relation.isCascadeRemove) return;\n\n                    const joinAlias = escape(\"persistenceJoinedRelation\");\n\n                    const joinColumnConditions = relation.joinColumns.map(joinColumn => {\n                        return `${joinAlias}.${joinColumn.propertyName} = :${joinColumn.propertyName}`;\n                    });\n                    const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\n                        return `${joinAlias}.${inverseJoinColumn.propertyName} = ${escape(qbAlias)}.${escape(inverseJoinColumn.referencedColumn!.propertyName)}`;\n                    });\n\n                    const conditions = joinColumnConditions.concat(inverseJoinColumnConditions).join(\" AND \");\n\n                    // (example) returns us referenced column (detail's id)\n                    const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\n                        parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(subject.databaseEntity);\n                        return parameters;\n                    }, {} as ObjectLiteral);\n\n                    databaseEntities = await this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunner) // todo: this wont work for mongodb. implement this in some method and call it here instead?\n                        .innerJoin(relation.junctionEntityMetadata!.tableName, joinAlias, conditions)\n                        .setParameters(parameters)\n                        .loadAllRelationIds()\n                        .getMany();\n\n                } else if (relation.isManyToManyNotOwner) {\n\n                    // we only need to load inverse entities if cascade removes are set\n                    // because remove by cascades is the only reason we need relational entities here\n                    if (!relation.isCascadeRemove) return;\n\n                    const joinAlias = escape(\"persistenceJoinedRelation\");\n\n                    const joinColumnConditions = relation.joinColumns.map(joinColumn => {\n                        return `${joinAlias}.${joinColumn.propertyName} = ${escape(qbAlias)}.${escape(joinColumn.referencedColumn!.propertyName)}`;\n                    });\n                    const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\n                        return `${joinAlias}.${inverseJoinColumn.propertyName} = :${inverseJoinColumn.propertyName}`;\n                    });\n\n                    const conditions = joinColumnConditions.concat(inverseJoinColumnConditions).join(\" AND \");\n\n                    // (example) returns us referenced column (detail's id)\n                    const parameters = relation.inverseRelation!.inverseJoinColumns.reduce((parameters, joinColumn) => {\n                        parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(subject.databaseEntity);\n                        return parameters;\n                    }, {} as ObjectLiteral);\n\n                    databaseEntities = await this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunner) // todo: this wont work for mongodb. implement this in some method and call it here instead?\n                        .innerJoin(relation.junctionEntityMetadata!.tableName, joinAlias, conditions)\n                        .setParameters(parameters)\n                        .loadAllRelationIds()\n                        .getMany();\n\n                } else { // this case can only be a oneToMany relation\n                    // todo: fix issues with joinColumn[0]\n                    // (example) returns us referenced column (detail's id)\n                    const relationIdInDatabaseEntity = relation.inverseRelation!.joinColumns[0].referencedColumn!.getEntityValue(subject.databaseEntity);\n\n                    // in this case we need inverse entities not only because of cascade removes\n                    // because we also need inverse entities to be able to perform update of entities\n                    // in the inverse side when entities is detached from one-to-many relation\n\n                    databaseEntities = await this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunner) // todo: this wont work for mongodb. implement this in some method and call it here instead?\n                        .where(qbAlias + \".\" + relation.inverseSidePropertyPath + \"=:id\")\n                        .setParameter(\"id\", relationIdInDatabaseEntity)\n                        .loadAllRelationIds()\n                        .getMany();\n                }\n\n                // add to loadMap loaded entities if some of them are missing\n                databaseEntities.forEach(databaseEntity => {\n                    const subjectInLoadMap = this.findByEntityLike(valueMetadata.target, databaseEntity);\n                    if (subjectInLoadMap && !subjectInLoadMap.hasDatabaseEntity) {\n                        subjectInLoadMap.databaseEntity = databaseEntity;\n\n                    } else if (!subjectInLoadMap) {\n                        const subject = new Subject(valueMetadata, undefined, databaseEntity);\n                        this.operateSubjects.push(subject);\n                    }\n                });\n\n\n                // add new relations for newly bind entities from the one-to-many relations\n                if (relation.isOneToMany && persistValue) { // todo: implement same for one-to-one\n                    const promises = (persistValue as ObjectLiteral[]).map(async persistValue => {\n\n                        // try to find in the database entities persistedValue (entity bind to this relation)\n                        const persistedValueInDatabaseEntity = databaseEntities.find(databaseEntity => {\n                            return valueMetadata.compareEntities(persistValue, databaseEntity);\n                        });\n\n                        // if it does not exist in the database entity - it means we need to bind it\n                        // to bind it we need to update related entity itself\n                        // this operation is performed only in one-to-many relations\n                        if (!persistedValueInDatabaseEntity) {\n\n                            // now find subject with\n                            let loadedSubject = this.findByDatabaseEntityLike(valueMetadata.target, persistValue);\n                            if (!loadedSubject) {\n                                const id = valueMetadata.getEntityIdMap(persistValue);\n                                if (id) { // if there is no id (for newly inserted) then we cant load\n                                    const databaseEntity = await this.connection\n                                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                                        .createQueryBuilder(qbAlias, this.queryRunner) // todo: this wont work for mongodb. implement this in some method and call it here instead?\n                                        .whereInIds([id])\n                                        .loadAllRelationIds()\n                                        .getOne();\n\n                                    if (databaseEntity) {\n                                        loadedSubject = new Subject(valueMetadata, undefined, databaseEntity); // todo: what if entity like object exist in the loaded subjects but without databaseEntity?\n                                        this.operateSubjects.push(loadedSubject);\n                                    }\n                                }\n                            }\n\n                            if (loadedSubject) {\n                                loadedSubject.relationUpdates.push({\n                                    relation: relation.inverseRelation!,\n                                    value: subject.entity\n                                });\n                            }\n                        }\n                    });\n\n                    await Promise.all(promises);\n                }\n\n                // iterate throw loaded inverse entities to find out removed entities and inverse updated entities (only for one-to-many relation)\n                const promises = databaseEntities.map(async databaseEntity => {\n\n                    // find a subject object of the related database entity\n                    let relatedEntitySubject = this.findByDatabaseEntityLike(valueMetadata.target, databaseEntity);\n                    if (!relatedEntitySubject) return; // should not be possible, anyway add it for type-safety\n\n                    // if object is already marked as removed then no need to proceed because it already was proceed\n                    // if we remove this check it will cause a recursion\n                    if (relatedEntitySubject.mustBeRemoved) return;  // todo: add another check for entity in unsetRelations?\n\n                    // check if in persisted value there is a database value to understand if it was removed or not\n                    let relatedValue = ((persistValue || []) as ObjectLiteral[]).find(persistValueItem => {\n                        return valueMetadata.compareEntities(relatedEntitySubject!.databaseEntity, persistValueItem);\n                    });\n\n                    // if relation value is set to undefined then we don't do anything - simply skip any check and remove\n                    // but if relation value is set to null then it means user wants to remove each entity in this relation\n                    // OR\n                    // value was removed from persisted value - means we need to mark it as removed\n                    // and check if mark as removed all underlying entities that has cascade remove\n                    if (persistValue === null || !relatedValue) {\n\n                        // if cascade remove option is set then need to remove related entity\n                        if (relation.isCascadeRemove) {\n                            relatedEntitySubject.mustBeRemoved = true;\n\n                            // mark as removed all underlying entities that has cascade remove\n                            await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(relatedEntitySubject);\n\n                        // if cascade remove option is not set then it means we simply need to remove\n                        // reference to this entity from inverse side (from loaded database entity)\n                        // this applies only on one-to-many relationship\n                        } else if (relation.isOneToMany && relation.inverseRelation) {\n                            relatedEntitySubject.relationUpdates.push({\n                                relation: relation.inverseRelation,\n                                value: null\n                            }); // todo: implement same for one-to-one\n                        }\n\n                    }\n\n                });\n\n                await Promise.all(promises);\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Builds all junction insert and remove operations used to insert new bind data into junction tables,\n     * or remove old junction records.\n     * Options specifies which junction operations should be built - insert, remove or both.\n     */\n    private async buildJunctionOperations(options: { insert: boolean, remove: boolean }): Promise<void> {\n        const promises = this.operateSubjects.filter(subject => subject.hasEntity).map(subject => {\n            const metadata = subject.metadata.parentEntityMetadata ? subject.metadata.parentEntityMetadata : subject.metadata;\n            const promises = metadata.manyToManyRelations.map(async relation => {\n                // if subject marked to be removed then all its junctions must be removed\n                if (subject.mustBeRemoved && options.remove) {\n                    // load from db all relation ids of inverse entities that are \"bind\" to the currently persisted entity\n                    // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n                    const existInverseEntityRelationIds = relation.getEntityValue(subject.databaseEntity);\n\n                    // finally create a new junction remove operation and push it to the array of such operations\n                    if (existInverseEntityRelationIds.length > 0) {\n                        subject.junctionRemoves.push({\n                            relation: relation,\n                            junctionRelationIds: existInverseEntityRelationIds\n                        });\n                    }\n\n                    return;\n                }\n\n                // if entity don't have entity then no need to find something that should be inserted or removed\n                if (!subject.hasEntity)\n                    return;\n\n                // else check changed junctions in the persisted entity\n                // extract entity value - we only need to proceed if value is defined and its an array\n                const relatedValue = relation.getEntityValue(subject.entity);\n                if (!(relatedValue instanceof Array))\n                    return;\n\n                // load from db all relation ids of inverse entities that are \"bind\" to the currently persisted entity\n                // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n                // we could load this relation ids with entity using however this way it may be more efficient, because\n                // this way we load only relations that come, e.g. we don't load data for empty relations set with object.\n                // this is also useful when object is being saved partial.\n                let existInverseEntityRelationIds: any[] = [];\n\n                // if subject don't have database entity it means its new and we don't need to remove something that is not exist\n                if (subject.hasDatabaseEntity) {\n                    existInverseEntityRelationIds = relation.getEntityValue(subject.databaseEntity);\n                    // console.log(\"existInverseEntityRelationIds:\", existInverseEntityRelationIds[0]);\n                }\n\n                // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n                const changedInverseEntityRelationIds = relatedValue\n                    .map(subRelationValue => {\n                        const joinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\n                        return joinColumns.reduce((ids, joinColumn) => {\n                            return OrmUtils.mergeDeep(ids, joinColumn.referencedColumn!.createValueMap(joinColumn.referencedColumn!.getEntityValue(subRelationValue))); // todo: duplicate. relation.createJoinColumnsIdMap(entity) ?\n                        }, {} as ObjectLiteral);\n                    })\n                    .filter(subRelationValue => subRelationValue !== undefined && subRelationValue !== null);\n                // console.log(\"changedInverseEntityRelationIds:\", changedInverseEntityRelationIds);\n\n                // now from all entities in the persisted entity find only those which aren't found in the db\n                const removedJunctionEntityIds = existInverseEntityRelationIds.filter(existRelationId => {\n                    return !changedInverseEntityRelationIds.find(changedRelationId => {\n                        return relation.inverseEntityMetadata.compareIds(changedRelationId, existRelationId);\n                    });\n                });\n                // console.log(\"removedJunctionEntityIds:\", removedJunctionEntityIds);\n\n                // now from all entities in the persisted entity find only those which aren't found in the db\n                const newJunctionEntities = relatedValue.filter(subRelatedValue => {\n                    // console.log(subRelatedValue);\n\n                    const joinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\n                    const ids = joinColumns.reduce((ids, joinColumn) => {\n                        return OrmUtils.mergeDeep(ids, joinColumn.referencedColumn!.createValueMap(joinColumn.referencedColumn!.getEntityValue(subRelatedValue))); // todo: duplicate. relation.createJoinColumnsIdMap(entity) ?\n                    }, {} as ObjectLiteral);\n                    // console.log(\"ids:\", ids);\n                    return !existInverseEntityRelationIds.find(relationId => {\n                        return relation.inverseEntityMetadata.compareIds(relationId, ids);\n                    });\n                });\n\n                // console.log(\"newJunctionEntities: \", newJunctionEntities);\n\n                // finally create a new junction insert operation and push it to the array of such operations\n                if (newJunctionEntities.length > 0 && options.insert) {\n                    subject.junctionInserts.push({\n                        relation: relation,\n                        junctionEntities: newJunctionEntities\n                    });\n                }\n\n                // finally create a new junction remove operation and push it to the array of such operations\n                if (removedJunctionEntityIds.length > 0 && options.remove) {\n                    subject.junctionRemoves.push({\n                        relation: relation,\n                        junctionRelationIds: removedJunctionEntityIds\n                    });\n                }\n            });\n\n            return Promise.all(promises);\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparision made by entity id.\n     */\n    protected findByEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\n        return this.operateSubjects.find(subject => {\n            if (!subject.hasEntity)\n                return false;\n\n            if (subject.entity === entity)\n                return true;\n\n            return subject.entityTarget === entityTarget && subject.metadata.compareEntities(subject.entity, entity);\n        });\n    }\n\n    /**\n     * Finds subject where entity like given subject's database entity.\n     * Comparision made by entity id.\n     */\n    protected findByDatabaseEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\n        return this.operateSubjects.find(subject => {\n            if (!subject.hasDatabaseEntity)\n                return false;\n\n            return subject.entityTarget === entityTarget && subject.metadata.compareEntities(subject.databaseEntity, entity);\n        });\n    }\n\n    /**\n     * Groups given Subject objects into groups separated by entity targets.\n     */\n    protected groupByEntityTargets(): { target: Function|string, subjects: Subject[] }[] {\n        return this.operateSubjects.reduce((groups, operatedEntity) => {\n            let group = groups.find(group => group.target === operatedEntity.entityTarget);\n            if (!group) {\n                group = { target: operatedEntity.entityTarget, subjects: [] };\n                groups.push(group);\n            }\n            group.subjects.push(operatedEntity);\n            return groups;\n        }, [] as { target: Function|string, subjects: Subject[] }[]);\n    }\n\n}","/**\n * Utils to help to work with Promise objects.\n */\nexport class PromiseUtils {\n\n    /**\n     * Runs given callback that returns promise for each item in the given collection in order.\n     * Operations executed after each other, right after previous promise being resolved.\n     */\n    static runInSequence<T, U>(collection: T[], callback: (item: T) => Promise<U>): Promise<U[]> {\n        const results: U[] = [];\n        return collection.reduce((promise, item) => {\n            return promise.then(() => {\n                return callback(item);\n            }).then(result => {\n                results.push(result);\n            });\n        }, Promise.resolve()).then(() => {\n            return results;\n        });\n    }\n\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\n\n/**\n * UpdateEvent is an object that broadcaster sends to the entity subscriber when entity is being updated in the database.\n */\nexport interface UpdateEvent<Entity> {\n\n    /**\n     * Entity managed with connection used for original event.\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\n     */\n    manager: EntityManager;\n\n    /**\n     * Updating entity.\n     */\n    entity: Entity;\n\n    /**\n     * Updating entity in the database.\n     */\n    databaseEntity: Entity;\n\n    /**\n     * List of updated columns.\n     */\n    updatedColumns: ColumnMetadata[];\n\n    /**\n     * List of updated relations.\n     */\n    updatedRelations: RelationMetadata[];\n\n    // todo: send old and new update values\n    // todo: send updated relations?\n\n}","import {EntityManager} from \"../../entity-manager/EntityManager\";\n\n/**\n * RemoveEvent is an object that broadcaster sends to the entity subscriber when entity is being removed to the database.\n */\nexport interface RemoveEvent<Entity> {\n\n    /**\n     * Entity managed with connection used for original event.\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\n     */\n    manager: EntityManager;\n\n    /**\n     * Entity that is being removed.\n     * This may absent if entity is removed without being loaded (for examples by cascades).\n     */\n    entity?: Entity;\n\n    /**\n     * Database representation of entity that is being removed.\n     */\n    databaseEntity: Entity;\n\n    /**\n     * Id or ids of the entity that is being removed.\n     */\n    entityId?: any;\n\n}","import {EntityManager} from \"../../entity-manager/EntityManager\";\n\n/**\n * InsertEvent is an object that broadcaster sends to the entity subscriber when entity is inserted to the database.\n */\nexport interface InsertEvent<Entity> {\n\n    /**\n     * Entity managed with connection used for original event.\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\n     */\n    manager: EntityManager;\n\n    /**\n     * Inserting event.\n     */\n    entity: Entity;\n\n}","import {UpdateEvent} from \"./event/UpdateEvent\";\nimport {RemoveEvent} from \"./event/RemoveEvent\";\nimport {InsertEvent} from \"./event/InsertEvent\";\n\n/**\n * Classes that implement this interface are subscribers that subscribe for the specific events in the ORM.\n */\nexport interface EntitySubscriberInterface<Entity> {\n\n    /**\n     * Returns the class of the entity to which events will listen.\n     * If this method is omitted, then subscriber will listen to events of all entities.\n     */\n    listenTo?(): Function;\n\n    /**\n     * Called after entity is loaded from the database.\n     */\n    afterLoad?(entity: Entity): Promise<any>|void;\n\n    /**\n     * Called before entity is inserted to the database.\n     */\n    beforeInsert?(event: InsertEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called after entity is inserted to the database.\n     */\n    afterInsert?(event: InsertEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called before entity is updated in the database.\n     */\n    beforeUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called after entity is updated in the database.\n     */\n    afterUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called before entity is removed from the database.\n     */\n    beforeRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called after entity is removed from the database.\n     */\n    afterRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\n\n}","/**\n * All types that entity listener can be.\n */\nexport type EventListenerType = \"after-load\"|\"before-insert\"|\"after-insert\"|\"before-update\"|\"after-update\"|\"before-remove\"|\"after-remove\";\n\n/**\n * Provides a constants for each entity listener type.\n */\nexport class EventListenerTypes {\n    static AFTER_LOAD: EventListenerType = \"after-load\";\n    static BEFORE_INSERT: EventListenerType = \"before-insert\";\n    static AFTER_INSERT: EventListenerType = \"after-insert\";\n    static BEFORE_UPDATE: EventListenerType = \"before-update\";\n    static AFTER_UPDATE: EventListenerType = \"after-update\";\n    static BEFORE_REMOVE: EventListenerType = \"before-remove\";\n    static AFTER_REMOVE: EventListenerType = \"after-remove\";\n}","import {EventListenerType} from \"../metadata/types/EventListenerTypes\";\n\n/**\n * Arguments for EntityListenerMetadata class.\n */\nexport interface EntityListenerMetadataArgs {\n\n    /**\n     * Class to which listener is applied.\n     */\n    readonly target: Function;\n\n    /**\n     * Class's property name to which listener is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * The type of the listener.\n     */\n    readonly type: EventListenerType;\n\n}\n","import {EventListenerType} from \"./types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../metadata-args/EntityListenerMetadataArgs\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n\n    // ---------------------------------------------------------------------\n    // Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * The type of the listener.\n     */\n    type: EventListenerType;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: EntityListenerMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.type = args.type;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    isAllowed(entity: ObjectLiteral) { // todo: create in entity metadata method like isInherited?\n        return this.target === entity.constructor || // todo: .constructor won't work for entity schemas\n            (this.target instanceof Function && entity.constructor.prototype instanceof this.target); // todo: also need to implement entity schema inheritance\n    }\n\n}","import {EntitySubscriberInterface} from \"./EntitySubscriberInterface\";\nimport {EventListenerTypes} from \"../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Subject} from \"../persistence/Subject\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\n\n/**\n * Broadcaster provides a helper methods to broadcast events to the subscribers.\n */\nexport class Broadcaster {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\" events for all given subjects.\n     */\n    async broadcastBeforeEventsForAll(entityManager: EntityManager, insertSubjects: Subject[], updateSubjects: Subject[], removeSubjects: Subject[]): Promise<void> {\n        const insertPromises = insertSubjects.map(subject => this.broadcastBeforeInsertEvent(entityManager, subject));\n        const updatePromises = updateSubjects.map(subject => this.broadcastBeforeUpdateEvent(entityManager, subject));\n        const removePromises = removeSubjects.map(subject => this.broadcastBeforeRemoveEvent(entityManager, subject));\n        const allPromises = insertPromises.concat(updatePromises).concat(removePromises);\n        await Promise.all(allPromises);\n    }\n\n    /**\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\" events for all given subjects.\n     */\n    async broadcastAfterEventsForAll(entityManager: EntityManager, insertSubjects: Subject[], updateSubjects: Subject[], removeSubjects: Subject[]): Promise<void> {\n        const insertPromises = insertSubjects.map(subject => this.broadcastAfterInsertEvent(entityManager, subject));\n        const updatePromises = updateSubjects.map(subject => this.broadcastAfterUpdateEvent(entityManager, subject));\n        const removePromises = removeSubjects.map(subject => this.broadcastAfterRemoveEvent(entityManager, subject));\n        const allPromises = insertPromises.concat(updatePromises).concat(removePromises);\n        await Promise.all(allPromises);\n    }\n\n    /**\n     * Broadcasts \"BEFORE_INSERT\" event.\n     * Before insert event is executed before entity is being inserted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastBeforeInsertEvent(manager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = subject.metadata.listeners\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_INSERT && listener.isAllowed(subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]()); // getValue() ?\n\n        const subscribers = this.connection.subscribers\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.beforeInsert)\n            .map(subscriber => subscriber.beforeInsert!({\n                manager: manager,\n                entity: subject.entity\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"BEFORE_UPDATE\" event.\n     * Before update event is executed before entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastBeforeUpdateEvent(manager: EntityManager, subject: Subject): Promise<void> { // todo: send relations too?\n\n        const listeners = subject.metadata.listeners\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_UPDATE && listener.isAllowed(subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]());\n\n        const subscribers = this.connection.subscribers\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.beforeUpdate)\n            .map(subscriber => subscriber.beforeUpdate!({\n                manager: manager,\n                entity: subject.entity,\n                databaseEntity: subject.databaseEntity,\n                updatedColumns: subject.diffColumns,\n                updatedRelations: subject.diffRelations,\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"BEFORE_REMOVE\" event.\n     * Before remove event is executed before entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastBeforeRemoveEvent(manager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = subject.metadata.listeners\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_REMOVE && listener.isAllowed(subject.entity))\n            .map(entityListener => subject.databaseEntity[entityListener.propertyName]());\n\n        const subscribers = this.connection.subscribers\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.beforeRemove)\n            .map(subscriber => subscriber.beforeRemove!({\n                manager: manager,\n                entity: subject.hasEntity ? subject.entity : undefined,\n                databaseEntity: subject.databaseEntity,\n                entityId: subject.metadata.getEntityIdMixedMap(subject.databaseEntity)\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"AFTER_INSERT\" event.\n     * After insert event is executed after entity is being persisted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastAfterInsertEvent(manager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = subject.metadata.listeners\n            .filter(listener => listener.type === EventListenerTypes.AFTER_INSERT && listener.isAllowed(subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]());\n\n        const subscribers = this.connection.subscribers\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.afterInsert)\n            .map(subscriber => subscriber.afterInsert!({\n                manager: manager,\n                entity: subject.entity\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"AFTER_UPDATE\" event.\n     * After update event is executed after entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastAfterUpdateEvent(manager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = subject.metadata.listeners\n            .filter(listener => listener.type === EventListenerTypes.AFTER_UPDATE && listener.isAllowed(subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]());\n\n        const subscribers = this.connection.subscribers\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.afterUpdate)\n            .map(subscriber => subscriber.afterUpdate!({\n                manager: manager,\n                entity: subject.entity,\n                databaseEntity: subject.databaseEntity,\n                updatedColumns: subject.diffColumns,\n                updatedRelations: subject.diffRelations,\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"AFTER_REMOVE\" event.\n     * After remove event is executed after entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastAfterRemoveEvent(manager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = subject.metadata.listeners\n            .filter(listener => listener.type === EventListenerTypes.AFTER_REMOVE && listener.isAllowed(subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]());\n\n        const subscribers = this.connection.subscribers\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.afterRemove)\n            .map(subscriber => subscriber.afterRemove!({\n                manager: manager,\n                entity: subject.hasEntity ? subject.entity : undefined,\n                databaseEntity: subject.databaseEntity,\n                entityId: subject.metadata.getEntityIdMixedMap(subject.databaseEntity)\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"AFTER_LOAD\" event for all given entities, and their sub-entities.\n     * After load event is executed after entity has been loaded from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastLoadEventsForAll(target: Function|string, entities: ObjectLiteral[]): Promise<void> {\n        await Promise.all(entities.map(entity => this.broadcastLoadEvents(target, entity)));\n    }\n\n    /**\n     * Broadcasts \"AFTER_LOAD\" event for the given entity and all its sub-entities.\n     * After load event is executed after entity has been loaded from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastLoadEvents(target: Function|string, entity: ObjectLiteral): Promise<void> {\n        if (entity instanceof Promise) // todo: check why need this?\n            return;\n\n        // collect load events for all children entities that were loaded with the main entity\n        const children = this.connection.getMetadata(target).relations.reduce((promises, relation) => {\n            if (!entity.hasOwnProperty(relation.propertyName))\n                return promises;\n\n            const value = relation.getEntityValue(entity);\n            if (value instanceof Array) {\n                promises = promises.concat(this.broadcastLoadEventsForAll(relation.inverseEntityMetadata.target!, value));\n            } else if (value) {\n                promises.push(this.broadcastLoadEvents(relation.inverseEntityMetadata.target!, value));\n            }\n\n            return promises;\n        }, [] as Promise<void>[]);\n\n        const listeners = this.connection.getMetadata(target).listeners\n            .filter(listener => listener.type === EventListenerTypes.AFTER_LOAD && listener.isAllowed(entity))\n            .map(listener => entity[listener.propertyName]());\n\n        const subscribers = this.connection.subscribers\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, target) && subscriber.afterLoad)\n            .map(subscriber => subscriber.afterLoad!(entity));\n\n        await Promise.all(children.concat(listeners.concat(subscribers)));\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,\n     * or listens our entity.\n     */\n    protected isAllowedSubscriber(subscriber: EntitySubscriberInterface<any>, target: Function|string): boolean {\n        return  !subscriber.listenTo ||\n                !subscriber.listenTo() ||\n                subscriber.listenTo() === Object ||\n                subscriber.listenTo() === target;\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {JunctionInsert, JunctionRemove, Subject} from \"./Subject\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\n\n/**\n * Executes all database operations (inserts, updated, deletes) that must be executed\n * with given persistence subjects.\n */\nexport class SubjectOperationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * All subjects that needs to be operated.\n     */\n    protected allSubjects: Subject[];\n\n    /**\n     * Subjects that must be inserted.\n     */\n    protected insertSubjects: Subject[];\n\n    /**\n     * Subjects that must be updated.\n     */\n    protected updateSubjects: Subject[];\n\n    /**\n     * Subjects that must be removed.\n     */\n    protected removeSubjects: Subject[];\n\n    /**\n     * Subjects which relations should be updated.\n     */\n    protected relationUpdateSubjects: Subject[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected transactionEntityManager: EntityManager,\n                protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes all operations over given array of subjects.\n     * Executes queries using given query runner.\n     */\n    async execute(subjects: Subject[]): Promise<void> {\n\n        /*subjects.forEach(subject => {\n            console.log(subject.entity);\n            console.log(\"mustBeInserted: \", subject.mustBeInserted);\n            console.log(\"mustBeUpdated: \", subject.mustBeUpdated);\n            console.log(\"mustBeRemoved: \", subject.mustBeRemoved);\n        });*/\n\n        // validate all subjects first\n        subjects.forEach(subject => subject.validate());\n\n        // set class properties for easy use\n        this.allSubjects = subjects;\n        this.insertSubjects = subjects.filter(subject => subject.mustBeInserted);\n        this.updateSubjects = subjects.filter(subject => subject.mustBeUpdated);\n        this.removeSubjects = subjects.filter(subject => subject.mustBeRemoved);\n        this.relationUpdateSubjects = subjects.filter(subject => subject.hasRelationUpdates);\n\n        // if there are no operations to execute then don't need to do something including opening a transaction\n        if (!this.insertSubjects.length &&\n            !this.updateSubjects.length &&\n            !this.removeSubjects.length &&\n            !this.relationUpdateSubjects.length &&\n            subjects.every(subject => !subject.junctionInserts.length) &&\n            subjects.every(subject => !subject.junctionRemoves.length))\n            return;\n\n        // start execute queries in a transaction\n        // if transaction is already opened in this query runner then we don't touch it\n        // if its not opened yet then we open it here, and once we finish - we close it\n        let isTransactionStartedByItself = false;\n        try {\n\n            // open transaction if its not opened yet\n            if (!this.queryRunner.isTransactionActive) {\n                isTransactionStartedByItself = true;\n                await this.queryRunner.startTransaction();\n            }\n\n            // broadcast \"before\" events before we start updating\n            const broadcaster = new Broadcaster(this.connection);\n            await broadcaster.broadcastBeforeEventsForAll(this.transactionEntityManager, this.insertSubjects, this.updateSubjects, this.removeSubjects);\n\n            // since events can trigger some internal changes (for example update depend property) we need to perform some re-computations here\n            this.updateSubjects.forEach(subject => subject.recompute());\n\n            await this.executeInsertOperations();\n            await this.executeInsertClosureTableOperations();\n            await this.executeInsertJunctionsOperations();\n            await this.executeRemoveJunctionsOperations();\n            await this.executeUpdateOperations();\n            await this.executeUpdateRelations();\n            await this.executeRemoveOperations();\n\n            // commit transaction if it was started by us\n            if (isTransactionStartedByItself === true)\n                await this.queryRunner.commitTransaction();\n\n            // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n            await this.updateSpecialColumnsInPersistedEntities();\n\n            // finally broadcast \"after\" events\n            // note that we are broadcasting events after commit because we want to have ids of the entities inside them to be available in subscribers\n            await broadcaster.broadcastAfterEventsForAll(this.transactionEntityManager, this.insertSubjects, this.updateSubjects, this.removeSubjects);\n\n        } catch (error) {\n\n            // rollback transaction if it was started by us\n            if (isTransactionStartedByItself) {\n                try {\n                    await this.queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw error;\n        }\n\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Insertion\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes insert operations.\n     *\n     * For insertion we separate two groups of entities:\n     * - first group of entities are entities which do not have any relations\n     *      or entities which do not have any non-nullable relation\n     * - second group of entities are entities which does have non-nullable relations\n     *\n     * Insert process of the entities from the first group which can only have nullable relations are actually a two-step process:\n     * - first we insert entities without their relations, explicitly left them NULL\n     * - later we update inserted entity once again with id of the object inserted with it\n     *\n     * Yes, two queries are being executed, but this is by design.\n     * There is no better way to solve this problem and others at the same time.\n     *\n     * Insert process of the entities from the second group which can have only non nullable relations is a single-step process:\n     * - we simply insert all entities and get into attention all its dependencies which were inserted in the first group\n     */\n    private async executeInsertOperations(): Promise<void> {\n\n        // separate insert entities into groups:\n\n        // TODO: current ordering mechanism is bad. need to create a correct order in which entities should be persisted, need to build a dependency graph\n\n        // first group of subjects are subjects without any non-nullable column\n        // we need to insert first such entities because second group entities may rely on those entities.\n        const firstInsertSubjects = this.insertSubjects.filter(subject => !subject.metadata.hasNonNullableRelations);\n\n        // second group - are all other subjects\n        // since in this group there are non nullable columns, some of them may depend on value of the\n        // previously inserted entity (which only can be entity with all nullable columns)\n        const secondInsertSubjects = this.insertSubjects.filter(subject => subject.metadata.hasNonNullableRelations);\n\n        // note: these operations should be executed in sequence, not in parallel\n        // because second group depend of obtained data from the first group\n        await Promise.all(firstInsertSubjects.map(subject => this.insert(subject, [])));\n        await Promise.all(secondInsertSubjects.map(subject => this.insert(subject, firstInsertSubjects)));\n\n        // we need to update relation ids of the newly inserted objects (where we inserted NULLs in relations)\n        // once we inserted all entities, we need to update relations which were bind to inserted entities.\n        // For example we have a relation many-to-one Post<->Category. Relation is nullable.\n        // New category was set to the new post and post where persisted.\n        // Here this method executes two inserts: one for post, one for category,\n        // but category in post is inserted with \"null\".\n        // now we need to update post table - set category with a newly persisted category id.\n        const updatePromises: Promise<any>[] = [];\n        firstInsertSubjects.forEach(subject => {\n\n            // first update relations with join columns (one-to-one owner and many-to-one relations)\n            const updateOptions: ObjectLiteral = {};\n            subject.metadata.relationsWithJoinColumns.forEach(relation => {\n                relation.joinColumns.forEach(joinColumn => {\n                    const referencedColumn = joinColumn.referencedColumn!;\n                    const relatedEntity = relation.getEntityValue(subject.entity);\n\n                    // if relation value is not set then nothing to do here\n                    if (!relatedEntity)\n                        return;\n\n                    // check if relation reference column is a relation\n                    let relationId: any;\n                    const columnRelation = relation.inverseEntityMetadata.findRelationWithPropertyPath(joinColumn.referencedColumn!.propertyPath);\n                    if (columnRelation) { // if referenced column is a relation\n                        const insertSubject = this.insertSubjects.find(insertedSubject => insertedSubject.entity === referencedColumn.getEntityValue(relatedEntity));\n\n                        // if this relation was just inserted\n                        if (insertSubject) {\n\n                            // check if we have this relation id already\n                            relationId = columnRelation.getEntityValue(referencedColumn.getEntityValue(relatedEntity));\n                            if (!relationId) {\n\n                                // if we don't have relation id then use special values\n                                if (referencedColumn.isGenerated) {\n                                    relationId = insertSubject.newlyGeneratedId;\n\n                                } else if (referencedColumn.isObjectId) {\n                                    relationId = insertSubject.generatedObjectId;\n\n                                }\n                                // todo: handle other special types too\n                            }\n                        }\n\n                    } else { // if referenced column is a simple non relational column\n                        const insertSubject = this.insertSubjects.find(insertedSubject => insertedSubject.entity === relatedEntity);\n\n                        // if this relation was just inserted\n                        if (insertSubject) {\n\n                            // check if we have this relation id already\n                            relationId = referencedColumn.getEntityValue(relatedEntity);\n                            if (!relationId) {\n\n                                // if we don't have relation id then use special values\n                                if (referencedColumn.isGenerated) {\n                                    relationId = insertSubject.newlyGeneratedId;\n\n                                } else if (referencedColumn.isObjectId) {\n                                    relationId = insertSubject.generatedObjectId;\n                                }\n                                // todo: handle other special types too\n                            }\n                        }\n\n                    }\n\n                    if (relationId) {\n                        updateOptions[joinColumn.databaseName] = relationId;\n                    }\n\n                });\n            });\n\n            // if we found relations which we can update - then update them\n            if (Object.keys(updateOptions).length > 0 /*&& subject.hasEntity*/) {\n                // const relatedEntityIdMap = subject.getPersistedEntityIdMap; // todo: this works incorrectly\n\n                const columns = subject.metadata.parentEntityMetadata ? subject.metadata.primaryColumns : subject.metadata.primaryColumns;\n                const conditions: ObjectLiteral = {};\n\n                columns.forEach(column => {\n                    const entityValue = column.getEntityValue(subject.entity);\n\n                    // if entity id is a relation, then extract referenced column from that relation\n                    const columnRelation = subject.metadata.relations.find(relation => relation.propertyName === column.propertyName);\n\n                    if (entityValue && columnRelation) { // not sure if we need handle join column from inverse side\n                        columnRelation.joinColumns.forEach(joinColumn => {\n                            let relationIdOfEntityValue = entityValue[joinColumn.referencedColumn!.propertyName];\n                            if (!relationIdOfEntityValue) {\n                                const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === entityValue);\n                                if (entityValueInsertSubject) {\n                                    if (joinColumn.referencedColumn!.isGenerated) {\n                                        relationIdOfEntityValue = entityValueInsertSubject.newlyGeneratedId;\n\n                                    } else if (joinColumn.referencedColumn!.isObjectId) {\n                                        relationIdOfEntityValue = entityValueInsertSubject.generatedObjectId;\n\n                                    }\n                                }\n                            }\n                            if (relationIdOfEntityValue) {\n                                conditions[column.databaseName] = relationIdOfEntityValue;\n                            }\n                        });\n\n                    } else {\n                        if (entityValue) {\n                            conditions[column.databaseName] = entityValue;\n                        } else {\n                            if (subject.newlyGeneratedId) {\n                                conditions[column.databaseName] = subject.newlyGeneratedId;\n\n                            } else if (subject.generatedObjectId) {\n                                conditions[column.databaseName] = subject.generatedObjectId;\n                            }\n                        }\n                    }\n                });\n                if (!Object.keys(conditions).length)\n                    return;\n\n\n\n                const updatePromise = this.queryRunner.update(subject.metadata.tableName, updateOptions, conditions);\n                updatePromises.push(updatePromise);\n            }\n\n            // we need to update relation ids if newly inserted objects are used from inverse side in one-to-many inverse relation\n            // we also need to update relation ids if newly inserted objects are used from inverse side in one-to-one inverse relation\n            const oneToManyAndOneToOneNonOwnerRelations = subject.metadata.oneToManyRelations.concat(subject.metadata.oneToOneRelations.filter(relation => !relation.isOwning));\n            // console.log(oneToManyAndOneToOneNonOwnerRelations);\n            subject.metadata.extractRelationValuesFromEntity(subject.entity, oneToManyAndOneToOneNonOwnerRelations)\n                .forEach(([relation, subRelatedEntity, inverseEntityMetadata]) => {\n                    relation.inverseRelation!.joinColumns.forEach(joinColumn => {\n\n                        const referencedColumn = joinColumn.referencedColumn!;\n                        const columns = inverseEntityMetadata.parentEntityMetadata ? inverseEntityMetadata.primaryColumns : inverseEntityMetadata.primaryColumns;\n                        const conditions: ObjectLiteral = {};\n\n                        columns.forEach(column => {\n                            const entityValue = column.getEntityValue(subRelatedEntity);\n\n                            // if entity id is a relation, then extract referenced column from that relation\n                            const columnRelation = inverseEntityMetadata.relations.find(relation => relation.propertyName === column.propertyName);\n\n                            if (entityValue && columnRelation) { // not sure if we need handle join column from inverse side\n                                columnRelation.joinColumns.forEach(columnRelationJoinColumn => {\n                                    let relationIdOfEntityValue = entityValue[columnRelationJoinColumn.referencedColumn!.propertyName];\n                                    if (!relationIdOfEntityValue) {\n                                        const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === entityValue);\n                                        if (entityValueInsertSubject) {\n                                            if (columnRelationJoinColumn.referencedColumn!.isGenerated) {\n                                                relationIdOfEntityValue = entityValueInsertSubject.newlyGeneratedId;\n\n                                            } else if (columnRelationJoinColumn.referencedColumn!.isObjectId) {\n                                                relationIdOfEntityValue = entityValueInsertSubject.generatedObjectId;\n                                            }\n                                        }\n                                    }\n                                    if (relationIdOfEntityValue) {\n                                        conditions[column.databaseName] = relationIdOfEntityValue;\n                                    }\n                                });\n\n                            } else {\n                                const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === subRelatedEntity);\n                                if (entityValue) {\n                                    conditions[column.databaseName] = entityValue;\n                                } else {\n                                    if (entityValueInsertSubject && entityValueInsertSubject.newlyGeneratedId) {\n                                        conditions[column.databaseName] = entityValueInsertSubject.newlyGeneratedId;\n\n                                    } else if (entityValueInsertSubject && entityValueInsertSubject.generatedObjectId) {\n                                        conditions[column.databaseName] = entityValueInsertSubject.generatedObjectId;\n\n                                    }\n                                }\n                            }\n                        });\n\n                        if (!Object.keys(conditions).length)\n                            return;\n\n                        const updateOptions: ObjectLiteral = {};\n                        const columnRelation = relation.inverseEntityMetadata.relations.find(rel => rel.propertyName === referencedColumn.propertyName);\n                        const columnValue = referencedColumn.getEntityValue(subject.entity);\n                        if (columnRelation) {\n                            let id = columnRelation.getEntityValue(columnValue);\n                            if (!id) {\n                                const insertSubject = this.insertSubjects.find(subject => subject.entity === columnValue);\n                                if (insertSubject) {\n                                    if (insertSubject.newlyGeneratedId) {\n                                        id = insertSubject.newlyGeneratedId;\n\n                                    } else if (insertSubject.generatedObjectId) {\n                                        id = insertSubject.generatedObjectId;\n                                    }\n                                }\n                            }\n                            updateOptions[joinColumn.databaseName] = id;\n                        } else {\n                            updateOptions[joinColumn.databaseName] = columnValue || subject.newlyGeneratedId || subRelatedEntity.generatedObjectId;\n                        }\n\n                        const updatePromise = this.queryRunner.update(relation.inverseEntityMetadata.tableName, updateOptions, conditions);\n                        updatePromises.push(updatePromise);\n\n                    });\n                });\n\n        });\n\n        await Promise.all(updatePromises);\n\n        // todo: make sure to search in all insertSubjects during updating too if updated entity uses links to the newly persisted entity\n    }\n\n    /**\n     * Inserts an entity from the given insert operation into the database.\n     * If entity has an generated column, then after saving new generated value will be stored to the InsertOperation.\n     * If entity uses class-table-inheritance, then multiple inserts may by performed to save all entities.\n     */\n    private async insert(subject: Subject, alreadyInsertedSubjects: Subject[]): Promise<any> {\n\n        const parentEntityMetadata = subject.metadata.parentEntityMetadata;\n        const metadata = subject.metadata;\n        const entity = subject.entity;\n        let newlyGeneratedId: any, parentGeneratedId: any;\n\n        // if entity uses class table inheritance then we need to separate entity into sub values that will be inserted into multiple tables\n        if (metadata.isClassTableChild) { // todo: with current implementation inheritance of multiple class table children will not work\n\n            // first insert entity values into parent class table\n            const parentValuesMap = this.collectColumnsAndValues(parentEntityMetadata, entity, subject.date, undefined, metadata.discriminatorValue, alreadyInsertedSubjects);\n            newlyGeneratedId = parentGeneratedId = await this.queryRunner.insert(parentEntityMetadata.tableName, parentValuesMap, parentEntityMetadata.generatedColumn);\n\n            // second insert entity values into child class table\n            const childValuesMap = this.collectColumnsAndValues(metadata, entity, subject.date, newlyGeneratedId, undefined, alreadyInsertedSubjects);\n            const secondGeneratedId = await this.queryRunner.insert(metadata.tableName, childValuesMap, metadata.generatedColumn);\n            if (!newlyGeneratedId && secondGeneratedId) newlyGeneratedId = secondGeneratedId;\n\n        } else { // in the case when class table inheritance is not used\n\n            const valuesMap = this.collectColumnsAndValues(metadata, entity, subject.date, undefined, undefined, alreadyInsertedSubjects);\n            newlyGeneratedId = await this.queryRunner.insert(metadata.tableName, valuesMap, metadata.generatedColumn);\n        }\n\n        if (parentGeneratedId)\n            subject.parentGeneratedId = parentGeneratedId;\n\n        // todo: better if insert method will return object with all generated ids, object id, etc.\n        if (newlyGeneratedId) {\n            if (metadata.generatedColumn) {\n                subject.newlyGeneratedId = newlyGeneratedId;\n\n            } else if (metadata.objectIdColumn) {\n                subject.generatedObjectId = newlyGeneratedId;\n\n            }\n        }\n    }\n\n    private collectColumns(columns: ColumnMetadata[], entity: ObjectLiteral, object: ObjectLiteral) {\n        columns.forEach(column => {\n            if (column.isVirtual || column.isParentId || column.isDiscriminator)\n                return;\n\n            const value = entity[column.propertyName];\n            if (value === undefined)\n                return;\n\n            object[column.databaseNameWithoutPrefixes] = this.connection.driver.preparePersistentValue(value, column); // todo: maybe preparePersistentValue is not responsibility of this class\n        });\n    }\n\n    private collectEmbeds(embed: EmbeddedMetadata, entity: ObjectLiteral, object: ObjectLiteral) {\n\n        if (embed.isArray) {\n            if (entity[embed.propertyName] instanceof Array) {\n                if (!object[embed.prefix])\n                    object[embed.prefix] = [];\n\n                entity[embed.propertyName].forEach((subEntity: any, index: number) => {\n                    if (!object[embed.prefix][index])\n                        object[embed.prefix][index] = {};\n                    this.collectColumns(embed.columns, subEntity, object[embed.prefix][index]);\n                    embed.embeddeds.forEach(childEmbed => this.collectEmbeds(childEmbed, subEntity, object[embed.prefix][index]));\n                });\n            }\n        } else {\n            if (entity[embed.propertyName] !== undefined) {\n                if (!object[embed.prefix])\n                    object[embed.prefix] = {};\n                this.collectColumns(embed.columns, entity[embed.propertyName], object[embed.prefix]);\n                embed.embeddeds.forEach(childEmbed => this.collectEmbeds(childEmbed, entity[embed.propertyName], object[embed.prefix]));\n            }\n        }\n    }\n\n    /**\n     * Collects columns and values for the insert operation.\n     */\n    private collectColumnsAndValues(metadata: EntityMetadata, entity: ObjectLiteral, date: Date, parentIdColumnValue: any, discriminatorValue: any, alreadyInsertedSubjects: Subject[]): ObjectLiteral {\n\n        const values: ObjectLiteral = {};\n\n        if (this.connection.driver instanceof MongoDriver) {\n            this.collectColumns(metadata.ownColumns, entity, values);\n            metadata.embeddeds.forEach(embed => this.collectEmbeds(embed, entity, values));\n\n        } else {\n            metadata.columns.forEach(column => {\n                if (column.isVirtual || column.isParentId || column.isDiscriminator)\n                    return;\n\n                const value = column.getEntityValue(entity);\n                if (value === null || value === undefined) // todo: probably check for null should not be there\n                    return;\n\n                values[column.databaseName] = this.connection.driver.preparePersistentValue(value, column); // todo: maybe preparePersistentValue is not responsibility of this class\n            });\n        }\n\n        metadata.relationsWithJoinColumns.forEach(relation => {\n            relation.joinColumns.forEach(joinColumn => {\n\n                let relationValue: any;\n                const value = relation.getEntityValue(entity);\n\n                if (value) {\n                    // if relation value is stored in the entity itself then use it from there\n                    const relationId = joinColumn.referencedColumn!.getEntityValue(value); // relation.getInverseEntityRelationId(value); // todo: check it\n                    if (relationId) {\n                        relationValue = relationId;\n                    }\n\n                    // otherwise try to find relational value from just inserted subjects\n                    const alreadyInsertedSubject = alreadyInsertedSubjects.find(insertedSubject => {\n                        return insertedSubject.entity === value;\n                    });\n                    if (alreadyInsertedSubject) {\n                        const referencedColumn = joinColumn.referencedColumn!;\n                        // if join column references to the primary generated column then seek in the newEntityId of the insertedSubject\n                        if (referencedColumn.referencedColumn && referencedColumn.referencedColumn!.isGenerated) {\n                            if (referencedColumn.isParentId) {\n                                relationValue = alreadyInsertedSubject.parentGeneratedId;\n                            }\n                            // todo: what if reference column is not generated?\n                            // todo: what if reference column is not related to table inheritance?\n                        }\n\n                        if (referencedColumn.isGenerated)\n                            relationValue = alreadyInsertedSubject.newlyGeneratedId;\n                        if (referencedColumn.isObjectId)\n                            relationValue = alreadyInsertedSubject.generatedObjectId;\n                        // if it references to create or update date columns\n                        if (referencedColumn.isCreateDate || referencedColumn.isUpdateDate)\n                            relationValue = this.connection.driver.preparePersistentValue(alreadyInsertedSubject.date, referencedColumn);\n                        // if it references to version column\n                        if (referencedColumn.isVersion)\n                            relationValue = this.connection.driver.preparePersistentValue(1, referencedColumn);\n                    }\n                } else if (relation.inverseRelation) {\n                    const inverseSubject = this.allSubjects.find(subject => {\n                        if (!subject.hasEntity || subject.entityTarget !== relation.inverseRelation!.target)\n                            return false;\n\n                        const inverseRelationValue = relation.inverseRelation!.getEntityValue(subject.entity);\n                        if (inverseRelationValue) {\n                            if (inverseRelationValue instanceof Array) {\n                                return inverseRelationValue.find(subValue => subValue === subValue);\n                            } else {\n                                return inverseRelationValue === entity;\n                            }\n                        }\n                    });\n                    if (inverseSubject && joinColumn.referencedColumn!.getEntityValue(inverseSubject.entity)) {\n                        relationValue = joinColumn.referencedColumn!.getEntityValue(inverseSubject.entity);\n                    }\n                }\n\n                if (relationValue) {\n                    values[joinColumn.databaseName] = relationValue;\n                }\n\n            });\n        });\n\n        // add special column and value - date of creation\n        if (metadata.createDateColumn) {\n            const value = this.connection.driver.preparePersistentValue(date, metadata.createDateColumn);\n            values[metadata.createDateColumn.databaseName] = value;\n        }\n\n        // add special column and value - date of updating\n        if (metadata.updateDateColumn) {\n            const value = this.connection.driver.preparePersistentValue(date, metadata.updateDateColumn);\n            values[metadata.updateDateColumn.databaseName] = value;\n        }\n\n        // add special column and value - version column\n        if (metadata.versionColumn) {\n            const value = this.connection.driver.preparePersistentValue(1, metadata.versionColumn);\n            values[metadata.versionColumn.databaseName] = value;\n        }\n\n        // add special column and value - discriminator value (for tables using table inheritance)\n        if (metadata.discriminatorColumn) {\n            const value = this.connection.driver.preparePersistentValue(discriminatorValue || metadata.discriminatorValue, metadata.discriminatorColumn);\n            values[metadata.discriminatorColumn.databaseName] = value;\n        }\n\n        // add special column and value - tree level and tree parents (for tree-type tables)\n        if (metadata.treeLevelColumn && metadata.treeParentRelation) {\n            const parentEntity = metadata.treeParentRelation.getEntityValue(entity);\n            const parentLevel = parentEntity ? (metadata.treeLevelColumn.getEntityValue(parentEntity) || 0) : 0;\n\n            values[metadata.treeLevelColumn.databaseName] = parentLevel + 1;\n        }\n\n        // add special column and value - parent id column (for tables using table inheritance)\n        if (metadata.parentEntityMetadata && metadata.parentIdColumns.length) { // todo: should be array of primary keys\n            values[metadata.parentIdColumns[0].databaseName] = parentIdColumnValue || metadata.parentEntityMetadata.primaryColumns[0].getEntityValue(entity);\n        }\n\n        return values;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Insertion into closure tables\n    // -------------------------------------------------------------------------\n\n    /**\n     * Inserts all given subjects into closure table.\n     */\n    private executeInsertClosureTableOperations(/*, updatesByRelations: Subject[]*/) { // todo: what to do with updatesByRelations\n        const promises = this.insertSubjects\n            .filter(subject => subject.metadata.isClosure)\n            .map(async subject => {\n                // const relationsUpdateMap = this.findUpdateOperationForEntity(updatesByRelations, insertSubjects, subject.entity);\n                // subject.treeLevel = await this.insertIntoClosureTable(subject, relationsUpdateMap);\n                await this.insertClosureTableValues(subject);\n            });\n        return Promise.all(promises);\n    }\n\n    /**\n     * Inserts given subject into closure table.\n     */\n    private async insertClosureTableValues(subject: Subject): Promise<void> {\n        // todo: since closure tables do not support compose primary keys - throw an exception?\n        // todo: what if parent entity or parentEntityId is empty?!\n        const tableName = subject.metadata.closureJunctionTable.tableName;\n        const referencedColumn = subject.metadata.treeParentRelation!.joinColumns[0].referencedColumn!; // todo: check if joinColumn works\n        // todo: fix joinColumns[0] usage\n\n        let newEntityId = referencedColumn.getEntityValue(subject.entity);\n        if (!newEntityId && referencedColumn.isGenerated) {\n            newEntityId = subject.newlyGeneratedId;\n            // we should not handle object id here because closure tables are not supported by mongodb driver.\n        } // todo: implement other special column types too\n\n        const parentEntity = subject.metadata.treeParentRelation!.getEntityValue(subject.entity);\n        let parentEntityId: any = 0; // zero is important\n        if (parentEntity) {\n            parentEntityId = referencedColumn.getEntityValue(parentEntity);\n            if (!parentEntityId && referencedColumn.isGenerated) {\n                const parentInsertedSubject = this.insertSubjects.find(subject => subject.entity === parentEntity);\n                // todo: throw exception if parentInsertedSubject is not set\n                parentEntityId = parentInsertedSubject!.newlyGeneratedId;\n            } // todo: implement other special column types too\n        }\n\n        // try to find parent entity id in some other entity that has this entity in its children\n        if (!parentEntityId) {\n            const parentSubject = this.allSubjects.find(allSubject => {\n                if (!allSubject.hasEntity || !allSubject.metadata.isClosure || !allSubject.metadata.treeChildrenRelation)\n                    return false;\n\n                const children = subject.metadata.treeChildrenRelation!.getEntityValue(allSubject.entity);\n                return children instanceof Array ? children.indexOf(subject.entity) !== -1 : false;\n            });\n\n            if (parentSubject) {\n                parentEntityId = referencedColumn.getEntityValue(parentSubject);\n                if (!parentEntityId && parentSubject.newlyGeneratedId) { // if still not found then it means parent just inserted with generated column\n                    parentEntityId = parentSubject.newlyGeneratedId;\n                }\n            }\n        }\n\n        // if parent entity exist then insert a new row into closure table\n        subject.treeLevel = await this.queryRunner.insertIntoClosureTable(tableName, newEntityId, parentEntityId, !!subject.metadata.treeLevelColumn);\n\n        if (subject.metadata.treeLevelColumn) {\n            const values = { [subject.metadata.treeLevelColumn.databaseName]: subject.treeLevel };\n            await this.queryRunner.update(subject.metadata.tableName, values, { [referencedColumn.databaseName]: newEntityId });\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Update\n    // -------------------------------------------------------------------------\n\n    /**\n     * Updates all given subjects in the database.\n     */\n    private async executeUpdateOperations(): Promise<void> {\n        await Promise.all(this.updateSubjects.map(subject => this.update(subject)));\n    }\n\n    /**\n     * Updates given subject in the database.\n     */\n    private async update(subject: Subject): Promise<void> {\n        const entity = subject.entity;\n\n        if (this.connection.driver instanceof MongoDriver) {\n            const idMap = subject.metadata.getDatabaseEntityIdMap(entity);\n            if (!idMap)\n                throw new Error(`Internal error. Cannot get id of the updating entity.`);\n\n            /*const value: ObjectLiteral = {};\n            subject.metadata.columns.forEach(column => {\n                const columnValue = column.getEntityValue(entity);\n                if (columnValue !== undefined)\n                    value[column.databaseName] = columnValue;\n            });*/\n            // addEmbeddedValuesRecursively(entity, value, subject.metadata.embeddeds);\n\n            const value: ObjectLiteral = {};\n            this.collectColumns(subject.metadata.ownColumns, entity, value);\n            subject.metadata.embeddeds.forEach(embed => this.collectEmbeds(embed, entity, value));\n\n            // if number of updated columns = 0 no need to update updated date and version columns\n            if (Object.keys(value).length === 0)\n                return;\n\n            if (subject.metadata.updateDateColumn)\n                value[subject.metadata.updateDateColumn.databaseName] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.updateDateColumn);\n\n            if (subject.metadata.versionColumn)\n                value[subject.metadata.versionColumn.databaseName] = this.connection.driver.preparePersistentValue(subject.metadata.versionColumn.getEntityValue(entity) + 1, subject.metadata.versionColumn);\n\n            return this.queryRunner.update(subject.metadata.tableName, value, idMap);\n        }\n\n        // we group by table name, because metadata can have different table names\n        const valueMaps: { tableName: string, metadata: EntityMetadata, values: ObjectLiteral }[] = [];\n\n        // console.log(subject.diffColumns);\n        subject.diffColumns.forEach(column => {\n            // if (!column.entityTarget) return; // todo: how this can be possible?\n            const metadata = this.connection.getMetadata(column.entityMetadata.target);\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === metadata.tableName);\n            if (!valueMap) {\n                valueMap = { tableName: metadata.tableName, metadata: metadata, values: {} };\n                valueMaps.push(valueMap);\n            }\n\n            valueMap.values[column.databaseName] = this.connection.driver.preparePersistentValue(column.getEntityValue(entity), column);\n        });\n\n        subject.diffRelations.forEach(relation => {\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === relation.entityMetadata.tableName);\n            if (!valueMap) {\n                valueMap = { tableName: relation.entityMetadata.tableName, metadata: relation.entityMetadata, values: {} };\n                valueMaps.push(valueMap);\n            }\n\n            const value = relation.getEntityValue(entity);\n            relation.joinColumns.forEach(joinColumn => {\n                valueMap!.values[joinColumn.databaseName] = value !== null && value !== undefined ? value[joinColumn.referencedColumn!.propertyName] : null; // todo: should not have a call to primaryColumn, instead join column metadata should be used\n            });\n        });\n\n        // if number of updated columns = 0 no need to update updated date and version columns\n        if (Object.keys(valueMaps).length === 0)\n            return;\n\n        if (subject.metadata.updateDateColumn) {\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.tableName);\n            if (!valueMap) {\n                valueMap = { tableName: subject.metadata.tableName, metadata: subject.metadata, values: {} };\n                valueMaps.push(valueMap);\n            }\n\n            valueMap.values[subject.metadata.updateDateColumn.databaseName] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.updateDateColumn);\n        }\n\n        if (subject.metadata.versionColumn) {\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.tableName);\n            if (!valueMap) {\n                valueMap = { tableName: subject.metadata.tableName, metadata: subject.metadata, values: {} };\n                valueMaps.push(valueMap);\n            }\n\n            valueMap.values[subject.metadata.versionColumn.databaseName] = this.connection.driver.preparePersistentValue(subject.metadata.versionColumn.getEntityValue(entity) + 1, subject.metadata.versionColumn);\n        }\n\n        if (subject.metadata.parentEntityMetadata) {\n            if (subject.metadata.parentEntityMetadata.updateDateColumn) {\n                let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.parentEntityMetadata.tableName);\n                if (!valueMap) {\n                    valueMap = {\n                        tableName: subject.metadata.parentEntityMetadata.tableName,\n                        metadata: subject.metadata.parentEntityMetadata,\n                        values: {}\n                    };\n                    valueMaps.push(valueMap);\n                }\n\n                valueMap.values[subject.metadata.parentEntityMetadata.updateDateColumn.databaseName] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.parentEntityMetadata.updateDateColumn);\n            }\n\n            if (subject.metadata.parentEntityMetadata.versionColumn) {\n                let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.parentEntityMetadata.tableName);\n                if (!valueMap) {\n                    valueMap = {\n                        tableName: subject.metadata.parentEntityMetadata.tableName,\n                        metadata: subject.metadata.parentEntityMetadata,\n                        values: {}\n                    };\n                    valueMaps.push(valueMap);\n                }\n\n                valueMap.values[subject.metadata.parentEntityMetadata.versionColumn.databaseName] = this.connection.driver.preparePersistentValue(subject.metadata.parentEntityMetadata.versionColumn.getEntityValue(entity) + 1, subject.metadata.parentEntityMetadata.versionColumn);\n            }\n        }\n\n        await Promise.all(valueMaps.map(valueMap => {\n            const idMap = valueMap.metadata.getDatabaseEntityIdMap(entity);\n            if (!idMap)\n                throw new Error(`Internal error. Cannot get id of the updating entity.`);\n\n            return this.queryRunner.update(valueMap.tableName, valueMap.values, idMap);\n        }));\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Update only relations\n    // -------------------------------------------------------------------------\n\n    /**\n     * Updates relations of all given subjects in the database.\n     */\n    private executeUpdateRelations() {\n        return Promise.all(this.relationUpdateSubjects.map(subject => this.updateRelations(subject)));\n    }\n\n    /**\n     * Updates relations of the given subject in the database.\n     */\n    private async updateRelations(subject: Subject) {\n        const values: ObjectLiteral = {};\n        subject.relationUpdates.forEach(setRelation => {\n            setRelation.relation.joinColumns.forEach(joinColumn => {\n                const value = setRelation.value ? setRelation.value[joinColumn.referencedColumn!.propertyName] : null;\n                values[joinColumn.databaseName] = value; // todo: || fromInsertedSubjects ??\n            });\n        });\n\n        const idMap = subject.metadata.getDatabaseEntityIdMap(subject.databaseEntity);\n        if (!idMap)\n            throw new Error(`Internal error. Cannot get id of the updating entity.`);\n\n        return this.queryRunner.update(subject.metadata.tableName, values, idMap);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Remove\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes all given subjects from the database.\n     */\n    private async executeRemoveOperations(): Promise<void> {\n        await PromiseUtils.runInSequence(this.removeSubjects, async subject => await this.remove(subject));\n    }\n\n    /**\n     * Updates given subject from the database.\n     */\n    private async remove(subject: Subject): Promise<void> {\n        if (subject.metadata.parentEntityMetadata) { // this code should not be there. it should be handled by  subject.metadata.getEntityIdColumnMap\n            const parentConditions: ObjectLiteral = {};\n            subject.metadata.primaryColumns.forEach(column => {\n                parentConditions[column.databaseName] = column.getEntityValue(subject.databaseEntity);\n            });\n            await this.queryRunner.delete(subject.metadata.parentEntityMetadata.tableName, parentConditions);\n\n            const childConditions: ObjectLiteral = {};\n            subject.metadata.primaryColumns.forEach(column => {\n                childConditions[column.databaseName] = column.getEntityValue(subject.databaseEntity);\n            });\n            await this.queryRunner.delete(subject.metadata.tableName, childConditions);\n        } else {\n            await this.queryRunner.delete(subject.metadata.tableName, subject.metadata.getDatabaseEntityIdMap(subject.databaseEntity)!);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Insertion into junction tables\n    // -------------------------------------------------------------------------\n\n    /**\n     * Inserts into database junction tables all given array of subjects junction data.\n     */\n    private async executeInsertJunctionsOperations(): Promise<void> {\n        const promises: Promise<any>[] = [];\n        this.allSubjects.forEach(subject => {\n            subject.junctionInserts.forEach(junctionInsert => {\n                promises.push(this.insertJunctions(subject, junctionInsert));\n            });\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Inserts into database junction table given subject's junction insert data.\n     */\n    private async insertJunctions(subject: Subject, junctionInsert: JunctionInsert): Promise<void> {\n        // I think here we can only support to work only with single primary key entities\n\n        const getRelationId = (entity: ObjectLiteral, joinColumns: ColumnMetadata[]): any[] => {\n            return joinColumns.map(joinColumn => {\n                const id = joinColumn.referencedColumn!.getEntityValue(entity);\n                if (!id && joinColumn.referencedColumn!.isGenerated) {\n                    const insertSubject = this.insertSubjects.find(subject => subject.entity === entity);\n                    if (insertSubject)\n                        return insertSubject.newlyGeneratedId;\n                }\n                if (!id && joinColumn.referencedColumn!.isObjectId) {\n                    const insertSubject = this.insertSubjects.find(subject => subject.entity === entity);\n                    if (insertSubject)\n                        return insertSubject.generatedObjectId;\n                }\n                // todo: implement other special referenced column types (update date, create date, version, discriminator column, etc.)\n\n                return id;\n            });\n        };\n\n        const relation = junctionInsert.relation;\n        const joinColumns = relation.isManyToManyOwner ? relation.joinColumns : relation.inverseRelation!.inverseJoinColumns;\n        const ownId = getRelationId(subject.entity, joinColumns);\n\n        if (!ownId.length)\n            throw new Error(`Cannot insert object of ${subject.entityTarget} type. Looks like its not persisted yet, or cascades are not set on the relation.`); // todo: better error message\n\n        const promises = junctionInsert.junctionEntities.map(newBindEntity => {\n\n            // get relation id from the newly bind entity\n            const joinColumns = relation.isManyToManyOwner ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\n            const relationId = getRelationId(newBindEntity, joinColumns);\n\n            // if relation id still does not exist - we arise an error\n            if (!relationId)\n                throw new Error(`Cannot insert object of ${(newBindEntity.constructor as any).name} type. Looks like its not persisted yet, or cascades are not set on the relation.`); // todo: better error message\n\n            const columns = relation.junctionEntityMetadata!.columns.map(column => column.databaseName);\n            const values = relation.isOwning ? [...ownId, ...relationId] : [...relationId, ...ownId];\n\n            return this.queryRunner.insert(relation.junctionEntityMetadata!.tableName, OrmUtils.zipObject(columns, values));\n        });\n\n        await Promise.all(promises);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Remove from junction tables\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes from database junction tables all given array of subjects removal junction data.\n     */\n    private async executeRemoveJunctionsOperations(): Promise<void> {\n        const promises: Promise<any>[] = [];\n        this.allSubjects.forEach(subject => {\n            subject.junctionRemoves.forEach(junctionRemove => {\n                promises.push(this.removeJunctions(subject, junctionRemove));\n            });\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Removes from database junction table all given subject's removal junction data.\n     */\n    private async removeJunctions(subject: Subject, junctionRemove: JunctionRemove) {\n        const junctionMetadata = junctionRemove.relation.junctionEntityMetadata!;\n        const entity = subject.hasEntity ? subject.entity : subject.databaseEntity;\n\n        const firstJoinColumns = junctionRemove.relation.isOwning ? junctionRemove.relation.joinColumns : junctionRemove.relation.inverseRelation!.inverseJoinColumns;\n        const secondJoinColumns = junctionRemove.relation.isOwning ? junctionRemove.relation.inverseJoinColumns : junctionRemove.relation.inverseRelation!.joinColumns;\n        let conditions: ObjectLiteral = {};\n        firstJoinColumns.forEach(joinColumn => {\n            conditions[joinColumn.databaseName] = joinColumn.referencedColumn!.getEntityValue(entity);\n        });\n\n        const removePromises = junctionRemove.junctionRelationIds.map(relationIds => {\n            let inverseConditions: ObjectLiteral = {};\n            secondJoinColumns.forEach(joinColumn => {\n                inverseConditions[joinColumn.databaseName] = joinColumn.referencedColumn!.getEntityValue(relationIds);\n            });\n            return this.queryRunner.delete(junctionMetadata.tableName, Object.assign({}, inverseConditions, conditions));\n        });\n\n        await Promise.all(removePromises);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Refresh entity values after persistence\n    // -------------------------------------------------------------------------\n\n    /**\n     * Updates all special columns of the saving entities (create date, update date, versioning).\n     */\n    private updateSpecialColumnsInPersistedEntities() {\n\n        // update entity columns that gets updated on each entity insert\n        this.insertSubjects.forEach(subject => {\n            if (subject.generatedObjectId && subject.metadata.objectIdColumn)\n                subject.metadata.objectIdColumn.setEntityValue(subject.entity, subject.generatedObjectId);\n\n            subject.metadata.primaryColumns.forEach(primaryColumn => {\n                if (subject.newlyGeneratedId)\n                    primaryColumn.setEntityValue(subject.entity, subject.newlyGeneratedId);\n            });\n            subject.metadata.primaryColumns.forEach(primaryColumn => {\n                if (subject.parentGeneratedId)\n                    primaryColumn.setEntityValue(subject.entity, subject.parentGeneratedId);\n            });\n\n            if (subject.metadata.updateDateColumn)\n                subject.metadata.updateDateColumn.setEntityValue(subject.entity, subject.date);\n            if (subject.metadata.createDateColumn)\n                subject.metadata.createDateColumn.setEntityValue(subject.entity, subject.date);\n            if (subject.metadata.versionColumn)\n                subject.metadata.versionColumn.setEntityValue(subject.entity, 1);\n            if (subject.metadata.treeLevelColumn) {\n                // const parentEntity = insertOperation.entity[metadata.treeParentMetadata.propertyName];\n                // const parentLevel = parentEntity ? (parentEntity[metadata.treeLevelColumn.propertyName] || 0) : 0;\n                subject.metadata.treeLevelColumn.setEntityValue(subject.entity, subject.treeLevel);\n            }\n            /*if (subject.metadata.hasTreeChildrenCountColumn) {\n                 subject.entity[subject.metadata.treeChildrenCountColumn.propertyName] = 0;\n            }*/\n        });\n\n        // update special columns that gets updated on each entity update\n        this.updateSubjects.forEach(subject => {\n            if (subject.metadata.updateDateColumn)\n                subject.metadata.updateDateColumn.setEntityValue(subject.entity, subject.date);\n            if (subject.metadata.versionColumn)\n                subject.metadata.versionColumn.setEntityValue(subject.entity, subject.metadata.versionColumn.getEntityValue(subject.entity) + 1);\n        });\n\n        // remove ids from the entities that were removed\n        this.removeSubjects\n            .filter(subject => subject.hasEntity)\n            .forEach(subject => {\n                subject.metadata.primaryColumns.forEach(primaryColumn => {\n                    primaryColumn.setEntityValue(subject.entity, undefined);\n                });\n            });\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToNewEntityTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform<T>(newEntity: T, object: ObjectLiteral, metadata: EntityMetadata): T {\n        this.groupAndTransform(newEntity, object, metadata);\n        return newEntity;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    private groupAndTransform(entity: any, object: ObjectLiteral, metadata: EntityMetadata): void {\n\n        // copy regular column properties from the given object\n        metadata.columns\n            .filter(column => object.hasOwnProperty(column.propertyName))\n            .forEach(column => entity[column.propertyName] = object[column.propertyName]); // todo: also need to be sure that type is correct\n\n        // if relation is loaded then go into it recursively and transform its values too\n        metadata.relations\n            .filter(relation => object.hasOwnProperty(relation.propertyName))\n            .forEach(relation => {\n                const relationMetadata = relation.inverseEntityMetadata;\n                if (!relationMetadata)\n                    throw new Error(\"Relation metadata for the relation \" + metadata.name + \"#\" + relation.propertyName + \" is missing\");\n\n                if (relation.isManyToMany || relation.isOneToMany) {\n                    if (object[relation.propertyName] instanceof Array) {\n                        entity[relation.propertyName] = object[relation.propertyName].map((subObject: any) => {\n                            let subEntity = relationMetadata.create();\n                            // todo: support custom initial fields here\n                            if (entity[relation.propertyName] instanceof Array) {\n                                const existRelation = entity[relation.propertyName].find((subEntity: any) => {\n                                    return subEntity[relation.propertyName] === subObject[relation.propertyName];\n                                });\n                                if (existRelation)\n                                    this.groupAndTransform(subEntity, existRelation, relationMetadata);\n                            }\n\n                            this.groupAndTransform(subEntity, subObject, relationMetadata);\n                            return subEntity;\n                        });\n                    } else {\n                        entity[relation.propertyName] = object[relation.propertyName];\n                    }\n                } else {\n                    if (object[relation.propertyName]) {\n                        const subEntity = relationMetadata.create();\n                        if (entity[relation.propertyName])\n                            this.groupAndTransform(subEntity, entity[relation.propertyName], relationMetadata);\n\n                        this.groupAndTransform(subEntity, object[relation.propertyName], relationMetadata);\n                        entity[relation.propertyName] = subEntity;\n                    } else {\n                        entity[relation.propertyName] = object[relation.propertyName];\n                    }\n                }\n            });\n    }\n\n}","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nclass LoadMapItem {\n\n    entity?: ObjectLiteral;\n    plainEntity: ObjectLiteral;\n    metadata: EntityMetadata;\n    parentLoadMapItem?: LoadMapItem;\n    relation?: RelationMetadata;\n\n    constructor(plainEntity: ObjectLiteral,\n                metadata: EntityMetadata,\n                parentLoadMapItem?: LoadMapItem,\n                relation?: RelationMetadata) {\n        this.plainEntity = plainEntity;\n        this.metadata = metadata;\n        this.parentLoadMapItem = parentLoadMapItem;\n        this.relation = relation;\n    }\n\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    get id(): any {\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\n    }\n\n    compareEntities(entity1: any, entity2: any) {\n        return this.metadata.compareEntities(entity1, entity2);\n    }\n\n}\n\nclass LoadMap {\n\n    loadMapItems: LoadMapItem[] = [];\n\n    get mainLoadMapItem(): LoadMapItem|undefined {\n        return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\n    }\n\n    addLoadMap(newLoadMap: LoadMapItem) {\n        const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\n        if (!item)\n            this.loadMapItems.push(newLoadMap);\n    }\n\n    fillEntities(target: Function|string, entities: any[]) {\n        entities.forEach(entity => {\n            const item = this.loadMapItems.find(loadMapItem => {\n                return loadMapItem.target === target && loadMapItem.compareEntities(entity, loadMapItem.plainEntity);\n            });\n            if (item)\n                item.entity = entity;\n        });\n    }\n\n    groupByTargetIds(): { target: Function|string, ids: any[] }[] {\n        const groups: { target: Function|string, ids: any[] }[] = [];\n        this.loadMapItems.forEach(loadMapItem => {\n            let group = groups.find(group => group.target === loadMapItem.target);\n            if (!group) {\n                group = { target: loadMapItem.target, ids: [] };\n                groups.push(group);\n            }\n\n            group.ids.push(loadMapItem.id);\n        });\n        return groups;\n    }\n\n}\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n\n    constructor(private entityManager: EntityManager) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async transform(plainObject: ObjectLiteral, metadata: EntityMetadata): Promise<ObjectLiteral|undefined> {\n\n        // if plain object does not have id then nothing to load really\n        if (!metadata.checkIfObjectContainsAllPrimaryKeys(plainObject))\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\n\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\n        const loadMap = new LoadMap();\n        const fillLoadMap = (entity: ObjectLiteral, entityMetadata: EntityMetadata, parentLoadMapItem?: LoadMapItem, relation?: RelationMetadata) => {\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n            loadMap.addLoadMap(item);\n\n            entityMetadata\n                .extractRelationValuesFromEntity(entity, metadata.relations)\n                .filter(value => value !== null && value !== undefined)\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\n        };\n        fillLoadMap(plainObject, metadata);\n        // load all entities and store them in the load map\n        await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => { // todo: fix type hinting\n            return this.entityManager\n                .findByIds<ObjectLiteral>(targetWithIds.target as any, targetWithIds.ids)\n                .then(entities => loadMap.fillEntities(targetWithIds.target, entities));\n        }));\n\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\n        loadMap.loadMapItems.forEach(loadMapItem => {\n            if (!loadMapItem.relation ||\n                !loadMapItem.entity ||\n                !loadMapItem.parentLoadMapItem ||\n                !loadMapItem.parentLoadMapItem.entity)\n                return;\n\n            if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n\n            } else {\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n            }\n        });\n\n        return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\n    }\n\n}","/**\n * Thrown if custom repository was not found.\n */\nexport class CustomRepositoryNotFoundError extends Error {\n    name = \"CustomRepositoryNotFoundError\";\n\n    constructor(repository: any) {\n        super();\n        this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name } was not found. ` +\n            `Did you forgot to put @EntityRepository decorator on it?`;\n    }\n\n}","/**\n * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.\n */\nexport class CustomRepositoryDoesNotHaveEntityError extends Error {\n    name = \"CustomRepositoryDoesNotHaveEntityError\";\n\n    constructor(repository: any) {\n        super(`Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name} does not have managed entity. ` +\n        `Did you forget to specify entity for it @EntityRepository(MyEntity)? `);\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {Repository} from \"./Repository\";\nimport {TreeRepository} from \"./TreeRepository\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {CustomRepositoryDoesNotHaveEntityError} from \"./error/CustomRepositoryDoesNotHaveEntityError\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {CustomRepositoryNotFoundError} from \"./error/CustomRepositoryNotFoundError\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @experimental\n */\nexport class AbstractRepository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity.\n     */\n    protected manager: EntityManager;\n\n    // -------------------------------------------------------------------------\n    // Protected Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the original ORM repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get repository(): Repository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.manager.getRepository<Entity>(target);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get treeRepository(): TreeRepository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.manager.getTreeRepository<Entity>(target);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected createQueryBuilder(alias: string): SelectQueryBuilder<Entity> {\n        const target = this.getCustomRepositoryTarget(this.constructor);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.manager.getRepository(target).createQueryBuilder(alias);\n    }\n\n    /**\n     * Creates a new query builder for the given entity that can be used to build a sql query.\n     */\n    protected createQueryBuilderFor<T>(entity: ObjectType<T>, alias: string): SelectQueryBuilder<T> {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\n    }\n\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    protected getRepositoryFor<T>(entity: ObjectType<T>): Repository<T> {\n        return this.manager.getRepository(entity);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    protected getTreeRepositoryFor<T>(entity: ObjectType<T>): TreeRepository<T> {\n        return this.manager.getTreeRepository(entity);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    private getCustomRepositoryTarget<T>(customRepository: any): Function|string|undefined {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        return entityRepositoryMetadataArgs.entity;\n    }\n\n}","/**\n * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.\n */\nexport class CustomRepositoryCannotInheritRepositoryError extends Error {\n    name = \"CustomRepositoryCannotInheritRepositoryError\";\n\n    constructor(repository: any) {\n        super(`Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\n            ` cannot inherit Repository class without entity being set in the @EntityRepository decorator.`);\n    }\n\n}","import {Connection} from \"../connection/Connection\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {NoNeedToReleaseEntityManagerError} from \"./error/NoNeedToReleaseEntityManagerError\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {Repository} from \"../repository/Repository\";\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\nimport {SubjectBuilder} from \"../persistence/SubjectBuilder\";\nimport {SubjectOperationExecutor} from \"../persistence/SubjectOperationExecutor\";\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport {CustomRepositoryNotFoundError} from \"../repository/error/CustomRepositoryNotFoundError\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../repository/error/CustomRepositoryCannotInheritRepositoryError\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection to be used in this entity manager.\n     */\n    connection: Connection;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     */\n    protected queryRunner: QueryRunner;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    protected data: ObjectLiteral = {};\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\n        this.connection = connection;\n        if (queryRunner)\n            this.queryRunner = queryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\n        return this.connection.transaction(runInTransaction, this.queryRunner);\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        return this.connection.query(query, parameters, this.queryRunner);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass?: ObjectType<Entity>|Function|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(entityClass as Function|string, alias, queryRunner || this.queryRunner);\n\n        } else {\n            return this.connection.createQueryBuilder(entityClass as QueryRunner|undefined || this.queryRunner);\n        }\n    }\n\n    /**\n     * Gets user data by a given key.\n     * Used get stored data stored in a transactional entity manager.\n     */\n    getData(key: string): any {\n        return this.data[key];\n    }\n\n    /**\n     * Sets value for the given key in user data.\n     * Used to store data in a transactional entity manager which can be accessed in subscribers then.\n     */\n    setData(key: string, value: any): this {\n        this.data[key] = value;\n        return this;\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean;\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function|string, entity: any): boolean;\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any|Function|string, maybeEntity?: any): boolean {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.hasId(entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: Function|string, entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any|Function|string, maybeEntity?: any): any {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.getEntityIdMixedMap(entity);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObject: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjects: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        const metadata = this.connection.getMetadata(entityClass);\n\n        if (!plainObjectOrObjects)\n            return metadata.create();\n\n        if (plainObjectOrObjects instanceof Array)\n            return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass, plainEntityLike));\n\n        return this.merge(entityClass, metadata.create(), plainObjectOrObjects);\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entityClass: ObjectType<Entity>|string, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity { // todo: throw exception ie tntity manager is released\n        const metadata = this.connection.getMetadata(entityClass);\n        const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n        entityLikes.forEach(object => plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\n        return mergeIntoEntity;\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity>(entityClass: ObjectType<Entity>|string, entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\n        if (transformedEntity)\n            return this.merge(entityClass, transformedEntity as Entity, entityLike);\n\n        return undefined;\n    }\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(targetOrEntity: Function|string, entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(targetOrEntity: Function|string, entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) a given entity in the database.\n     */\n    save<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: SaveOptions): Promise<Entity|Entity[]> {\n\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\n            // todo: throw exception if constructor in target is not set\n            if (entity instanceof Array) {\n                await Promise.all(entity.map(e => {\n                    const finalTarget = target ? target : e.constructor;\n                    return this.saveOne(finalTarget, e, options) as any;\n                }));\n            } else {\n                const finalTarget = target ? target : entity.constructor;\n                await this.saveOne(finalTarget, entity as Entity, options);\n            }\n\n            return entity;\n        });\n    }\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: Function, entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: string, entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: Function, entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: string, entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) a given entity in the database.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[], options?: SaveOptions): Promise<Entity|Entity[]> {\n        return this.save(targetOrEntity as any, maybeEntity as any, options);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     */\n    async update<Entity>(target: ObjectType<Entity>|string, conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\n\n    /**\n     * Updates entity partially. Entity can be found by a given find options.\n     */\n    async update<Entity>(target: ObjectType<Entity>|string, findOptions: FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     */\n    async update<Entity>(target: ObjectType<Entity>|string, conditionsOrFindOptions: Partial<Entity>|FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        const entity = await this.findOne(target, conditionsOrFindOptions as any); // this is temporary, in the future can be refactored to perform better\n        if (!entity)\n            throw new Error(`Cannot find entity to update by a given criteria`);\n\n        Object.assign(entity, partialEntity);\n        await this.save(entity, options);\n    }\n\n    /**\n     * Updates entity partially. Entity will be found by a given id.\n     */\n    async updateById<Entity>(target: ObjectType<Entity>|string, id: any, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        const entity = await this.findOneById(target, id as any); // this is temporary, in the future can be refactored to perform better\n        if (!entity)\n            throw new Error(`Cannot find entity to update by a id`);\n\n        Object.assign(entity, partialEntity);\n        await this.save(entity, options);\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: RemoveOptions): Promise<Entity|Entity[]> {\n\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as RemoveOptions;\n\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\n            // todo: throw exception if constructor in target is not set\n            if (entity instanceof Array) {\n                await Promise.all(entity.map(e => {\n                    const finalTarget = target ? target : e.constructor;\n                    return this.removeOne(finalTarget, e, options) as any;\n                }));\n            } else {\n                const finalTarget = target ? target : entity.constructor;\n                await this.removeOne(finalTarget, entity as Entity, options);\n            }\n\n            return entity;\n        });\n    }\n\n    /**\n     * Removes entity by a given entity id.\n     */\n    async removeById<Entity>(targetOrEntity: ObjectType<Entity>|string, id: any, options?: RemoveOptions): Promise<void> {\n        const entity = await this.findOneById<any>(targetOrEntity, id); // this is temporary, in the future can be refactored to perform better\n        if (!entity)\n            throw new Error(`Cannot find entity to remove by a given id`);\n\n        await this.remove(entity, options);\n    }\n\n    /**\n     * Removes entity by a given entity ids.\n     */\n    async removeByIds<Entity>(targetOrEntity: ObjectType<Entity>|string, ids: any[], options?: RemoveOptions): Promise<void> {\n        const promises = ids.map(async id => {\n            const entity = await this.findOneById<any>(targetOrEntity, id); // this is temporary, in the future can be refactored to perform better\n            if (!entity)\n                throw new Error(`Cannot find entity to remove by a given id`);\n\n            await this.remove(entity, options);\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given find options and conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], conditions?: Partial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n\n        ids = ids.map(id => {\n            if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\n                return metadata.createEntityIdMap([id]);\n            }\n            return id;\n        });\n        qb.whereInIds(ids);\n        return qb.getMany();\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getOne();\n    }\n\n    /**\n     * Finds entity with given id.\n     * Optionally find options can be applied.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity with given id.\n     * Optionally conditions can be applied.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, conditions?: Partial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity with given id.\n     * Optionally find options or conditions can be applied.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\n        if (metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\n            // const columnNames = this.metadata.getEntityIdMap({  });\n            throw new Error(`You have multiple primary keys in your entity, to use findOneById with multiple primary keys please provide ` +\n                `complete object with all entity ids, like this: { firstKey: value, secondKey: value }`);\n        }\n\n        FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n        if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\n            id = metadata.createEntityIdMap([id]);\n        }\n        qb.whereInIds([id]);\n        return qb.getOne();\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     */\n    async clear<Entity>(entityClass: ObjectType<Entity>|string): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            return await queryRunner.truncate(metadata.tableName); // await is needed here because we are using finally\n\n        } finally {\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\n\n        // if single db connection is used then create its own repository with reused query runner\n        if (this.queryRunner) {\n            if (this.queryRunner.isReleased)\n                throw new QueryRunnerProviderAlreadyReleasedError();\n\n            return this.connection.createIsolatedRepository(entityClassOrName, this.queryRunner);\n        }\n\n        return this.connection.getRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\n\n        // if single db connection is used then create its own repository with reused query runner\n        if (this.queryRunner) {\n            if (this.queryRunner.isReleased)\n                throw new QueryRunnerProviderAlreadyReleasedError();\n\n            return this.connection.createIsolatedRepository(entityClassOrName, this.queryRunner) as TreeRepository<Entity>;\n        }\n\n        return this.connection.getTreeRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\n\n    /**\n     * Gets mongodb repository for the given entity name.\n     */\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\n\n    /**\n     * Gets mongodb repository for the given entity class or name.\n     */\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\n\n        // if single db connection is used then create its own repository with reused query runner\n        if (this.queryRunner) {\n            if (this.queryRunner.isReleased)\n                throw new QueryRunnerProviderAlreadyReleasedError();\n\n            return this.connection.createIsolatedRepository(entityClassOrName, this.queryRunner) as MongoRepository<Entity>;\n        }\n\n        return this.connection.getMongoRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\n\n        const entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)(this, entityMetadata);\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this;\n        }\n        if (entityRepositoryInstance instanceof Repository) {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\n\n            (entityRepositoryInstance as any)[\"manager\"] = this;\n            (entityRepositoryInstance as any)[\"metadata\"] = entityMetadata;\n        }\n\n        return entityRepositoryInstance;\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner)\n            throw new NoNeedToReleaseEntityManagerError();\n\n        return this.queryRunner.release();\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs a save operation for a single entity.\n     */\n    protected async saveOne(target: Function|string, entity: any, options?: SaveOptions): Promise<void> {\n        const metadata = this.connection.getMetadata(target);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            const transactionEntityManager = this.connection.createIsolatedManager(queryRunner);\n            if (options && options.data)\n                transactionEntityManager.data = options.data;\n\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\n            await databaseEntityLoader.persist(entity, metadata);\n\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner);\n            await executor.execute(databaseEntityLoader.operateSubjects);\n\n        } finally {\n            if (!this.queryRunner) // release it only if its created by this method\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Performs a remove operation for a single entity.\n     */\n    protected async removeOne(target: Function|string, entity: any, options?: RemoveOptions): Promise<void> {\n        const metadata = this.connection.getMetadata(target);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            const transactionEntityManager = this.connection.createIsolatedManager(queryRunner);\n            if (options && options.data)\n                transactionEntityManager.data = options.data;\n\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\n            await databaseEntityLoader.remove(entity, metadata);\n\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner);\n            await executor.execute(databaseEntityLoader.operateSubjects);\n\n        } finally {\n            if (!this.queryRunner) // release it only if its created by this method\n                await queryRunner.release();\n        }\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {SqlServerDriver} from \"./SqlServerDriver\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {Connection} from \"../../connection/Connection\";\nimport {ReadStream} from \"fs\";\n\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class SqlServerQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because in transaction mode mssql cannot execute parallel queries,\n     * that's why we store last executed query promise to wait it when we execute next query.\n     *\n     * @see https://github.com/patriksimek/node-mssql/issues/491\n     */\n    protected queryResponsibilityChain: Promise<any>[] = [];\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: SqlServerDriver) {\n        this.connection = driver.connection;\n        this.manager = driver.connection.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        return new Promise<void>(async (ok, fail) => {\n            this.isTransactionActive = true;\n            this.databaseConnection = this.driver.connectionPool.transaction();\n            this.databaseConnection.begin((err: any) => {\n                if (err) {\n                    this.isTransactionActive = false;\n                    return fail(err);\n                }\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.commit((err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.rollback((err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise(async (ok, fail) => {\n\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : this.driver.connectionPool);\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    request.input(index, parameters![index]);\n                });\n            }\n            request.query(query, (err: any, result: any) => {\n\n                const resolveChain = () => {\n                    if (promiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(promiseIndex, 1);\n                    if (waitingPromiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                    waitingOkay();\n                };\n\n                let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                if (err) {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError((err.originalError && err.originalError.info) ? err.originalError.info.message : err, this);\n                    resolveChain();\n                    return fail(err);\n                }\n\n                ok(result.recordset);\n                resolveChain();\n            });\n        });\n        if (this.isTransactionActive)\n            this.queryResponsibilityChain.push(promise);\n\n        return promise;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise<ReadStream>(async (ok, fail) => {\n\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : this.driver.connectionPool);\n            request.stream = true;\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    request.input(index, parameters![index]);\n                });\n            }\n            request.query(query, (err: any, result: any) => {\n\n                const resolveChain = () => {\n                    if (promiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(promiseIndex, 1);\n                    if (waitingPromiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                    waitingOkay();\n                };\n\n                let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                if (err) {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError((err.originalError && err.originalError.info) ? err.originalError.info.message : err, this);\n                    resolveChain();\n                    return fail(err);\n                }\n\n                ok(result.recordset);\n                resolveChain();\n            });\n            if (onEnd) request.on(\"done\", onEnd);\n            if (onError) request.on(\"error\", onError);\n            ok(request as ReadStream);\n        });\n        if (this.isTransactionActive)\n            this.queryResponsibilityChain.push(promise);\n\n        return promise;\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map((key, index) => \"@\" + index).join(\",\");\n        const parameters = keys.map(key => keyValues[key]);\n\n        const sql = columns.length > 0\n            ? `INSERT INTO \"${tableName}\"(${columns}) ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.databaseName + \" \" : \"\" }VALUES (${values})`\n            : `INSERT INTO \"${tableName}\" ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.databaseName + \" \" : \"\" }DEFAULT VALUES `;\n\n        const result = await this.query(sql, parameters);\n        return generatedColumn ? result instanceof Array ? result[0][generatedColumn.databaseName] : result[generatedColumn.databaseName] : undefined;\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, updateParams.length).join(\" AND \");\n        const sql = `UPDATE \"${tableName}\" SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \"${tableName}\" WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\", \"level\") ` +\n                `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\") ` +\n                `SELECT \"ancestor\", ${newEntityId} FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM \"${tableName}\" WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n        const tablesSql          = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql         = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}'`;\n        const constraintsSql     = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages ` +\n`LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME ` +\n`WHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\n        const identityColumnsSql = `SELECT COLUMN_NAME, TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}' AND COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1;`;\n        const indicesSql         = `SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, IndexId = ind.index_id, ColumnId = ic.index_column_id, COLUMN_NAME = col.name, ind.*, ic.*, col.* ` +\n`FROM sys.indexes ind INNER JOIN sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id INNER JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id ` +\n`INNER JOIN sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 AND ind.is_unique = 0 AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0 ORDER BY t.name, ind.name, ind.index_id, ic.index_column_id`;\n        const [dbTables, dbColumns, dbConstraints, dbIdentityColumns, dbIndices]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(identityColumnsSql),\n            this.query(indicesSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const isPrimary = !!dbConstraints.find(dbConstraint => {\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\n                    });\n                    const isGenerated = !!dbIdentityColumns.find(column => {\n                        return  column[\"TABLE_NAME\"] === tableSchema.name &&\n                                column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n                    const isUnique = !!dbConstraints.find(dbConstraint => {\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n                    });\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n                    columnSchema.type = dbColumn[\"DATA_TYPE\"].toLowerCase() + (dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] ? \"(\" + dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] + \")\" : \"\"); // todo: use normalize type?\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    columnSchema.isPrimary = isPrimary;\n                    columnSchema.isGenerated = isGenerated;\n                    columnSchema.isUnique = isUnique;\n                    columnSchema.comment = \"\"; // todo: less priority, implement this later\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = dbConstraints\n                .filter(dbConstraint => {\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\n                })\n                .map(keyColumnUsage => {\n                    return new PrimaryKeySchema(keyColumnUsage[\"CONSTRAINT_NAME\"], keyColumnUsage[\"COLUMN_NAME\"]);\n                });\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = dbConstraints\n                .filter(dbConstraint => {\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"FOREIGN KEY\";\n                })\n                .map(dbConstraint => new ForeignKeySchema(dbConstraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return  dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\n                            (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n                            (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n                })\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(dbIndexName => {\n                    const columnNames = dbIndices\n                        .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName)\n                        .map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\n\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness? */);\n                });\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false, true)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        sql += table.columns\n            .filter(column => column.isUnique)\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\n            .join(\" \");\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        let sql = `DROP TABLE \"${tableName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column, false, true)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        // to update an identy column we have to drop column and recreate it again\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`);\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn, false, false)}`);\n        }\n\n        const sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN ${this.buildCreateColumnSql(newColumn, true, false)}`; // todo: CHANGE OR MODIFY COLUMN ????\n        await this.query(sql);\n\n        if (newColumn.isUnique !== oldColumn.isUnique) {\n            if (newColumn.isUnique === true) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\n\n            } else if (newColumn.isUnique === false) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\n\n            }\n        }\n        if (newColumn.default !== oldColumn.default) {\n            if (newColumn.default !== null && newColumn.default !== undefined) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"df_${newColumn.name}\"`);\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"df_${newColumn.name}\" DEFAULT ${newColumn.default} FOR \"${newColumn.name}\"`);\n\n            } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"df_${newColumn.name}\"`);\n\n            }\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n\n        // drop depend constraints\n        if (column.default)\n            await this.query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"df_${column.name}\"`);\n\n        // drop column itself\n        await this.query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        const oldPrimaryKeySql = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\nLEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\nWHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\n        const oldPrimaryKey = await this.query(oldPrimaryKeySql);\n        if (oldPrimaryKey.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${oldPrimaryKey[0][\"CONSTRAINT_NAME\"]}\"`);\n\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"` + primaryKey.columnName + `\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        const sql = `DROP INDEX \"${tableName}\".\"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const allTablesSql = `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`;\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\n            const tableNames = allTablesResults.map(result => result[\"TABLE_NAME\"]);\n            await Promise.all(tableNames.map(async tableName => {\n                const dropForeignKeySql = `SELECT 'ALTER TABLE ' +  OBJECT_SCHEMA_NAME(parent_object_id) + '.[' + OBJECT_NAME(parent_object_id) + '] DROP CONSTRAINT ' + name as query FROM sys.foreign_keys WHERE referenced_object_id = object_id('${tableName}')`;\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => {\n                    return this.query(dropQuery);\n                }));\n            }));\n            await Promise.all(tableNames.map(tableName => {\n                const dropTableSql = `DROP TABLE \"${tableName}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database as string;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startFrom: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => {\n            return `\"${key}\"` + \"=@\" + (startFrom + index);\n        });\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema, skipIdentity: boolean, createDefault: boolean) {\n        let c = `\"${column.name}\" ${column.type}`;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\";\n        // if (column.isPrimary === true && !skipPrimary)\n        //     c += \" PRIMARY KEY\";\n        if (column.comment)\n            c += \" COMMENT '\" + column.comment + \"'\";\n        if (createDefault) {\n            if (column.default !== undefined && column.default !== null) {\n                c += ` CONSTRAINT \"df_${column.name}\" DEFAULT ${column.default}`;\n            }\n        }\n        return c;\n    }\n\n\n}","import {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {TableSchema} from \"./schema/TableSchema\";\nimport {ColumnSchema} from \"./schema/ColumnSchema\";\nimport {ForeignKeySchema} from \"./schema/ForeignKeySchema\";\nimport {IndexSchema} from \"./schema/IndexSchema\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {PrimaryKeySchema} from \"./schema/PrimaryKeySchema\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {Connection} from \"../connection/Connection\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class RdbmsSchemaBuilder implements SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner;\n\n    /**\n     * All synchronized tables in the database.\n     */\n    protected tableSchemas: TableSchema[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = await this.connection.createQueryRunner();\n        this.tableSchemas = await this.loadTableSchemas();\n\n        await this.queryRunner.startTransaction();\n        try {\n            await this.executeSchemaSyncOperationsInProperOrder();\n            await this.queryRunner.commitTransaction();\n\n        } catch (error) {\n\n            try { // we throw original error even if rollback thrown an error\n                await this.queryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    async log(): Promise<(string|{ up: string, down: string })[]> {\n        this.queryRunner = await this.connection.createQueryRunner();\n        try {\n            this.tableSchemas = await this.loadTableSchemas();\n            this.queryRunner.enableSqlMemory();\n            await this.executeSchemaSyncOperationsInProperOrder();\n            return this.queryRunner.getMemorySql();\n\n        } finally {\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory();\n            await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all table schemas from the database.\n     */\n    protected loadTableSchemas(): Promise<TableSchema[]> {\n        const tableNames = this.entityToSyncMetadatas.map(metadata => metadata.tableName);\n        return this.queryRunner.loadTableSchemas(tableNames);\n    }\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => !metadata.skipSync && metadata.tableType !== \"single-table-child\");\n    }\n\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    protected async executeSchemaSyncOperationsInProperOrder(): Promise<void> {\n        await this.dropOldForeignKeys();\n        // await this.dropOldPrimaryKeys(); // todo: need to drop primary column because column updates are not possible\n        await this.createNewTables();\n        await this.dropRemovedColumns();\n        await this.addNewColumns();\n        await this.updateExistColumns();\n        await this.updatePrimaryKeys();\n        await this.createIndices(); // we need to create indices before foreign keys because foreign keys rely on unique indices\n        await this.createForeignKeys();\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the table schemas, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const foreignKeySchemasToDrop = tableSchema.foreignKeys.filter(foreignKeySchema => {\n                return !metadata.foreignKeys.find(metadataForeignKey => metadataForeignKey.name === foreignKeySchema.name);\n            });\n            if (foreignKeySchemasToDrop.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${tableSchema.name}: ${foreignKeySchemasToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\n\n            // remove foreign keys from the table schema\n            tableSchema.removeForeignKeys(foreignKeySchemasToDrop);\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemasToDrop);\n        });\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            // check if table does not exist yet\n            const existTableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (existTableSchema)\n                return;\n\n            this.connection.logger.logSchemaBuild(`creating a new table: ${metadata.tableName}`);\n\n            // create a new table schema and sync it in the database\n            const tableSchema = new TableSchema(metadata.tableName, this.metadataColumnsToColumnSchemas(metadata.columns), true);\n            this.tableSchemas.push(tableSchema);\n            await this.queryRunner.createTable(tableSchema);\n        });\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected dropRemovedColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema) return;\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedColumnSchemas = tableSchema.columns.filter(columnSchema => {\n                return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === columnSchema.name);\n            });\n            if (droppedColumnSchemas.length === 0)\n                return;\n\n            // drop all foreign keys that has column to be removed in its columns\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\n                return this.dropColumnReferencedForeignKeys(metadata.tableName, droppedColumnSchema.name);\n            }));\n\n            // drop all indices that point to this column\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\n                return this.dropColumnReferencedIndices(metadata.tableName, droppedColumnSchema.name);\n            }));\n\n            this.connection.logger.logSchemaBuild(`columns dropped in ${tableSchema.name}: ` + droppedColumnSchemas.map(column => column.name).join(\", \"));\n\n            // remove columns from the table schema and primary keys of it if its used in the primary keys\n            tableSchema.removeColumns(droppedColumnSchemas);\n            tableSchema.removePrimaryKeysOfColumns(droppedColumnSchemas);\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(tableSchema, droppedColumnSchemas);\n        });\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected addNewColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\n                return !tableSchema.columns.find(columnSchema => columnSchema.name === columnMetadata.databaseName);\n            });\n            if (newColumnMetadatas.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(\", \"));\n\n            // create columns in the database\n            const newColumnSchemas = this.metadataColumnsToColumnSchemas(newColumnMetadatas);\n            await this.queryRunner.addColumns(tableSchema, newColumnSchemas);\n            tableSchema.addColumns(newColumnSchemas);\n        });\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected updateExistColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            const updatedColumnSchemas = tableSchema.findChangedColumns(this.connection.driver, metadata.columns);\n            if (updatedColumnSchemas.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`columns changed in ${tableSchema.name}. updating: ` + updatedColumnSchemas.map(column => column.name).join(\", \"));\n\n            // drop all foreign keys that point to this column\n            const dropRelatedForeignKeysPromises = updatedColumnSchemas\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.databaseName === changedColumnSchema.name))\n                .map(changedColumnSchema => this.dropColumnReferencedForeignKeys(metadata.tableName, changedColumnSchema.name));\n\n            // wait until all related foreign keys are dropped\n            await Promise.all(dropRelatedForeignKeysPromises);\n\n            // drop all indices that point to this column\n            const dropRelatedIndicesPromises = updatedColumnSchemas\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.databaseName === changedColumnSchema.name))\n                .map(changedColumnSchema => this.dropColumnReferencedIndices(metadata.tableName, changedColumnSchema.name));\n\n            // wait until all related indices are dropped\n            await Promise.all(dropRelatedIndicesPromises);\n\n            // generate a map of new/old columns\n            const newAndOldColumnSchemas = updatedColumnSchemas.map(changedColumnSchema => {\n                const columnMetadata = metadata.columns.find(column => column.databaseName === changedColumnSchema.name);\n                const newColumnSchema = ColumnSchema.create(columnMetadata!, this.connection.driver.normalizeType(columnMetadata!), this.connection.driver.normalizeDefault(columnMetadata!));\n                tableSchema.replaceColumn(changedColumnSchema, newColumnSchema);\n\n                return {\n                    newColumn: newColumnSchema,\n                    oldColumn: changedColumnSchema\n                };\n            });\n\n            return this.queryRunner.changeColumns(tableSchema, newAndOldColumnSchemas);\n        });\n    }\n\n    /**\n     * Creates primary keys which does not exist in the table yet.\n     */\n    protected updatePrimaryKeys() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName && !table.justCreated);\n            if (!tableSchema)\n                return;\n\n            const metadataPrimaryColumns = metadata.columns.filter(column => column.isPrimary && !column.isGenerated);\n            const addedKeys = metadataPrimaryColumns\n                .filter(primaryKey => {\n                    return !tableSchema.primaryKeysWithoutGenerated.find(dbPrimaryKey => dbPrimaryKey.columnName === primaryKey.databaseName);\n                })\n                .map(primaryKey => new PrimaryKeySchema(\"\", primaryKey.databaseName));\n\n            const droppedKeys = tableSchema.primaryKeysWithoutGenerated.filter(primaryKeySchema => {\n                return !metadataPrimaryColumns.find(primaryKeyMetadata => primaryKeyMetadata.databaseName === primaryKeySchema.columnName);\n            });\n\n            if (addedKeys.length === 0 && droppedKeys.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`primary keys of ${tableSchema.name} has changed: dropped - ${droppedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}; added - ${addedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}`);\n            tableSchema.addPrimaryKeys(addedKeys);\n            tableSchema.removePrimaryKeys(droppedKeys);\n            await this.queryRunner.updatePrimaryKeys(tableSchema);\n        });\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected createForeignKeys() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            const newKeys = metadata.foreignKeys.filter(foreignKey => {\n                return !tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === foreignKey.name);\n            });\n            if (newKeys.length === 0)\n                return;\n\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\n            this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")}`);\n            await this.queryRunner.createForeignKeys(tableSchema, dbForeignKeys);\n            tableSchema.addForeignKeys(dbForeignKeys);\n        });\n    }\n\n    /**\n     * Creates indices which are missing in db yet, and drops indices which exist in the db,\n     * but does not exist in the metadata anymore.\n     */\n    protected createIndices() {\n        // return Promise.all(this.connection.entityMetadatas.map(metadata => this.createIndices(metadata.table, metadata.indices)));\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            // drop all indices that exist in the table, but does not exist in the given composite indices\n            const dropQueries = tableSchema.indices\n                .filter(indexSchema => !metadata.indices.find(indexMetadata => indexMetadata.name === indexSchema.name))\n                .map(async indexSchema => {\n                    this.connection.logger.logSchemaBuild(`dropping an index: ${indexSchema.name}`);\n                    tableSchema.removeIndex(indexSchema);\n                    await this.queryRunner.dropIndex(metadata.tableName, indexSchema.name);\n                });\n\n            // then create table indices for all composite indices we have\n            const addQueries = metadata.indices\n                .filter(indexMetadata => !tableSchema.indices.find(indexSchema => indexSchema.name === indexMetadata.name))\n                .map(async indexMetadata => {\n                    const indexSchema = IndexSchema.create(indexMetadata);\n                    tableSchema.indices.push(indexSchema);\n                    this.connection.logger.logSchemaBuild(`adding new index: ${indexSchema.name}`);\n                    await this.queryRunner.createIndex(indexSchema.tableName, indexSchema);\n                });\n\n            await Promise.all(dropQueries.concat(addQueries));\n        });\n    }\n\n    /**\n     * Drops all indices where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedIndices(tableName: string, columnName: string): Promise<void> {\n\n        const allIndexMetadatas = this.connection.entityMetadatas.reduce(\n            (all, metadata) => all.concat(metadata.indices),\n            [] as IndexMetadata[]\n        );\n\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\n        if (!tableSchema)\n            return;\n\n        // find depend indices to drop them\n        const dependIndices = allIndexMetadatas.filter(indexMetadata => {\n            return indexMetadata.tableName === tableName && !!indexMetadata.columns.find(column => column.databaseName === columnName);\n        });\n        if (!dependIndices.length)\n            return;\n\n        const dependIndicesInTable = tableSchema.indices.filter(indexSchema => {\n            return !!dependIndices.find(indexMetadata => indexSchema.name === indexMetadata.name);\n        });\n        if (dependIndicesInTable.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related indices of ${tableName}#${columnName}: ${dependIndicesInTable.map(index => index.name).join(\", \")}`);\n\n        const dropPromises = dependIndicesInTable.map(index => {\n            tableSchema.removeIndex(index);\n            return this.queryRunner.dropIndex(tableSchema.name, index.name);\n        });\n\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(tableName: string, columnName: string): Promise<void> {\n\n        const allForeignKeyMetadatas = this.connection.entityMetadatas.reduce(\n            (all, metadata) => all.concat(metadata.foreignKeys),\n            [] as ForeignKeyMetadata[]\n        );\n\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\n        if (!tableSchema)\n            return;\n\n        // find depend foreign keys to drop them\n        const dependForeignKeys = allForeignKeyMetadatas.filter(foreignKey => {\n            if (foreignKey.tableName === tableName) {\n                return !!foreignKey.columns.find(fkColumn => {\n                    return fkColumn.databaseName === columnName;\n                });\n            } else if (foreignKey.referencedTableName === tableName) {\n                return !!foreignKey.referencedColumns.find(fkColumn => {\n                    return fkColumn.databaseName === columnName;\n                });\n            }\n            return false;\n        });\n        if (!dependForeignKeys.length)\n            return;\n\n        const dependForeignKeyInTable = dependForeignKeys.filter(fk => {\n            return !!tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === fk.name);\n        });\n        if (dependForeignKeyInTable.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableName}#${columnName}: ${dependForeignKeyInTable.map(foreignKey => foreignKey.name).join(\", \")}`);\n        const foreignKeySchemas = dependForeignKeyInTable.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\n        tableSchema.removeForeignKeys(foreignKeySchemas);\n        await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemas);\n    }\n\n    /**\n     * Creates new column schemas from the given column metadatas.\n     */\n    protected metadataColumnsToColumnSchemas(columns: ColumnMetadata[]): ColumnSchema[] {\n        return columns.map(columnMetadata => {\n            return ColumnSchema.create(\n                columnMetadata,\n                this.connection.driver.normalizeType(columnMetadata),\n                this.connection.driver.normalizeDefault(columnMetadata),\n            );\n        });\n    }\n\n}","import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\n\n/**\n * Microsoft Sql Server specific connection options.\n */\nexport interface SqlServerConnectionOptions extends BaseConnectionOptions {\n\n    /**\n     * Database type.\n     */\n    readonly type: \"mssql\";\n\n    /**\n     * Connection url where perform connection to.\n     */\n    readonly url?: string;\n\n    /**\n     * Database host.\n     */\n    readonly host?: string;\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number;\n\n    /**\n     * Database username.\n     */\n    readonly username?: string;\n\n    /**\n     * Database password.\n     */\n    readonly password?: string;\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string;\n\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {SqlServerQueryRunner} from \"./SqlServerQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {SqlServerConnectionOptions} from \"./SqlServerConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\n\n/**\n * Organizes communication with SQL Server DBMS.\n */\nexport class SqlServerDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Connection options.\n     */\n    options: SqlServerConnectionOptions;\n\n    /**\n     * SQL Server library.\n     */\n    mssql: any;\n\n    /**\n     * SQL Server pool.\n     */\n    connectionPool: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"bigint\",\n        \"bit\",\n        \"decimal\",\n        \"int\",\n        \"money\",\n        \"numeric\",\n        \"smallint\",\n        \"smallmoney\",\n        \"tinyint\",\n        \"float\",\n        \"real\",\n        \"date\",\n        \"datetime2\",\n        \"datetime\",\n        \"datetimeoffset\",\n        \"smalldatetime\",\n        \"time\",\n        \"char\",\n        \"text\",\n        \"varchar\",\n        \"nchar\",\n        \"ntext\",\n        \"nvarchar\",\n        \"binary\",\n        \"image\",\n        \"varbinary\",\n        \"cursor\",\n        \"hierarchyid\",\n        \"sql_variant\",\n        \"table\",\n        \"timestamp\",\n        \"uniqueidentifier\",\n        \"xml\"\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"getdate()\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"getdate()\",\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n    };\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as SqlServerConnectionOptions;\n        Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n\n        // validate options to make sure everything is set\n        if (!this.options.host)\n            throw new DriverOptionNotSetError(\"host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // load mssql package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            server: this.options.host,\n            user: this.options.username,\n            password: this.options.password,\n            database: this.options.database,\n            port: this.options.port\n        }, this.options.extra || {});\n\n        // set default useUTC option if it hasn't been set\n        if (!options.options) options.options = { useUTC: false };\n        else if (!options.options.useUTC) options.options.useUTC = false; \n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            const connection = new this.mssql.ConnectionPool(options).connect((err: any) => {\n                if (err) return fail(err);\n                this.connectionPool = connection;\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.connectionPool)\n            return Promise.reject(new ConnectionIsNotSetError(\"mssql\"));\n\n        this.connectionPool.close();\n        this.connectionPool = undefined;\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        return new SqlServerQueryRunner(this);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Array) {\n                return value.map((v: any) => {\n                    escapedParameters.push(v);\n                    return \"@\" + (escapedParameters.length - 1);\n                }).join(\", \");\n            } else {\n                escapedParameters.push(value);\n            }\n            return \"@\" + (escapedParameters.length - 1);\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.type === Boolean) {\n            return value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.parse(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number, array?: string|boolean }): string {\n        let type = \"\";\n        if (column.type === Number) {\n            type += \"int\";\n\n        } else if (column.type === String) {\n            type += \"nvarchar\";\n\n        } else if (column.type === Date) {\n            type += \"datetime\";\n\n        } else if (column.type === Boolean) {\n            type += \"bit\";\n\n        } else if (column.type === Object) {\n            type += \"ntext\";\n\n        } else if (column.type === \"simple-array\") {\n            type += \"ntext\";\n\n        } else {\n            type += column.type;\n        }\n\n        // make sure aliases to have original type names\n        if (type === \"integer\")\n            type = \"int\";\n\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n\n        } else if (column.precision && column.scale) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision) {\n            type += \"(\" + column.precision + \")\";\n\n        } else if (column.scale) {\n            type += \"(\" + column.scale + \")\";\n        }\n\n        // set default required length if those were not specified\n        if (type === \"varchar\" || type === \"nvarchar\")\n            type += \"(255)\";\n\n        return type;\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        if (typeof column.default === \"number\") {\n            return \"\" + column.default;\n\n        } else if (typeof column.default === \"boolean\") {\n            return column.default === true ? \"1\" : \"0\";\n\n        } else if (typeof column.default === \"function\") {\n            return \"(\" + column.default() + \")\";\n\n        } else if (typeof column.default === \"string\") {\n            return `'${column.default}'`;\n\n        } else {\n            return column.default;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mssql = PlatformTools.load(\"mssql\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SQL Server\", \"mssql\");\n        }\n    }\n\n}\n","/**\n * Thrown when a transaction is required for the current operation, but there is none open.\n */\nexport class PessimisticLockTransactionRequiredError extends Error {\n    name = \"PessimisticLockTransactionRequiredError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, PessimisticLockTransactionRequiredError.prototype);\n        this.message = `An open transaction is required for pessimistic lock.`;\n    }\n\n}","/**\n * Thrown when an entity does not have no version and no update date column.\n */\nexport class NoVersionOrUpdateDateColumnError extends Error {\n    name = \"NoVersionOrUpdateDateColumnError\";\n\n    constructor(entity: string) {\n        super();\n        Object.setPrototypeOf(this, NoVersionOrUpdateDateColumnError.prototype);\n        this.message = `Entity ${entity} does not have version or update date columns.`;\n    }\n\n}","/**\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\n */\nexport class OptimisticLockVersionMismatchError extends Error {\n    name = \"OptimisticLockVersionMismatchError\";\n\n    constructor(entity: string, expectedVersion: number|Date, actualVersion: number|Date) {\n        super();\n        Object.setPrototypeOf(this, OptimisticLockVersionMismatchError.prototype);\n        this.message = `The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`;\n    }\n\n}\n","/**\n * Thrown when an optimistic lock cannot be used in query builder.\n */\nexport class OptimisticLockCanNotBeUsedError extends Error {\n    name = \"OptimisticLockCanNotBeUsedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, OptimisticLockCanNotBeUsedError.prototype);\n        this.message = `The optimistic lock can be used only with getOne() method.`;\n    }\n\n}\n","import {RelationIdAttribute} from \"./RelationIdAttribute\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RelationIdLoadResult} from \"./RelationIdLoadResult\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\n\nexport class RelationIdLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected relationIdAttributes: RelationIdAttribute[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async load(rawEntities: any[]): Promise<RelationIdLoadResult[]> {\n\n        const promises = this.relationIdAttributes.map(async relationIdAttr => {\n\n            if (relationIdAttr.relation.isManyToOne || relationIdAttr.relation.isOneToOneOwner) {\n                // example: Post and Tag\n                // loadRelationIdAndMap(\"post.tagId\", \"post.tag\")\n                // we expect it to load id of tag\n\n                if (relationIdAttr.queryBuilderFactory)\n                    throw new Error(\"Additional condition can not be used with ManyToOne or OneToOne owner relations.\");\n\n                const results = rawEntities.map(rawEntity => {\n                    const result: ObjectLiteral = {};\n                    relationIdAttr.relation.joinColumns.forEach(joinColumn => {\n                        result[joinColumn.databaseName] = rawEntity[relationIdAttr.parentAlias + \"_\" + joinColumn.databaseName];\n                    });\n\n                    relationIdAttr.relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n                        result[primaryColumn.databaseName] = rawEntity[relationIdAttr.parentAlias + \"_\" + primaryColumn.databaseName];\n                    });\n                    return result;\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results: results\n                };\n\n            } else if (relationIdAttr.relation.isOneToMany || relationIdAttr.relation.isOneToOneNotOwner) {\n                // example: Post and Category\n                // loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // we expect it to load array of category ids\n\n                const relation = relationIdAttr.relation; // \"post.categories\"\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\n                const table = relation.inverseEntityMetadata.target; // category\n                const tableName = relation.inverseEntityMetadata.tableName; // category\n                const tableAlias = relationIdAttr.alias || tableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\n\n                const parameters: ObjectLiteral = {};\n                const condition = rawEntities.map((rawEntity, index) => {\n                    return joinColumns.map(joinColumn => {\n                        const parameterName = joinColumn.databaseName + index;\n                        parameters[parameterName] = rawEntity[relationIdAttr.parentAlias + \"_\" + joinColumn.referencedColumn!.databaseName];\n                        return tableAlias + \".\" + joinColumn.propertyPath + \" = :\" + parameterName;\n                    }).join(\" AND \");\n                }).map(condition => \"(\" + condition + \")\")\n                    .join(\" OR \");\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (!condition)\n                    return { relationIdAttribute: relationIdAttr, results: [] };\n\n                // generate query:\n                // SELECT category.id, category.postId FROM category category ON category.postId = :postId\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n\n                joinColumns.forEach(joinColumn => {\n                    qb.addSelect(tableAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName);\n                });\n\n                relation.inverseRelation!.entityMetadata.primaryColumns.forEach(primaryColumn => {\n                    qb.addSelect(tableAlias + \".\" + primaryColumn.propertyPath, primaryColumn.databaseName);\n                });\n\n                qb.from(table, tableAlias)\n                    .where(\"(\" + condition + \")\") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect\n                    .setParameters(parameters);\n\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results: await qb.getRawMany()\n                };\n\n            } else {\n                // example: Post and Category\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\n                // we expect it to load array of post ids\n\n                const relation = relationIdAttr.relation;\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.inverseJoinColumns;\n                const inverseJoinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\n                const junctionAlias = relationIdAttr.junctionAlias;\n                const inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;\n                const inverseSideTableAlias = relationIdAttr.alias || inverseSideTableName;\n                const junctionTableName = relation.junctionEntityMetadata!.tableName;\n\n                const mappedColumns = rawEntities.map(rawEntity => {\n                    return joinColumns.reduce((map, joinColumn) => {\n                        map[joinColumn.propertyPath] = rawEntity[relationIdAttr.parentAlias + \"_\" + joinColumn.referencedColumn!.databaseName];\n                        return map;\n                    }, {} as ObjectLiteral);\n                });\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (mappedColumns.length === 0)\n                    return { relationIdAttribute: relationIdAttr, results: [] };\n\n                const parameters: ObjectLiteral = {};\n                const joinColumnConditions = mappedColumns.map((mappedColumn, index) => {\n                    return Object.keys(mappedColumn).map(key => {\n                        const parameterName = key + index;\n                        parameters[parameterName] = mappedColumn[key];\n                        return junctionAlias + \".\" + key + \" = :\" + parameterName;\n                    }).join(\" AND \");\n                });\n\n                const inverseJoinColumnCondition = inverseJoinColumns.map(joinColumn => {\n                    return junctionAlias + \".\" + joinColumn.propertyPath + \" = \" + inverseSideTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                const condition = joinColumnConditions.map(condition => {\n                    return \"(\" + condition + \" AND \" + inverseJoinColumnCondition + \")\";\n                }).join(\" OR \");\n\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n\n                inverseJoinColumns.forEach(joinColumn => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n\n                joinColumns.forEach(joinColumn => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n\n                qb.from(inverseSideTableName, inverseSideTableAlias)\n                    .innerJoin(junctionTableName, junctionAlias, condition)\n                    .setParameters(parameters);\n\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results: await qb.getRawMany()\n                };\n            }\n        });\n\n        return Promise.all(promises);\n    }\n\n}","import {RelationIdAttribute} from \"./RelationIdAttribute\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {RelationIdMetadata} from \"../../metadata/RelationIdMetadata\";\n\nexport class RelationIdMetadataToAttributeTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform() {\n\n        // by example:\n        // post has relation id:\n        // @RelationId(post => post.categories) categoryIds\n        // category has relation id\n        // @RelationId(category => category.images) imageIds\n        // we load post and join category\n        // we expect post.categoryIds and post.category.imageIds to have relation ids\n\n        // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationIds.forEach(relationId => {\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias!.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        }\n\n        // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(join => {\n\n            // ensure this join has a metadata, because relation id can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n\n            join.metadata.relationIds.forEach(relationId => {\n                const attribute = this.metadataToAttribute(join.alias.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private metadataToAttribute(parentAliasName: string, relationId: RelationIdMetadata): RelationIdAttribute {\n        return new RelationIdAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationId.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationId.propertyName, // category.imageIds\n            alias: relationId.alias,\n            queryBuilderFactory: relationId.queryBuilderFactory\n        });\n    }\n\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RelationCountAttribute} from \"./RelationCountAttribute\";\nimport {RelationCountLoadResult} from \"./RelationCountLoadResult\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\n\nexport class RelationCountLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected relationCountAttributes: RelationCountAttribute[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async load(rawEntities: any[]): Promise<RelationCountLoadResult[]> {\n\n        const promises = this.relationCountAttributes.map(async relationCountAttr => {\n\n            if (relationCountAttr.relation.isOneToMany) {\n                // example: Post and Category\n                // loadRelationCountAndMap(\"post.categoryCount\", \"post.categories\")\n                // we expect it to load array of post ids\n\n                // todo(dima): fix issues wit multiple primary keys and remove joinColumns[0]\n                const relation = relationCountAttr.relation; // \"category.posts\"\n                const inverseRelation = relation.inverseRelation!; // \"post.category\"\n                const referenceColumnName = inverseRelation.joinColumns[0].referencedColumn!.propertyName; // post id\n                const inverseSideTable = relation.inverseEntityMetadata.target; // Post\n                const inverseSideTableName = relation.inverseEntityMetadata.tableName; // post\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\n                const inverseSidePropertyName = inverseRelation.propertyName; // \"category\" from \"post.category\"\n\n                const referenceColumnValues = rawEntities\n                    .map(rawEntity => rawEntity[relationCountAttr.parentAlias + \"_\" + referenceColumnName])\n                    .filter(value => !!value);\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (referenceColumnValues.length === 0)\n                    return { relationCountAttribute: relationCountAttr, results: [] };\n\n                // generate query:\n                // SELECT category.post as parentId, COUNT(category.id) AS cnt FROM category category WHERE category.post IN (1, 2) GROUP BY category.post\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                qb.select(inverseSideTableAlias + \".\" + inverseSidePropertyName, \"parentId\")\n                    .addSelect(\"COUNT(\" + qb.escape(inverseSideTableAlias) + \".\" + qb.escape(referenceColumnName) + \")\", \"cnt\")\n                    .from(inverseSideTable, inverseSideTableAlias)\n                    .where(inverseSideTableAlias + \".\" + inverseSidePropertyName + \" IN (:ids)\")\n                    .addGroupBy(inverseSideTableAlias + \".\" + inverseSidePropertyName)\n                    .setParameter(\"ids\", referenceColumnValues);\n\n                // apply condition (custom query builder factory)\n                if (relationCountAttr.queryBuilderFactory)\n                    relationCountAttr.queryBuilderFactory(qb);\n\n                return {\n                    relationCountAttribute: relationCountAttr,\n                    results: await qb.getRawMany()\n                };\n\n            } else {\n                // example: Post and Category\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\n                // we expect it to load array of post ids\n\n                let joinTableColumnName: string;\n                let inverseJoinColumnName: string;\n                let firstJunctionColumn: ColumnMetadata;\n                let secondJunctionColumn: ColumnMetadata;\n\n                if (relationCountAttr.relation.isOwning) { // todo fix joinColumns[0] and inverseJoinColumns[0].\n                    joinTableColumnName = relationCountAttr.relation.joinColumns[0].referencedColumn!.databaseName;\n                    inverseJoinColumnName = relationCountAttr.relation.inverseJoinColumns[0].referencedColumn!.databaseName;\n                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[0];\n                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[1];\n\n                } else {\n                    joinTableColumnName = relationCountAttr.relation.inverseRelation!.inverseJoinColumns[0].referencedColumn!.databaseName;\n                    inverseJoinColumnName = relationCountAttr.relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\n                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[1];\n                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[0];\n                }\n\n                const referenceColumnValues = rawEntities\n                    .map(rawEntity => rawEntity[relationCountAttr.parentAlias + \"_\" + joinTableColumnName])\n                    .filter(value => value);\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (referenceColumnValues.length === 0)\n                    return { relationCountAttribute: relationCountAttr, results: [] };\n\n                const junctionAlias = relationCountAttr.junctionAlias;\n                const inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                const junctionTableName = relationCountAttr.relation.junctionEntityMetadata!.tableName;\n                const condition = junctionAlias + \".\" + firstJunctionColumn.propertyName + \" IN (\" + referenceColumnValues + \")\" +\n                    \" AND \" + junctionAlias + \".\" + secondJunctionColumn.propertyName + \" = \" + inverseSideTableAlias + \".\" + inverseJoinColumnName;\n\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                qb.select(junctionAlias + \".\" + firstJunctionColumn.propertyName, \"parentId\")\n                    .addSelect(\"COUNT(\" + qb.escape(inverseSideTableAlias) + \".\" + qb.escape(inverseJoinColumnName) + \")\", \"cnt\")\n                    .from(inverseSideTableName, inverseSideTableAlias)\n                    .innerJoin(junctionTableName, junctionAlias, condition)\n                    .addGroupBy(junctionAlias + \".\" + firstJunctionColumn.propertyName);\n\n                // apply condition (custom query builder factory)\n                if (relationCountAttr.queryBuilderFactory)\n                    relationCountAttr.queryBuilderFactory(qb);\n\n                return {\n                    relationCountAttribute: relationCountAttr,\n                    results: await qb.getRawMany()\n                };\n            }\n        });\n\n        return Promise.all(promises);\n    }\n\n}","import {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n/**\n * Arguments for RelationCountMetadata class.\n */\nexport interface RelationCountMetadataArgs {\n\n    /**\n     * Class to which this decorator is applied.\n     */\n    readonly target: Function;\n\n    /**\n     * Class's property name to which this decorator is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Target's relation which it should count.\n     */\n    readonly relation: string|((object: any) => any);\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    readonly alias?: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    readonly queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n}\n","import {RelationCountMetadataArgs} from \"../metadata-args/RelationCountMetadataArgs\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationCountMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Relation which needs to be counted.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string|((object: any) => any);\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: RelationCountMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation count metadata properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationCount decorator.`);\n\n        this.relation = relation;\n    }\n\n}","import {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {RelationCountMetadata} from \"../../metadata/RelationCountMetadata\";\nimport {RelationCountAttribute} from \"./RelationCountAttribute\";\n\nexport class RelationCountMetadataToAttributeTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform() {\n\n        // by example:\n        // post has relation count:\n        // @RelationCount(post => post.categories) categoryCount\n        // category has relation count\n        // @RelationCount(category => category.images) imageCount\n        // we load post and join category\n        // we expect post.categoryCount and post.category.imageCount to have relation counts\n\n        // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationCounts.forEach(relationCount => {\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias!.name, relationCount);\n                this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        }\n\n        // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(join => {\n\n            // ensure this join has a metadata, because relation count can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n\n            join.metadata.relationCounts.forEach(relationCount => {\n                const attribute = this.metadataToAttribute(join.alias.name, relationCount);\n                this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private metadataToAttribute(parentAliasName: string, relationCount: RelationCountMetadata): RelationCountAttribute {\n        return new RelationCountAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationCount.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationCount.propertyName, // category.imageIds\n            alias: relationCount.alias,\n            queryBuilderFactory: relationCount.queryBuilderFactory\n        });\n    }\n\n}","/**\n * Thrown when selected sql driver does not supports locking.\n */\nexport class LockNotSupportedOnGivenDriverError extends Error {\n    name = \"LockNotSupportedOnGivenDriverError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, LockNotSupportedOnGivenDriverError.prototype);\n        this.message = `Locking not supported on giver driver.`;\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {MysqlDriver} from \"./MysqlDriver\";\nimport {Connection} from \"../../connection/Connection\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {ReadStream} from \"fs\";\n\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class MysqlQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Promise used to obtain a database connection from a pool for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: (string|{ up: string, down: string })[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: MysqlDriver) {\n        this.connection = driver.connection;\n        this.manager = driver.connection.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        this.databaseConnectionPromise = new Promise((ok, fail) => {\n            this.driver.pool.getConnection((err: any, dbConnection: any) => {\n                this.databaseConnection = dbConnection;\n                err ? fail(err) : ok(dbConnection);\n            });\n        });\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        if (this.databaseConnection)\n            this.databaseConnection.release();\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n        await this.query(\"START TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a raw SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            databaseConnection.query(query, parameters, (err: any, result: any) => {\n                if (err) {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError(err, this);\n                    return fail(err);\n                }\n\n                ok(result);\n            });\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const stream = databaseConnection.query(query, parameters);\n            if (onEnd) stream.on(\"end\", onEnd);\n            if (onError) stream.on(\"error\", onError);\n            ok(stream);\n        });\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\\`${key}\\``).join(\", \");\n        const values = keys.map(key => \"?\").join(\",\");\n        const parameters = keys.map(key => keyValues[key]);\n        const sql = `INSERT INTO \\`${tableName}\\`(${columns}) VALUES (${values})`;\n        const result = await this.query(sql, parameters);\n        return generatedColumn ? result.insertId : undefined;\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions).join(\" AND \");\n        const sql = `UPDATE \\`${tableName}\\` SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \\`${tableName}\\` WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        // todo: escape column names as well\n        if (hasLevel) {\n            await this.query(\n                `INSERT INTO \\`${tableName}\\`(\\`ancestor\\`, \\`descendant\\`, \\`level\\`) ` +\n                `SELECT \\`ancestor\\`, ${newEntityId}, \\`level\\` + 1 FROM \\`${tableName}\\` WHERE \\`descendant\\` = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`\n            );\n        } else {\n            await this.query(\n                `INSERT INTO \\`${tableName}\\`(\\`ancestor\\`, \\`descendant\\`) ` +\n                `SELECT \\`ancestor\\`, ${newEntityId} FROM \\`${tableName}\\` WHERE \\`descendant\\` = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`\n            );\n        }\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(\\`level\\`) as \\`level\\` FROM \\`${tableName}\\` WHERE \\`descendant\\` = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        if (this.sqlMemoryMode)\n            throw new Error(`Loading table schema is not supported in sql memory mode`);\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n        const tablesSql      = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql     = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}'`;\n        const indicesSql     = `SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = '${this.dbName}' AND INDEX_NAME != 'PRIMARY'`;\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql)\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n            const primaryKeys: ObjectLiteral[] = await this.query(`SHOW INDEX FROM \\`${dbTable[\"TABLE_NAME\"]}\\` WHERE Key_name = 'PRIMARY'`);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n                    columnSchema.type = dbColumn[\"COLUMN_TYPE\"].toLowerCase();\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    columnSchema.isPrimary = dbColumn[\"COLUMN_KEY\"].indexOf(\"PRI\") !== -1;\n                    columnSchema.isUnique = dbColumn[\"COLUMN_KEY\"].indexOf(\"UNI\") !== -1;\n                    columnSchema.isGenerated = dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\n                    columnSchema.comment = dbColumn[\"COLUMN_COMMENT\"];\n                    columnSchema.precision = dbColumn[\"NUMERIC_PRECISION\"];\n                    columnSchema.scale = dbColumn[\"NUMERIC_SCALE\"];\n                    return columnSchema;\n                });\n\n            // create primary keys\n            tableSchema.primaryKeys = primaryKeys.map(primaryKey => {\n                return new PrimaryKeySchema(primaryKey[\"Key_name\"], primaryKey[\"Column_name\"]);\n            });\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = dbForeignKeys\n                .filter(dbForeignKey => dbForeignKey[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n                })\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(dbIndexName => {\n                    const currentDbIndices = dbIndices.filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName);\n                    const columnNames = currentDbIndices.map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\n\n                    // find a special index - unique index and\n                    if (currentDbIndices.length === 1 && currentDbIndices[0][\"NON_UNIQUE\"] === 0) {\n                        const column = tableSchema.columns.find(column => column.name === currentDbIndices[0][\"INDEX_NAME\"] && column.name === currentDbIndices[0][\"COLUMN_NAME\"]);\n                        if (column) {\n                            column.isUnique = true;\n                            return;\n                        }\n                    }\n\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\n                })\n                .filter(index => !!index) as IndexSchema[]; // remove empty returns\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(table: TableSchema|string): Promise<boolean> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(table: TableSchema|string, column: ColumnSchema|string): Promise<boolean> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const columnName = column instanceof ColumnSchema ? column.name : column;\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table schema and column schemas inside it.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\n        let sql = `CREATE TABLE \\`${table.name}\\` (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\\`${column.name}\\``).join(\", \")})`;\n        sql += `) ENGINE=${table.engine || \"InnoDB\"}`;\n\n        const revertSql = `DROP TABLE \\`${table.name}\\``;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Drop the table.\n     */\n    async dropTable(table: TableSchema|string): Promise<void> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const sql = `DROP TABLE \\`${tableName}\\``;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \\`${tableName}\\` ADD ${this.buildCreateColumnSql(column, false)}`;\n        const revertSql = `ALTER TABLE \\`${tableName}\\` DROP \\`${column.name}\\``;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName); // todo: throw exception, this wont work because of sql memory enabled. remove support by table name\n            if (!tableSchema)\n                throw new Error(`Table ${tableSchemaOrName} was not found.`);\n        }\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (newColumn.isUnique === false && oldColumn.isUnique === true)\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` DROP INDEX \\`${oldColumn.name}\\``); // todo: add revert code\n\n        const sql = `ALTER TABLE \\`${tableSchema.name}\\` CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(newColumn, oldColumn.isPrimary)}`;\n        const revertSql = `ALTER TABLE \\`${tableSchema.name}\\` CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, oldColumn.isPrimary)}`;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(table: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(table, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        const sql = `ALTER TABLE \\`${table.name}\\` DROP \\`${column.name}\\``;\n        const revertSql = `ALTER TABLE \\`${table.name}\\` ADD ${this.buildCreateColumnSql(column, false)}`;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\n        if (!tableSchema.hasGeneratedColumn)\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` DROP PRIMARY KEY`);\n\n        const primaryColumnNames = tableSchema.columns\n            .filter(column => column.isPrimary && !column.isGenerated)\n            .map(column => \"`\" + column.name + \"`\");\n        if (primaryColumnNames.length > 0) {\n            const sql = `ALTER TABLE \\`${tableSchema.name}\\` ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`;\n            const revertSql = `ALTER TABLE \\`${tableSchema.name}\\` DROP PRIMARY KEY`;\n            return this.schemaQuery(sql, revertSql);\n        }\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => \"`\" + column + \"`\").join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"`\" + column + \"`\").join(\",\");\n        let sql = `ALTER TABLE \\`${tableName}\\` ADD CONSTRAINT \\`${foreignKey.name}\\` ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \\`${foreignKey.referencedTableName}\\`(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        const revertSql = `ALTER TABLE \\`${tableName}\\` DROP FOREIGN KEY \\`${foreignKey.name}\\``;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \\`${tableName}\\` DROP FOREIGN KEY \\`${foreignKey.name}\\``;\n\n        const columnNames = foreignKey.columnNames.map(column => \"`\" + column + \"`\").join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"`\" + column + \"`\").join(\",\");\n        let revertSql = `ALTER TABLE \\`${tableName}\\` ADD CONSTRAINT \\`${foreignKey.name}\\` ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \\`${foreignKey.referencedTableName}\\`(${referencedColumnNames})`;\n        if (foreignKey.onDelete) revertSql += \" ON DELETE \" + foreignKey.onDelete;\n\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(table: TableSchema|string, index: IndexSchema): Promise<void> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const columns = index.columnNames.map(columnName => \"`\" + columnName + \"`\").join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \\`${index.name}\\` ON \\`${tableName}\\`(${columns})`;\n        const revertSql = `ALTER TABLE \\`${tableName}\\` DROP INDEX \\`${index.name}\\``;\n        await this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(table: TableSchema|string, index: IndexSchema|string): Promise<void> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const indexName = index instanceof IndexSchema ? index.name : index;\n        const sql = `ALTER TABLE \\`${tableName}\\` DROP INDEX \\`${indexName}\\``;\n\n        if (index instanceof IndexSchema) {\n            const columns = index.columnNames.map(columnName => \"`\" + columnName + \"`\").join(\", \");\n            const revertSql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \\`${index.name}\\` ON \\`${tableName}\\`(${columns})`;\n            await this.schemaQuery(sql, revertSql);\n\n        } else {\n            await this.query(sql);\n        }\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(table: TableSchema|string): Promise<void> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        await this.query(`TRUNCATE TABLE \\`${tableName}\\``);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n\n            await this.query(disableForeignKeysCheckQuery);\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\n            await this.query(enableForeignKeysCheckQuery);\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes sql used special for schema build.\n     */\n    protected async schemaQuery(upQuery: string, downQuery: string): Promise<void> {\n\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true) {\n            this.sqlsInMemory.push({ up: upQuery, down: downQuery });\n            return Promise.resolve() as Promise<any>;\n        }\n\n        await this.query(upQuery);\n    }\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database!;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map(key => `\\`${key}\\`=?`);\n    }\n\n    /**\n     * Builds a part of query to create/change a column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\n        let c = \"`\" + column.name + \"` \" + column.type;\n        if (column.enum)\n            c += \"(\" + column.enum.map(value => \"'\" + value + \"'\").join(\", \") +  \")\";\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isUnique === true)\n            c += \" UNIQUE\";\n        if (column.isGenerated && column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTO_INCREMENT\";\n        if (column.comment)\n            c += \" COMMENT '\" + column.comment + \"'\";\n        if (column.default !== undefined && column.default !== null)\n            c += \" DEFAULT \" + column.default;\n\n        return c;\n    }\n\n}","import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\n\n/**\n * MySQL specific connection options.\n */\nexport interface MysqlConnectionOptions extends BaseConnectionOptions {\n\n    /**\n     * Database type.\n     */\n    readonly type: \"mysql\"|\"mariadb\";\n\n    /**\n     * Connection url where perform connection to.\n     */\n    readonly url?: string;\n\n    /**\n     * Database host.\n     */\n    readonly host?: string;\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number;\n\n    /**\n     * Database username.\n     */\n    readonly username?: string;\n\n    /**\n     * Database password.\n     */\n    readonly password?: string;\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string;\n\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {MysqlConnectionOptions} from \"./MysqlConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\n\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class MysqlDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Connection options.\n     */\n    options: MysqlConnectionOptions;\n\n    /**\n     * Mysql underlying library.\n     */\n    mysql: any;\n\n    /**\n     * Database connection pool created by underlying driver.\n     */\n    pool: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n     * @see https://dev.mysql.com/doc/refman/5.7/en/data-types.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"float\",\n        \"double\",\n        \"decimal\",\n        \"date\",\n        \"datetime\",\n        \"timestamp\",\n        \"time\",\n        \"year\",\n        \"char\",\n        \"varchar\",\n        \"blob\",\n        \"text\",\n        \"tinyblob\",\n        \"tinytext\",\n        \"mediumblob\",\n        \"mediumtext\",\n        \"longblob\",\n        \"longtext\",\n        \"enum\",\n        \"json\"\n    ];\n\n    /**\n     * ORM has special columns and we need to know what database column types should be for those columns.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\"\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    \n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as MysqlConnectionOptions;\n\n        Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n\n        // validate options to make sure everything is set\n        if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)))\n            throw new DriverOptionNotSetError(\"socketPath and host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // load mysql package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            host: this.options.host,\n            user: this.options.username,\n            password: this.options.password,\n            database: this.options.database,\n            port: this.options.port\n        }, this.options.extra || {});\n\n        this.pool = this.mysql.createPool(options);\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\n\n        return new Promise<void>((ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n            this.pool.end(handler);\n            this.pool = undefined;\n        });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        return new MysqlQueryRunner(this);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            escapedParameters.push(parameters[key.substr(1)]);\n            return \"?\";\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.type === Boolean) {\n            return value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.parse(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number }): string {\n        let type = \"\";\n        if (column.type === Number) {\n            type += \"int\";\n\n        } else if (column.type === String) {\n            type += \"varchar\";\n\n        } else if (column.type === Date) {\n            type += \"datetime\";\n\n        } else if (column.type === Boolean) {\n            type += \"tinyint(1)\";\n\n        } else if (column.type === Object) {\n            type += \"text\";\n\n        } else if (column.type === \"simple-array\") {\n            type += \"text\";\n\n        } else {\n            type += column.type;\n        }\n\n        // normalize shortcuts\n        if (type === \"integer\")\n            type = \"int\";\n\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n\n        } else if (column.precision && column.scale) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision) {\n            type += \"(\" + column.precision + \")\";\n\n        } else if (column.scale) {\n            type += \"(\" + column.scale + \")\";\n        }\n\n        // set default required length if those were not specified\n        if (type === \"varchar\")\n            type += \"(255)\";\n\n        if (type === \"int\")\n            type += \"(11)\";\n\n        if (type === \"tinyint\")\n            type += \"(4)\";\n\n        if (type === \"smallint\")\n            type += \"(5)\";\n\n        if (type === \"mediumint\")\n            type += \"(9)\";\n\n        if (type === \"bigint\")\n            type += \"(20)\";\n\n        if (type === \"year\")\n            type += \"(4)\";\n\n        return type;\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        if (typeof column.default === \"number\") {\n            return \"\" + column.default;\n\n        } else if (typeof column.default === \"boolean\") {\n            return column.default === true ? \"1\" : \"0\";\n\n        } else if (typeof column.default === \"function\") {\n            return column.default();\n\n        } else if (typeof column.default === \"string\") {\n            return `'${column.default}'`;\n\n        } else {\n            return column.default;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\n\n        } catch (e) {\n            try {\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\n\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\n            }\n        }\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {PostgresDriver} from \"./PostgresDriver\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {Connection} from \"../../connection/Connection\";\nimport {ReadStream} from \"fs\";\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class PostgresQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Special callback provided by a driver used to release a created connection.\n     */\n    protected releaseCallback: Function;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: PostgresDriver) {\n        this.connection = driver.connection;\n        this.manager = driver.connection.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        this.databaseConnectionPromise = new Promise((ok, fail) => {\n            this.driver.pool.connect((err: any, connection: any, release: Function) => {\n                if (err) return fail(err);\n\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n\n                connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any) => {\n                    if (err) {\n                        this.driver.connection.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`, [], this);\n                        this.driver.connection.logger.logQueryError(err, this);\n                        fail(err);\n                    } else {\n                        ok(connection);\n                    }\n                });\n\n            });\n        });\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        if (this.releaseCallback)\n            this.releaseCallback();\n\n        const index = this.driver.connectedQueryRunners.indexOf(this);\n        if (index !== -1) this.driver.connectedQueryRunners.splice(index);\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n        await this.query(\"START TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // console.log(\"query: \", query);\n        // console.log(\"parameters: \", parameters);\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            databaseConnection.query(query, parameters, (err: any, result: any) => {\n                if (err) {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError(err, this);\n                    fail(err);\n                } else {\n                    ok(result.rows);\n                }\n            });\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        const QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const stream = databaseConnection.query(new QueryStream(query, parameters));\n            if (onEnd) stream.on(\"end\", onEnd);\n            if (onError) stream.on(\"error\", onError);\n            ok(stream);\n        });\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\n        const sql = columns.length > 0\n            ? `INSERT INTO \"${tableName}\"(${columns}) VALUES (${values}) ${ generatedColumn ? ` RETURNING \"${generatedColumn.databaseName}\"` : \"\" }`\n            : `INSERT INTO \"${tableName}\" DEFAULT VALUES ${ generatedColumn ? ` RETURNING \"${generatedColumn.databaseName}\"` : \"\" }`;\n        const parameters = keys.map(key => keyValues[key]);\n        const result: ObjectLiteral[] = await this.query(sql, parameters);\n        if (generatedColumn)\n            return result[0][generatedColumn.databaseName];\n\n        return result;\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\n        const query = `UPDATE \"${tableName}\" SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(query, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \"${tableName}\" WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\", \"level\") ` +\n                `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\") ` +\n                `SELECT \"ancestor\", ${newEntityId} FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql      = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name IN (${tableNamesString})`;\n        const columnsSql     = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}'`;\n        const indicesSql     = `SELECT t.relname AS table_name, i.relname AS index_name, a.attname AS column_name  FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace ns\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN (${tableNamesString}) AND t.relnamespace = ns.OID AND ns.nspname ='${this.schemaName}' ORDER BY t.relname, i.relname`;\n        const foreignKeysSql = `SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND constraint_type = 'FOREIGN KEY'`;\n        const uniqueKeysSql  = `SELECT * FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND constraint_type = 'UNIQUE'`;\n        const primaryKeysSql = `SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\nwhere constraint_type = 'PRIMARY KEY' AND c.table_schema = '${this.schemaName}' and tc.table_catalog = '${this.dbName}'`;\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbUniqueKeys, primaryKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n            this.query(uniqueKeysSql),\n            this.query(primaryKeysSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return dbTables.map(dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"table_name\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"table_name\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const columnType = dbColumn[\"data_type\"].toLowerCase() + (dbColumn[\"character_maximum_length\"] !== undefined && dbColumn[\"character_maximum_length\"] !== null ? (\"(\" + dbColumn[\"character_maximum_length\"] + \")\") : \"\");\n                    const isGenerated = dbColumn[\"column_default\"] === `nextval('${dbColumn[\"table_name\"]}_id_seq'::regclass)` \n                        || dbColumn[\"column_default\"] === `nextval('\"${dbColumn[\"table_name\"]}_id_seq\"'::regclass)` \n                        || /^uuid\\_generate\\_v\\d\\(\\)/.test(dbColumn[\"column_default\"]);\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"column_name\"];\n                    columnSchema.type = columnType;\n                    columnSchema.default = dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined ? dbColumn[\"column_default\"].replace(/::character varying/, \"\") : undefined;\n                    columnSchema.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                    // columnSchema.isPrimary = dbColumn[\"column_key\"].indexOf(\"PRI\") !== -1;\n                    columnSchema.isGenerated = isGenerated;\n                    columnSchema.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                    columnSchema.isUnique = !!dbUniqueKeys.find(key => key[\"constraint_name\"] ===  `uk_${dbColumn[\"table_name\"]}_${dbColumn[\"column_name\"]}`);\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = primaryKeys\n                .filter(primaryKey => primaryKey[\"table_name\"] === tableSchema.name)\n                .map(primaryKey => new PrimaryKeySchema(primaryKey[\"constraint_name\"], primaryKey[\"column_name\"]));\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = dbForeignKeys\n                .filter(dbForeignKey => dbForeignKey[\"table_name\"] === tableSchema.name)\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"constraint_name\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create unique key schemas from the loaded indices\n            /*tableSchema.uniqueKeys = dbUniqueKeys\n                .filter(dbUniqueKey => dbUniqueKey[\"table_name\"] === tableSchema.name)\n                .map(dbUniqueKey => {\n                    return new UniqueKeySchema(dbUniqueKey[\"TABLE_NAME\"], dbUniqueKey[\"CONSTRAINT_NAME\"], [/!* todo *!/]);\n                });*/\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return dbIndex[\"table_name\"] === tableSchema.name &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"index_name\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"index_name\"])) &&\n                        (!dbUniqueKeys.find(key => key[\"constraint_name\"] === dbIndex[\"index_name\"]));\n                })\n                .map(dbIndex => dbIndex[\"index_name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(dbIndexName => {\n                    const columnNames = dbIndices\n                        .filter(dbIndex => dbIndex[\"table_name\"] === tableSchema.name && dbIndex[\"index_name\"] === dbIndexName)\n                        .map(dbIndex => dbIndex[\"column_name\"]);\n\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\n                });\n\n            return tableSchema;\n        });\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\n        await this.query(`CREATE SCHEMA IF NOT EXISTS \"${this.schemaName}\"`);\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        sql += table.columns\n            .filter(column => column.isUnique)\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\n            .join(\" \");\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        let sql = `DROP TABLE \"${tableName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}' AND column_name = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column, false)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (oldColumn.type !== newColumn.type ||\n            oldColumn.name !== newColumn.name) {\n\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\n            if (oldColumn.type !== newColumn.type) {\n                sql += ` TYPE ${newColumn.type}`;\n            }\n            if (oldColumn.name !== newColumn.name) { // todo: make rename in a separate query too\n                sql += ` RENAME TO ` + newColumn.name;\n            }\n            await this.query(sql);\n        }\n\n        if (oldColumn.isNullable !== newColumn.isNullable) {\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\n            if (newColumn.isNullable) {\n                sql += ` DROP NOT NULL`;\n            } else {\n                sql += ` SET NOT NULL`;\n            }\n            await this.query(sql);\n        }\n\n        // update sequence generation\n        if (oldColumn.isGenerated !== newColumn.isGenerated) {\n            if (!oldColumn.isGenerated && newColumn.type !== \"uuid\") {\n                await this.query(`CREATE SEQUENCE \"${tableSchema.name}_id_seq\" OWNED BY \"${tableSchema.name}\".\"${oldColumn.name}\"`);\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT nextval('\"${tableSchema.name}_id_seq\"')`);\n            } else {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`);\n                await this.query(`DROP SEQUENCE \"${tableSchema.name}_id_seq\"`);\n            }\n        }\n\n        if (oldColumn.comment !== newColumn.comment) {\n            await this.query(`COMMENT ON COLUMN \"${tableSchema.name}\".\"${oldColumn.name}\" is '${newColumn.comment}'`);\n        }\n\n        if (oldColumn.isUnique !== newColumn.isUnique) {\n            if (newColumn.isUnique === true) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\n\n            } else if (newColumn.isUnique === false) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\n\n            }\n        }\n\n        if (newColumn.default !== oldColumn.default) {\n            if (newColumn.default !== null && newColumn.default !== undefined) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`);\n\n            } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`);\n\n            }\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        return this.query(`ALTER TABLE \"${table.name}\" DROP \"${column.name}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"${primaryKey.columnName}\"`);\n        await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT IF EXISTS \"${dbTable.name}_pkey\"`);\n        await this.query(`DROP INDEX IF EXISTS \"${dbTable.name}_pkey\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (\"${foreignKey.columnNames.join(\"\\\", \\\"\")}\") ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(\"${foreignKey.referencedColumnNames.join(\"\\\", \\\"\")}\")`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string, isGenerated: boolean = false): Promise<void> {\n        if (isGenerated) {\n            await this.query(`ALTER SEQUENCE \"${tableName}_id_seq\" OWNED BY NONE`);\n        }\n\n        const sql = `DROP INDEX \"${indexName}\"`; // todo: make sure DROP INDEX should not be used here\n        await this.query(sql);\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const selectDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname = '${this.schemaName}'`;\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database!;\n    }\n\n    /**\n     * Schema name shortcut.\n     */\n    protected get schemaName() {\n        return this.driver.options.schemaName || \"default\";\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => \"\\\"\" + key + \"\\\"=$\" + (startIndex + index + 1));\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column.isGenerated === true && column.type !== \"uuid\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" SERIAL\";\n        if (!column.isGenerated || column.type === \"uuid\")\n            c += \" \" + column.type;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isGenerated)\n            c += \" PRIMARY KEY\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            c += \" DEFAULT \" + column.default;\n        }\n        if (column.isGenerated && column.type === \"uuid\" && !column.default)\n            c += \" DEFAULT uuid_generate_v4()\";\n        return c;\n    }\n\n}","import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\n\n/**\n * Postgres-specific connection options.\n */\nexport interface PostgresConnectionOptions extends BaseConnectionOptions {\n\n    /**\n     * Database type.\n     */\n    readonly type: \"postgres\";\n\n    /**\n     * Connection url where perform connection to.\n     */\n    readonly url?: string;\n\n    /**\n     * Database host.\n     */\n    readonly host?: string;\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number;\n\n    /**\n     * Database username.\n     */\n    readonly username?: string;\n\n    /**\n     * Database password.\n     */\n    readonly password?: string;\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string;\n\n    /**\n     * Schema name. By default is \"public\".\n     */\n    readonly schemaName?: string;\n\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {PostgresQueryRunner} from \"./PostgresQueryRunner\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {PostgresConnectionOptions} from \"./PostgresConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\n\n/**\n * Organizes communication with PostgreSQL DBMS.\n */\nexport class PostgresDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Connection options.\n     */\n    options: PostgresConnectionOptions;\n\n    /**\n     * Postgres underlying library.\n     */\n    postgres: any;\n\n    /**\n     * Database connection pool created by underlying driver.\n     */\n    pool: any;\n\n    /**\n     * We store all created query runners because we need to release them.\n     */\n    connectedQueryRunners: QueryRunner[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/postgresql/postgresql_data_types.htm\n     * @see https://www.postgresql.org/docs/9.2/static/datatype.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"smallint\",\n        \"integer\",\n        \"bigint\",\n        \"decimal\",\n        \"numeric\",\n        \"real\",\n        \"double precision\",\n        \"smallserial\",\n        \"serial\",\n        \"bigserial\",\n        \"money\",\n        \"character varying\",\n        \"varchar\",\n        \"character\",\n        \"char\",\n        \"text\",\n        \"bytea\",\n        \"timestamp\",\n        \"timestamp without time zone\",\n        \"timestamp with time zone\",\n        \"date\",\n        \"time\",\n        \"time without time zone\",\n        \"time with time zone\",\n        \"interval\",\n        \"boolean\",\n        \"enum\",\n        \"point\",\n        \"line\",\n        \"lseg\",\n        \"box\",\n        \"path\",\n        \"polygon\",\n        \"circle\",\n        \"cidr\",\n        \"inet\",\n        \"macaddr\",\n        \"tsvector\",\n        \"tsquery\",\n        \"uuid\",\n        \"xml\",\n        \"json\",\n        \"jsonb\"\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"now()\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"now()\",\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as PostgresConnectionOptions;\n\n        Object.assign(this.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n\n        // validate options to make sure everything is set\n        if (!this.options.host)\n            throw new DriverOptionNotSetError(\"host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // load postgres package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            host: this.options.host,\n            user: this.options.username,\n            password: this.options.password,\n            database: this.options.database,\n            port: this.options.port\n        }, this.options.extra || {});\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        this.pool = new this.postgres.Pool(options);\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"postgres\"));\n\n        return new Promise<void>(async (ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n\n            // this is checked fact that postgres.pool.end do not release all non released connections\n            // await Promise.all(this.connectedQueryRunners.map(queryRunner => queryRunner.release()));\n            this.pool.end(handler);\n            this.pool = undefined;\n            ok();\n        });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        return new PostgresQueryRunner(this);\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n\n        } else if (columnMetadata.type === \"json\" || columnMetadata.type === \"jsonb\") {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.type === Boolean) {\n            return value ? true : false;\n\n        } else if (columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            return DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n\n        const builtParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Array) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n            } else {\n                builtParameters.push(value);\n            }\n            return \"$\" + builtParameters.length;\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"\\\"\" + columnName + \"\\\"\";\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number, array?: string|boolean }): string {\n        let type = \"\";\n        if (column.type === Number) {\n            type += \"integer\";\n\n        } else if (column.type === String) {\n            type += \"character varying\";\n\n        } else if (column.type === Date) {\n            type += \"timestamp\";\n\n        } else if (column.type === Boolean) {\n            type += \"boolean\";\n\n        } else if (column.type === Object) {\n            type += \"text\";\n\n        } else if (column.type === \"simple-array\") {\n            type += \"text\";\n\n        } else {\n            type += column.type;\n        }\n\n        // normalize shortcuts\n        if (type === \"int\") {\n            type = \"integer\";\n\n        } else if (type === \"timestamp\") {\n            type = \"timestamp without time zone\";\n        }\n\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n\n        } else if (column.precision && column.scale) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision) {\n            type += \"(\" + column.precision + \")\";\n\n        } else if (column.scale) {\n            type += \"(\" + column.scale + \")\";\n        }\n\n        if (column.array) {\n            type += \" ARRAY\" + (typeof column.array === \"string\" ? column.array : \"\");\n        }\n\n        return type;\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        if (typeof column.default === \"number\") {\n            return \"\" + column.default;\n\n        } else if (typeof column.default === \"boolean\") {\n            return column.default === true ? \"true\" : \"false\";\n\n        } else if (typeof column.default === \"function\") {\n            return column.default();\n\n        } else if (typeof column.default === \"string\") {\n            return `'${column.default}'`;\n\n        } else {\n            return column.default;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads postgres query stream package.\n     */\n    loadStreamDependency() {\n        try {\n            return PlatformTools.load(\"pg-query-stream\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new Error(`To use streams you should install pg-query-stream package. Please run npm i pg-query-stream --save command.`);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.postgres = PlatformTools.load(\"pg\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"Postgres\", \"pg\");\n        }\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {OracleDriver} from \"./OracleDriver\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {Connection} from \"../../connection/Connection\";\nimport {ReadStream} from \"fs\";\n\n/**\n * Runs queries on a single oracle database connection.\n *\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\n */\nexport class OracleQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: OracleDriver) {\n        this.connection = driver.connection;\n        this.manager = driver.connection.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        this.databaseConnectionPromise = new Promise((ok, fail) => {\n            const driver = this.driver as OracleDriver;\n            driver.pool.getConnection((err: any, connection: any) => {\n                this.databaseConnection = connection;\n                err ? fail(err) : ok(connection);\n            });\n        });\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.isReleased = true;\n            if (this.databaseConnection) {\n                this.databaseConnection.close((err: any) => {\n                    if (err)\n                        return fail(err);\n\n                    ok();\n                });\n            }\n        });\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        // await this.query(\"START TRANSACTION\");\n        this.isTransactionActive = true;\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const handler = (err: any, result: any) => {\n                if (err) {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError(err, this);\n                    return fail(err);\n                }\n\n                ok(result.rows || result.outBinds);\n            };\n            const executionOptions = {\n                autoCommit: this.isTransactionActive ? false : true\n            };\n\n            const databaseConnection = await this.connect();\n            databaseConnection.execute(query, parameters || {}, executionOptions, handler);\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by Oracle driver.`);\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map(key => \":\" + key).join(\", \");\n        const parameters = keys.map(key => keyValues[key]);\n\n        const insertSql = columns.length > 0\n            ? `INSERT INTO \"${tableName}\" (${columns}) VALUES (${values})`\n            : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        if (generatedColumn) {\n            const sql2 = `declare lastId number; begin ${insertSql} returning \"id\" into lastId; dbms_output.enable; dbms_output.put_line(lastId); dbms_output.get_line(:ln, :st); end;`;\n            const saveResult = await this.query(sql2, parameters.concat([\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.STRING, maxSize: 32767 },\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.NUMBER }\n            ]));\n            return parseInt(saveResult[0]);\n        } else {\n            return this.query(insertSql, parameters);\n        }\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions).join(\" AND \");\n        const sql = `UPDATE \"${tableName}\" SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \"${tableName}\" WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        let sql = \"\";\n        if (hasLevel) {\n            sql =   `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\", \"level\") ` +\n                    `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql =   `INSERT INTO \"${tableName}\" (\"ancestor\", \"descendant\") ` +\n                    `SELECT \"ancestor\", ${newEntityId} FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(\"level\") as \"level\" FROM \"${tableName}\" WHERE \"descendant\" = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql      = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql     = `SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (${tableNamesString})`;\n        const indicesSql     = `SELECT ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS, LISTAGG(cols.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY cols.COLUMN_NAME) AS COLUMN_NAMES\n                                FROM USER_INDEXES ind, USER_IND_COLUMNS cols \n                                WHERE ind.INDEX_NAME = cols.INDEX_NAME AND ind.TABLE_NAME IN (${tableNamesString})\n                                GROUP BY ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS`;\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\n        const uniqueKeysSql  = `SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = '${this.dbName}' AND CONSTRAINT_TYPE = 'UNIQUE'`;\n        const constraintsSql = `SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (${tableNamesString}) \nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position`;\n        const [dbTables, dbColumns, dbIndices, /*dbForeignKeys, dbUniqueKeys, */constraints]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            // this.query(foreignKeysSql),\n            // this.query(uniqueKeysSql),\n            this.query(constraintsSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return dbTables.map(dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const isPrimary = !!constraints\n                        .find(constraint => {\n                            return  constraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"P\" &&\n                                    constraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                        });\n\n                    let columnType = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                    if (dbColumn[\"DATA_TYPE\"].toLowerCase() === \"varchar2\" && dbColumn[\"DATA_LENGTH\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_LENGTH\"] + \")\";\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null && dbColumn[\"DATA_SCALE\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \",\" + dbColumn[\"DATA_SCALE\"] + \")\";\n                    } else if (dbColumn[\"DATA_SCALE\"] !== null) {\n                        columnType += \"(0,\" + dbColumn[\"DATA_SCALE\"] + \")\";\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \")\";\n                    }\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n                    columnSchema.type = columnType;\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"NULLABLE\"] !== \"N\";\n                    columnSchema.isPrimary = isPrimary;\n                    columnSchema.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\"; // todo\n                    columnSchema.comment = \"\"; // todo\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = constraints\n                .filter(constraint => \n                    constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"P\"\n                )\n                .map(constraint => \n                    new PrimaryKeySchema(constraint[\"CONSTRAINT_NAME\"], constraint[\"COLUMN_NAME\"])\n                );\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = constraints\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"R\")\n                .map(constraint => new ForeignKeySchema(constraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return  dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n                })\n                .map(dbIndex => {\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndex[\"INDEX_NAME\"], dbIndex[\"COLUMN_NAMES\"], !!(dbIndex[\"COLUMN_NAMES\"] === \"UNIQUE\"));\n                });\n\n            return tableSchema;\n        });\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        let sql = `DROP TABLE \"${tableName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\n\n            if (newColumn.isGenerated) {\n                if (tableSchema.primaryKeys.length > 0 && oldColumn.isPrimary) {\n                    // console.log(tableSchema.primaryKeys);\n                    const dropPrimarySql = `ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"${tableSchema.primaryKeys[0].name}\"`;\n                    await this.query(dropPrimarySql);\n                }\n\n                // since modifying identity column is not supported yet, we need to recreate this column\n                const dropSql = `ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`;\n                await this.query(dropSql);\n\n                const createSql = `ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`;\n                await this.query(createSql);\n\n            } else {\n                const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" DROP IDENTITY`;\n                await this.query(sql);\n\n            }\n        }\n\n        if (newColumn.isNullable !== oldColumn.isNullable) {\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type} ${newColumn.isNullable ? \"NULL\" : \"NOT NULL\"}`;\n            await this.query(sql);\n\n        } else if (newColumn.type !== oldColumn.type) { // elseif is used because\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type}`;\n            await this.query(sql);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        return this.query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => \"\\\"\" + primaryKey.columnName + \"\\\"\");\n        // console.log(dbTable.primaryKeys);\n        if (dbTable.primaryKeys.length > 0 && dbTable.primaryKeys[0].name)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${dbTable.primaryKeys[0].name}\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\",\");\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        const columns = index.columnNames.map(columnName => \"\\\"\" + columnName + \"\\\"\").join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE\" : \"\"} INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        const sql = `ALTER TABLE \"${tableName}\" DROP INDEX \"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n\n            await this.query(disableForeignKeysCheckQuery);\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\n            await this.query(enableForeignKeysCheckQuery);\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.schemaName as string;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map(key => `\"${key}\"=:${key}`);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema) {\n        let c = `\"${column.name}\" ` + column.type;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        // if (column.isPrimary === true && addPrimary)\n        //     c += \" PRIMARY KEY\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" GENERATED BY DEFAULT ON NULL AS IDENTITY\";\n        // if (column.comment) // todo: less priority, fix it later\n        //     c += \" COMMENT '\" + column.comment + \"'\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            c += \" DEFAULT \" + column.default;\n        }\n\n        return c;\n    }\n\n\n}","import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\n\n/**\n * Oracle-specific connection options.\n */\nexport interface OracleConnectionOptions extends BaseConnectionOptions {\n\n    /**\n     * Database type.\n     */\n    readonly type: \"oracle\";\n\n    /**\n     * Connection url where perform connection to.\n     */\n    readonly url?: string;\n\n    /**\n     * Database host.\n     */\n    readonly host?: string;\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number;\n\n    /**\n     * Database username.\n     */\n    readonly username?: string;\n\n    /**\n     * Database password.\n     */\n    readonly password?: string;\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string;\n\n    /**\n     * Connection SID.\n     */\n    readonly sid?: string;\n\n    /**\n     * Schema name. By default is \"public\".\n     */\n    readonly schemaName?: string;\n\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {OracleQueryRunner} from \"./OracleQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {OracleConnectionOptions} from \"./OracleConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\n\n/**\n * Organizes communication with Oracle RDBMS.\n *\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\n */\nexport class OracleDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Connection options.\n     */\n    options: OracleConnectionOptions;\n\n    /**\n     * Underlying oracle library.\n     */\n    oracle: any;\n\n    /**\n     * Database connection pool created by underlying driver.\n     */\n    pool: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.techonthenet.com/oracle/datatypes.php\n     * @see https://docs.oracle.com/cd/B28359_01/server.111/b28318/datatype.htm#CNCPT012\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"char\",\n        \"nchar\",\n        \"nvarchar2\",\n        \"varchar2\",\n        \"long\",\n        \"raw\",\n        \"long raw\",\n        \"number\",\n        \"numeric\",\n        \"dec\",\n        \"decimal\",\n        \"integer\",\n        \"int\",\n        \"smallint\",\n        \"real\",\n        \"double precision\",\n        \"date\",\n        \"timestamp\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\",\n        \"interval year\",\n        \"interval day\",\n        \"bfile\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"rowid\",\n        \"urowid\"\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        version: \"number\",\n        treeLevel: \"number\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"timestamp\",\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n\n        // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n\n        this.options = connection.options as OracleConnectionOptions;\n\n        // validate options to make sure everything is set\n        if (!this.options.host)\n            throw new DriverOptionNotSetError(\"host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.sid)\n            throw new DriverOptionNotSetError(\"sid\");\n\n        // load oracle package\n        this.loadDependencies();\n\n        // extra oracle setup\n        this.oracle.outFormat = this.oracle.OBJECT;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            user: this.options.username,\n            password: this.options.password,\n            connectString: this.options.host + \":\" + this.options.port + \"/\" + this.options.sid,\n        }, this.options.extra || {});\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            this.oracle.createPool(options, (err: any, pool: any) => {\n                if (err)\n                    return fail(err);\n\n                this.pool = pool;\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"oracle\"));\n\n        return new Promise<void>((ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n\n            // if pooling is used, then disconnect from it\n            this.pool.close(handler);\n            this.pool = undefined;\n        });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        return new OracleQueryRunner(this);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            escapedParameters.push(parameters[key.substr(1)]);\n            return key;\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.type === Boolean) {\n            return value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.parse(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number, array?: string|boolean }): string {\n        let type = \"\";\n        if (column.type === Number) {\n            type += \"integer\";\n\n        } else if (column.type === String) {\n            type += \"nvarchar2\";\n\n        } else if (column.type === Date) {\n            type += \"timestamp(0)\";\n\n        } else if (column.type === Boolean) {\n            type += \"number(1)\";\n\n        } else if (column.type === Object) {\n            type += \"text\";\n\n        } else if (column.type === \"simple-array\") {\n            type += \"text\";\n\n        } else {\n            type += column.type;\n        }\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n\n        } else if (column.precision && column.scale) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision) {\n            type += \"(\" + column.precision + \")\";\n\n        } else if (column.scale) {\n            type += \"(\" + column.scale + \")\";\n        }\n        return type;\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        if (typeof column.default === \"number\") {\n            return \"\" + column.default;\n\n        } else if (typeof column.default === \"boolean\") {\n            return column.default === true ? \"true\" : \"false\";\n\n        } else if (typeof column.default === \"function\") {\n            return column.default();\n\n        } else if (typeof column.default === \"string\") {\n            return `'${column.default}'`;\n\n        } else {\n            return column.default;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            this.oracle = PlatformTools.load(\"oracledb\");\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"Oracle\", \"oracledb\");\n        }\n    }\n\n}","export interface SelectQuery {\n    selection: string;\n    aliasName?: string;\n}","import {RawSqlResultsToEntityTransformer} from \"./transformer/RawSqlResultsToEntityTransformer\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {JoinOptions} from \"./JoinOptions\";\nimport {PessimisticLockTransactionRequiredError} from \"./error/PessimisticLockTransactionRequiredError\";\nimport {NoVersionOrUpdateDateColumnError} from \"./error/NoVersionOrUpdateDateColumnError\";\nimport {OptimisticLockVersionMismatchError} from \"./error/OptimisticLockVersionMismatchError\";\nimport {OptimisticLockCanNotBeUsedError} from \"./error/OptimisticLockCanNotBeUsedError\";\nimport {JoinAttribute} from \"./JoinAttribute\";\nimport {RelationIdAttribute} from \"./relation-id/RelationIdAttribute\";\nimport {RelationCountAttribute} from \"./relation-count/RelationCountAttribute\";\nimport {RelationIdLoader} from \"./relation-id/RelationIdLoader\";\nimport {RelationIdLoadResult} from \"./relation-id/RelationIdLoadResult\";\nimport {RelationIdMetadataToAttributeTransformer} from \"./relation-id/RelationIdMetadataToAttributeTransformer\";\nimport {RelationCountLoadResult} from \"./relation-count/RelationCountLoadResult\";\nimport {RelationCountLoader} from \"./relation-count/RelationCountLoader\";\nimport {RelationCountMetadataToAttributeTransformer} from \"./relation-count/RelationCountMetadataToAttributeTransformer\";\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ReadStream} from \"fs\";\nimport {LockNotSupportedOnGivenDriverError} from \"./error/LockNotSupportedOnGivenDriverError\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {SelectQuery} from \"./SelectQuery\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {ObjectType} from \"../common/ObjectType\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class SelectQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createSelectExpression();\n        sql += this.createJoinExpression();\n        sql += this.createWhereExpression();\n        sql += this.createGroupByExpression();\n        sql += this.createHavingExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitOffsetExpression();\n        sql += this.createLockExpression();\n        sql = this.createLimitOffsetOracleSpecificExpression(sql);\n        sql = sql.trim();\n        if (this.expressionMap.subQuery)\n            sql = \"(\" + sql + \")\";\n        return sql;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a subquery - query that can be used inside other queries.\n     */\n    subQuery(): SelectQueryBuilder<any> {\n        const qb = this.createQueryBuilder();\n        qb.expressionMap.subQuery = true;\n        return qb;\n    }\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string, selectionAliasName?: string): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string[]): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string|string[], selectionAliasName?: string): this {\n        if (!selection)\n            return this;\n\n        if (selection instanceof Array) {\n            this.expressionMap.selects = this.expressionMap.selects.concat(selection.map(selection => ({ selection: selection })));\n        } else {\n            this.expressionMap.selects.push({ selection: selection, aliasName: selectionAliasName });\n        }\n\n        return this;\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from<T>(entityTarget: ObjectType<T>|string, aliasName: string): SelectQueryBuilder<T> {\n        this.setMainAlias(entityTarget, aliasName);\n        return (this as any) as SelectQueryBuilder<T>;\n    }\n\n    /**\n     * INNER JOINs (without selection) entity's property.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs (without selection) given entity's table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(entity: Function|string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs (without selection) given table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(entityOrProperty: Function|string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\n        this.join(\"INNER\", entityOrProperty, aliasName, condition, options);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs (without selection) entity's property.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs (without selection) entity's table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(entity: Function|string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs (without selection) given table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(entityOrProperty: Function|string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\n        this.join(\"LEFT\", entityOrProperty, aliasName, condition, options);\n        return this;\n    }\n\n    /**\n     * INNER JOINs entity's property and adds all selection properties to SELECT.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs entity and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(entity: Function|string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs table and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(entityOrProperty: Function|string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(aliasName);\n        this.innerJoin(entityOrProperty, aliasName, condition, options);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs entity's property and adds all selection properties to SELECT.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs entity and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(entity: Function|string, aliasName: string, condition: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs table and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(entityOrProperty: Function|string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(aliasName);\n        this.leftJoin(entityOrProperty, aliasName, condition, options);\n        return this;\n    }\n\n    /**\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, entity: Function|string, aliasName: string, condition: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(aliasName);\n        this.join(\"INNER\", entityOrProperty, aliasName, condition, options, mapToProperty, true);\n        return this;\n    }\n\n    /**\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, entity: Function|string, aliasName: string, condition: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(aliasName);\n        this.join(\"INNER\", entityOrProperty, aliasName, condition, options, mapToProperty, false);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, entity: Function|string, aliasName: string, condition: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(aliasName);\n        this.join(\"LEFT\", entityOrProperty, aliasName, condition, options, mapToProperty, true);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, entity: Function|string, aliasName: string, condition: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(aliasName);\n        this.join(\"LEFT\", entityOrProperty, aliasName, condition, options, mapToProperty, false);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string, relationName: string): this;\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, options: { disableMixedMap: boolean }): this;\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, aliasName: string, queryBuilderFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): this;\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string,\n                         relationName: string,\n                         aliasNameOrOptions?: string|{ disableMixedMap?: boolean },\n                         queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): this {\n\n        const relationIdAttribute = new RelationIdAttribute(this.expressionMap);\n        relationIdAttribute.mapToProperty = mapToProperty;\n        relationIdAttribute.relationName = relationName;\n        if (typeof aliasNameOrOptions === \"string\")\n            relationIdAttribute.alias = aliasNameOrOptions;\n        if (aliasNameOrOptions instanceof Object && (aliasNameOrOptions as any).disableMixedMap)\n            relationIdAttribute.disableMixedMap = true;\n\n        relationIdAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationIdAttributes.push(relationIdAttribute);\n\n        if (relationIdAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                name: relationIdAttribute.junctionAlias,\n                metadata: relationIdAttribute.relation.junctionEntityMetadata\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationCountAndMap(mapToProperty: string, relationName: string, aliasName?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): this {\n        const relationCountAttribute = new RelationCountAttribute(this.expressionMap);\n        relationCountAttribute.mapToProperty = mapToProperty;\n        relationCountAttribute.relationName = relationName;\n        relationCountAttribute.alias = aliasName;\n        relationCountAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationCountAttributes.push(relationCountAttribute);\n\n        this.expressionMap.createAlias({\n            name: relationCountAttribute.junctionAlias\n        });\n        if (relationCountAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                name: relationCountAttribute.junctionAlias,\n                metadata: relationCountAttribute.relation.junctionEntityMetadata\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Loads all relation ids for all relations of the selected entity.\n     * All relation ids will be mapped to relation property themself.\n     */\n    loadAllRelationIds(): this {\n        this.expressionMap.mainAlias!.metadata.relations.forEach(relation => {\n            this.loadRelationIdAndMap(\n                this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\n                this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\n                { disableMixedMap: true }\n            );\n        });\n        return this;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"simple\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.andWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.andWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.orWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Sets HAVING condition in the query builder.\n     * If you had previously HAVING expression defined,\n     * calling this function will override previously set HAVING conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    having(having: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.havings.push({ type: \"simple\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andHaving(having: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.havings.push({ type: \"and\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orHaving(having: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.havings.push({ type: \"or\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    groupBy(groupBy: string): this {\n        this.expressionMap.groupBys = [groupBy];\n        return this;\n    }\n\n    /**\n     * Adds GROUP BY condition in the query builder.\n     */\n    addGroupBy(groupBy: string): this {\n        this.expressionMap.groupBys.push(groupBy);\n        return this;\n    }\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     *\n     * Calling order by without order set will remove all previously set order bys.\n     */\n    orderBy(): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort: string, order?: \"ASC\"|\"DESC\"): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(order: OrderByCondition): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort?: string|OrderByCondition, order: \"ASC\"|\"DESC\" = \"ASC\"): this {\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort as OrderByCondition;\n            } else {\n                this.expressionMap.orderBys = { [sort as string]: order };\n            }\n        } else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\"): this {\n        this.expressionMap.orderBys[sort] = order;\n        return this;\n    }\n\n    /**\n     * Set's LIMIT - maximum number of rows to be selected.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead take method instead.\n     */\n    limit(limit?: number): this {\n        this.expressionMap.limit = limit;\n        return this;\n    }\n\n    /**\n     * Set's OFFSET - selection offset.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead skip method instead.\n     */\n    offset(offset?: number): this {\n        this.expressionMap.offset = offset;\n        return this;\n    }\n\n    /**\n     * Sets maximal number of entities to take.\n     */\n    take(take?: number): this {\n        this.expressionMap.take = take;\n        return this;\n    }\n\n    /**\n     * Sets number of entities to skip.\n     */\n    skip(skip?: number): this {\n        this.expressionMap.skip = skip;\n        return this;\n    }\n\n    /**\n     * Sets maximal number of entities to take.\n     *\n     * @deprecated use take method instead\n     */\n    setMaxResults(take?: number): this {\n        this.expressionMap.take = take;\n        return this;\n    }\n\n    /**\n     * Sets number of entities to skip.\n     *\n     * @deprecated use skip method instead\n     */\n    setFirstResult(skip?: number): this {\n        this.expressionMap.skip = skip;\n        return this;\n    }\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"optimistic\", lockVersion: number): this;\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"optimistic\", lockVersion: Date): this;\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"pessimistic_read\"|\"pessimistic_write\"): this;\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\", lockVersion?: number|Date): this {\n        this.expressionMap.lockMode = lockMode;\n        this.expressionMap.lockVersion = lockVersion;\n        return this;\n\n    }\n\n    /**\n     * Gets first raw result returned by execution of generated query builder sql.\n     */\n    async getRawOne(): Promise<any> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        const results = await this.execute();\n        return results[0];\n\n    }\n\n    /**\n     * Gets all raw results returned by execution of generated query builder sql.\n     */\n    async getRawMany(): Promise<any[]> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        return this.execute();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    async getRawAndEntities(): Promise<{ entities: Entity[], raw: any[] }> {\n        return this.executeEntitiesAndRawResults({ release: true });\n    }\n\n    /**\n     * Gets single entity returned by execution of generated query builder sql.\n     */\n    async getOne(): Promise<Entity|undefined> {\n        const results = await this.getRawAndEntities();\n        const result = results.entities[0] as any;\n\n        if (result && this.expressionMap.lockMode === \"optimistic\" && this.expressionMap.lockVersion) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n\n            if (this.expressionMap.lockVersion instanceof Date) {\n                const actualVersion = result[metadata.updateDateColumn!.propertyName]; // what if columns arent set?\n                this.expressionMap.lockVersion.setMilliseconds(0);\n                if (actualVersion.getTime() !== this.expressionMap.lockVersion.getTime())\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n\n            } else {\n                const actualVersion = result[metadata.versionColumn!.propertyName]; // what if columns arent set?\n                if (actualVersion !== this.expressionMap.lockVersion)\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets entities returned by execution of generated query builder sql.\n     */\n    async getMany(): Promise<Entity[]> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        const results = await this.getRawAndEntities();\n        return results.entities;\n    }\n\n    /**\n     * Gets count - number of entities selected by sql generated by this query builder.\n     * Count excludes all limitations set by setFirstResult and setMaxResults methods call.\n     */\n    async getCount(): Promise<number> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        return this.executeCountQuery({ release: true });\n    }\n\n    /**\n     * Executes built SQL query and returns entities and overall entities count (without limitation).\n     * This method is useful to build pagination.\n     */\n    async getManyAndCount(): Promise<[Entity[], number]> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        try {\n            const result = await Promise.all([\n                this.executeEntitiesAndRawResults({ release: false }),\n                this.executeCountQuery({ release: false })\n            ]);\n            return [result[0].entities, result[1]];\n\n        } finally {\n            if (this.ownQueryRunner) // means we created our own query runner\n                await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * Executes built SQL query and returns raw data stream.\n     */\n    async stream(): Promise<ReadStream> {\n        const [sql, parameters] = this.getSqlAndParameters();\n        try {\n            const releaseFn = () => {\n                if (this.ownQueryRunner) // means we created our own query runner\n                    return this.queryRunner.release();\n                return;\n            };\n            return this.queryRunner.stream(sql, parameters, releaseFn, releaseFn);\n\n        } finally {\n            if (this.ownQueryRunner) // means we created our own query runner\n                await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected join(direction: \"INNER\"|\"LEFT\", entityOrProperty: Function|string, aliasName: string, condition?: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): void {\n\n        const joinAttribute = new JoinAttribute(this.connection, this.expressionMap);\n        joinAttribute.direction = direction;\n        joinAttribute.mapToProperty = mapToProperty;\n        joinAttribute.options = options;\n        joinAttribute.isMappingMany = isMappingMany;\n        joinAttribute.entityOrProperty = entityOrProperty; // relationName\n        joinAttribute.condition = condition; // joinInverseSideCondition\n        // joinAttribute.junctionAlias = joinAttribute.relation.isOwning ? parentAlias + \"_\" + destinationTableAlias : destinationTableAlias + \"_\" + parentAlias;\n        this.expressionMap.joinAttributes.push(joinAttribute);\n\n        // todo: find and set metadata right there?\n        joinAttribute.alias = this.expressionMap.createAlias({\n            name: aliasName,\n            metadata: joinAttribute.metadata!\n        });\n        if (joinAttribute.relation && joinAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                name: joinAttribute.junctionAlias,\n                metadata: joinAttribute.relation.junctionEntityMetadata\n            });\n        }\n    }\n\n    /**\n     * Creates \"SELECT FROM\" part of SQL query.\n     */\n    protected createSelectExpression() {\n\n        if (!this.expressionMap.mainAlias)\n            throw new Error(\"Cannot build query because main alias is not set (call qb#from method)\");\n\n        // todo throw exception if selects or from is missing\n\n        const allSelects: SelectQuery[] = [];\n        const excludedSelects: SelectQuery[] = [];\n\n        const aliasName = this.expressionMap.mainAlias.name;\n        const tableName = this.getTableName();\n\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            allSelects.push(...this.buildEscapedEntityColumnSelects(aliasName, metadata));\n            excludedSelects.push(...this.findEntityColumnSelects(aliasName, metadata));\n        }\n\n        // add selects from joins\n        this.expressionMap.joinAttributes\n            .forEach(join => {\n                if (join.metadata) {\n                    allSelects.push(...this.buildEscapedEntityColumnSelects(join.alias.name!, join.metadata));\n                    excludedSelects.push(...this.findEntityColumnSelects(join.alias.name!, join.metadata));\n                } else {\n                    const hasMainAlias = this.expressionMap.selects.some(select => select.selection === join.alias.name);\n                    if (hasMainAlias) {\n                        allSelects.push({ selection: this.escape(join.alias.name!) + \".*\" });\n                        excludedSelects.push({ selection: this.escape(join.alias.name!) });\n                    }\n                }\n            });\n\n        if (!this.expressionMap.ignoreParentTablesJoins && this.expressionMap.mainAlias.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            if (metadata.parentEntityMetadata && metadata.parentEntityMetadata.inheritanceType === \"class-table\" && metadata.parentIdColumns) {\n                const alias = \"parentIdColumn_\" + metadata.parentEntityMetadata.tableName;\n                metadata.parentEntityMetadata.columns.forEach(column => {\n                    // TODO implement partial select\n                    allSelects.push({ selection: this.escape(alias) + \".\" + this.escape(column.databaseName), aliasName: alias + \"_\" + column.databaseName });\n                });\n            }\n        }\n\n        // add selects from relation id joins\n        // this.relationIdAttributes.forEach(relationIdAttr => {\n        // });\n\n        /*if (this.enableRelationIdValues) {\n         const parentMetadata = this.aliasMap.getEntityMetadataByAlias(this.aliasMap.mainAlias);\n         if (!parentMetadata)\n         throw new Error(\"Cannot get entity metadata for the given alias \" + this.aliasMap.mainAlias.name);\n\n         const metadata = this.connection.entityMetadatas.findByTarget(this.aliasMap.mainAlias.target);\n         metadata.manyToManyRelations.forEach(relation => {\n\n         const junctionMetadata = relation.junctionEntityMetadata;\n         junctionMetadata.columns.forEach(column => {\n         const select = ea(this.aliasMap.mainAlias.name + \"_\" + junctionMetadata.table.name + \"_ids\") + \".\" +\n         ec(column.name) + \" AS \" +\n         ea(this.aliasMap.mainAlias.name + \"_\" + relation.name + \"_ids_\" + column.name);\n         allSelects.push(select);\n         });\n         });\n         }*/\n\n        // add all other selects\n        this.expressionMap.selects\n            .filter(select => excludedSelects.indexOf(select) === -1)\n            .forEach(select => allSelects.push({ selection: this.replacePropertyNames(select.selection), aliasName: select.aliasName }));\n\n        // if still selection is empty, then simply set it to all (*)\n        if (allSelects.length === 0)\n            allSelects.push({ selection: \"*\" });\n\n        let lock: string = \"\";\n        if (this.connection.driver instanceof SqlServerDriver) {\n            switch (this.expressionMap.lockMode) {\n                case \"pessimistic_read\":\n                    lock = \" WITH (HOLDLOCK, ROWLOCK)\";\n                    break;\n                case \"pessimistic_write\":\n                    lock = \" WITH (UPDLOCK, ROWLOCK)\";\n                    break;\n            }\n        }\n\n        // create a selection query\n        const from = tableName ? this.escape(tableName) : this.expressionMap.mainAlias.subQuery;\n        const selection = allSelects.map(select => select.selection + (select.aliasName ? \" AS \" + this.escape(select.aliasName) : \"\")).join(\", \");\n        if ((this.expressionMap.limit || this.expressionMap.offset) && this.connection.driver instanceof OracleDriver) {\n            return \"SELECT ROWNUM \" + this.escape(\"RN\") + \",\" + selection + \" FROM \" + from + \" \" + this.escape(aliasName) + lock;\n        }\n        return \"SELECT \" + selection + \" FROM \" + from + \" \" + this.escape(aliasName) + lock;\n    }\n\n    /**\n     * Creates \"JOIN\" part of SQL query.\n     */\n    protected createJoinExpression(): string {\n\n        // examples:\n        // select from owning side\n        // qb.select(\"post\")\n        //     .leftJoinAndSelect(\"post.category\", \"category\");\n        // select from non-owning side\n        // qb.select(\"category\")\n        //     .leftJoinAndSelect(\"category.post\", \"post\");\n\n        const joins = this.expressionMap.joinAttributes.map(joinAttr => {\n\n            const relation = joinAttr.relation;\n            const destinationTableName = joinAttr.tableName;\n            const destinationTableAlias = joinAttr.alias.name;\n            const appendedCondition = joinAttr.condition ? \" AND (\" + joinAttr.condition + \")\" : \"\";\n            const parentAlias = joinAttr.parentAlias;\n\n            // if join was build without relation (e.g. without \"post.category\") then it means that we have direct\n            // table to join, without junction table involved. This means we simply join direct table.\n            if (!parentAlias || !relation)\n                return \" \" + joinAttr.direction + \" JOIN \" + this.escape(destinationTableName) + \" \" + this.escape(destinationTableAlias) +\n                    (joinAttr.condition ? \" ON \" + this.replacePropertyNames(joinAttr.condition) : \"\");\n\n            // if real entity relation is involved\n            if (relation.isManyToOne || relation.isOneToOneOwner) {\n\n                // JOIN `category` `category` ON `category`.`id` = `post`.`categoryId`\n                const condition = relation.joinColumns.map(joinColumn => {\n                    return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\n                        parentAlias + \".\" + relation.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                return \" \" + joinAttr.direction + \" JOIN \" + this.escape(destinationTableName) + \" \" + this.escape(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\n\n            } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n\n                // JOIN `post` `post` ON `post`.`categoryId` = `category`.`id`\n                const condition = relation.inverseRelation!.joinColumns.map(joinColumn => {\n                    return destinationTableAlias + \".\" + relation.inverseRelation!.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\n                        parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                return \" \" + joinAttr.direction + \" JOIN \" + this.escape(destinationTableName) + \" \" + this.escape(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\n\n            } else { // means many-to-many\n                const junctionTableName = relation.junctionEntityMetadata!.tableName;\n\n                const junctionAlias = joinAttr.junctionAlias;\n                let junctionCondition = \"\", destinationCondition = \"\";\n\n                if (relation.isOwning) {\n\n                    junctionCondition = relation.joinColumns.map(joinColumn => {\n                        // `post_category`.`postId` = `post`.`id`\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                    }).join(\" AND \");\n\n                    destinationCondition = relation.inverseJoinColumns.map(joinColumn => {\n                        // `category`.`id` = `post_category`.`categoryId`\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\n                    }).join(\" AND \");\n\n                } else {\n                    junctionCondition = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => {\n                        // `post_category`.`categoryId` = `category`.`id`\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                    }).join(\" AND \");\n\n                    destinationCondition = relation.inverseRelation!.joinColumns.map(joinColumn => {\n                        // `post`.`id` = `post_category`.`postId`\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\n                    }).join(\" AND \");\n                }\n\n                return \" \" + joinAttr.direction + \" JOIN \" + this.escape(junctionTableName) + \" \" + this.escape(junctionAlias) + \" ON \" + this.replacePropertyNames(junctionCondition) +\n                    \" \" + joinAttr.direction + \" JOIN \" + this.escape(destinationTableName) + \" \" + this.escape(destinationTableAlias) + \" ON \" + this.replacePropertyNames(destinationCondition + appendedCondition);\n\n            }\n        });\n\n        if (!this.expressionMap.ignoreParentTablesJoins && this.expressionMap.mainAlias!.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.parentEntityMetadata && metadata.parentEntityMetadata.inheritanceType === \"class-table\" && metadata.parentIdColumns) {\n                const alias = \"parentIdColumn_\" + metadata.parentEntityMetadata.tableName;\n                const condition = metadata.parentIdColumns.map(parentIdColumn => {\n                    return this.expressionMap.mainAlias!.name + \".\" + parentIdColumn.propertyPath + \" = \" + alias + \".\" + parentIdColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n                const join = \" JOIN \" + this.escape(metadata.parentEntityMetadata.tableName) + \" \" + this.escape(alias) + \" ON \" + this.replacePropertyNames(condition);\n                joins.push(join);\n            }\n        }\n\n        return joins.join(\" \");\n    }\n\n    /**\n     * Creates \"GROUP BY\" part of SQL query.\n     */\n    protected createGroupByExpression() {\n        if (!this.expressionMap.groupBys || !this.expressionMap.groupBys.length) return \"\";\n        return \" GROUP BY \" + this.replacePropertyNames(this.expressionMap.groupBys.join(\", \"));\n    }\n\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    protected createOrderByExpression() {\n\n        let orderBys = this.expressionMap.orderBys;\n\n        // if table has a default order then apply it\n        if (!Object.keys(orderBys).length && this.expressionMap.mainAlias!.hasMetadata) {\n            orderBys = this.expressionMap.mainAlias!.metadata.orderBy || {};\n        }\n\n        // if user specified a custom order then apply it\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                    .map(columnName => {\n                        return this.replacePropertyNames(columnName) + \" \" + this.expressionMap.orderBys[columnName];\n                    })\n                    .join(\", \");\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LIMIT\" and \"OFFSET\" parts of SQL query for Oracle database.\n     */\n    protected createLimitOffsetOracleSpecificExpression(sql: string): string {\n        if ((this.expressionMap.offset || this.expressionMap.limit) && this.connection.driver instanceof OracleDriver) {\n            sql = \"SELECT * FROM (\" + sql + \") WHERE \";\n            if (this.expressionMap.offset) {\n                sql += this.escape(\"RN\") + \" >= \" + this.expressionMap.offset;\n            }\n            if (this.expressionMap.limit) {\n                sql += (this.expressionMap.offset ? \" AND \" : \"\") + this.escape(\"RN\") + \" <= \" + ((this.expressionMap.offset || 0) + this.expressionMap.limit);\n            }\n        }\n        return sql;\n    }\n\n    /**\n     * Creates \"LIMIT\" and \"OFFSET\" parts of SQL query.\n     */\n    protected createLimitOffsetExpression(): string {\n        if (this.connection.driver instanceof OracleDriver)\n            return \"\";\n\n        if (this.connection.driver instanceof SqlServerDriver) {\n\n            if (this.expressionMap.limit && this.expressionMap.offset)\n                return \" OFFSET \" + this.expressionMap.offset + \" ROWS FETCH NEXT \" + this.expressionMap.limit + \" ROWS ONLY\";\n            if (this.expressionMap.limit)\n                return \" OFFSET 0 ROWS FETCH NEXT \" + this.expressionMap.limit + \" ROWS ONLY\";\n            if (this.expressionMap.offset)\n                return \" OFFSET \" + this.expressionMap.offset + \" ROWS\";\n\n        } else {\n            if (this.expressionMap.limit && this.expressionMap.offset)\n                return \" LIMIT \" + this.expressionMap.limit + \" OFFSET \" + this.expressionMap.offset;\n            if (this.expressionMap.limit)\n                return \" LIMIT \" + this.expressionMap.limit;\n            if (this.expressionMap.offset)\n                return \" OFFSET \" + this.expressionMap.offset;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LOCK\" part of SQL query.\n     */\n    protected createLockExpression(): string {\n        switch (this.expressionMap.lockMode) {\n            case \"pessimistic_read\":\n                if (this.connection.driver instanceof MysqlDriver) {\n                    return \" LOCK IN SHARE MODE\";\n\n                } else if (this.connection.driver instanceof PostgresDriver) {\n                    return \" FOR SHARE\";\n\n                } else if (this.connection.driver instanceof SqlServerDriver) {\n                    return \"\";\n\n                } else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_write\":\n                if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof PostgresDriver) {\n                    return \" FOR UPDATE\";\n\n                } else if (this.connection.driver instanceof SqlServerDriver) {\n                    return \"\";\n\n                } else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Creates \"HAVING\" part of SQL query.\n     */\n    protected createHavingExpression() {\n        if (!this.expressionMap.havings || !this.expressionMap.havings.length) return \"\";\n        const conditions = this.expressionMap.havings.map((having, index) => {\n            switch (having.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(having.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(having.condition);\n                default:\n                    return this.replacePropertyNames(having.condition);\n            }\n        }).join(\" \");\n\n        if (!conditions.length) return \"\";\n        return \" HAVING \" + conditions;\n    }\n\n    protected buildEscapedEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\n        const hasMainAlias = this.expressionMap.selects.some(select => select.selection === aliasName);\n\n        const columns: ColumnMetadata[] = hasMainAlias ? metadata.columns : metadata.columns.filter(column => {\n            return this.expressionMap.selects.some(select => select.selection === aliasName + \".\" + column.propertyName);\n        });\n\n        return columns.map(column => {\n            const selection = this.expressionMap.selects.find(select => select.selection === aliasName + \".\" + column.propertyName);\n            return {\n                selection: this.escape(aliasName) + \".\" + this.escape(column.databaseName),\n                aliasName: selection && selection.aliasName ? selection.aliasName : aliasName + \"_\" + column.databaseName,\n                // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!\n            };\n        });\n    }\n\n    protected findEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\n        const mainSelect = this.expressionMap.selects.find(select => select.selection === aliasName);\n        if (mainSelect)\n            return [mainSelect];\n\n        return this.expressionMap.selects.filter(select => {\n            return metadata.columns.some(column => select.selection === aliasName + \".\" + column.propertyName);\n        });\n    }\n\n    protected async executeCountQuery(options: { release: boolean }): Promise<number> {\n\n        const mainAlias = this.expressionMap.mainAlias!.name; // todo: will this work with \"fromTableName\"?\n        const metadata = this.expressionMap.mainAlias!.metadata;\n\n        const distinctAlias = this.escape(mainAlias);\n        let countSql = `COUNT(` + metadata.primaryColumns.map((primaryColumn, index) => {\n                const propertyName = this.escape(primaryColumn.databaseName);\n                if (index === 0) {\n                    return `DISTINCT(${distinctAlias}.${propertyName})`;\n                } else {\n                    return `${distinctAlias}.${propertyName})`;\n                }\n            }).join(\", \") + \") as \\\"cnt\\\"\";\n\n        const [countQuerySql, countQueryParameters] = new SelectQueryBuilder(this)\n            .mergeExpressionMap({ ignoreParentTablesJoins: true })\n            .orderBy()\n            .offset(undefined)\n            .limit(undefined)\n            .select(countSql)\n            .getSqlAndParameters();\n\n        try {\n            const results = await this.queryRunner.query(countQuerySql, countQueryParameters);\n            if (!results || !results[0] || !results[0][\"cnt\"])\n                return 0;\n\n            return parseInt(results[0][\"cnt\"]);\n\n        } finally {\n            if (options.release && this.ownQueryRunner) // means we created our own query runner\n                await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    protected async executeEntitiesAndRawResults(options: { release: boolean }): Promise<{ entities: Entity[], raw: any[] }> {\n        try { // we wrap everything into try/catch because in any case scenario we must release created connection\n\n            if (!this.expressionMap.mainAlias)\n                throw new Error(`Alias is not set. Use \"from\" method to set an alias.`);\n\n            if ((this.expressionMap.lockMode === \"pessimistic_read\" || this.expressionMap.lockMode === \"pessimistic_write\") && !this.queryRunner.isTransactionActive)\n                throw new PessimisticLockTransactionRequiredError();\n\n            if (this.expressionMap.lockMode === \"optimistic\") {\n                const metadata = this.expressionMap.mainAlias.metadata;\n                if (!metadata.versionColumn && !metadata.updateDateColumn)\n                    throw new NoVersionOrUpdateDateColumnError(metadata.name);\n            }\n\n            const broadcaster = new Broadcaster(this.connection);\n            const relationIdLoader = new RelationIdLoader(this.connection, this.queryRunner, this.expressionMap.relationIdAttributes);\n            const relationCountLoader = new RelationCountLoader(this.connection, this.queryRunner, this.expressionMap.relationCountAttributes);\n            const relationIdMetadataTransformer = new RelationIdMetadataToAttributeTransformer(this.expressionMap);\n            relationIdMetadataTransformer.transform();\n            const relationCountMetadataTransformer = new RelationCountMetadataToAttributeTransformer(this.expressionMap);\n            relationCountMetadataTransformer.transform();\n\n            let rawResults: any[] = [], entities: any[] = [];\n\n            // for pagination enabled (e.g. skip and take) its much more complicated - its a special process\n            // where we make two queries to find the data we need\n            // first query find ids in skip and take range\n            // and second query loads the actual data in given ids range\n            if (this.expressionMap.skip || this.expressionMap.take) {\n\n                // we are skipping order by here because its not working in subqueries anyway\n                // to make order by working we need to apply it on a distinct query\n                const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression(\"distinctAlias\");\n                const metadata = this.expressionMap.mainAlias.metadata;\n                const mainAliasName = this.expressionMap.mainAlias.name;\n\n                const querySelects = metadata.primaryColumns.map(primaryColumn => {\n                    const distinctAlias = this.escape(\"distinctAlias\");\n                    const columnAlias = this.escape(mainAliasName + \"_\" + primaryColumn.propertyName);\n                    if (!orderBys[columnAlias]) // make sure we aren't overriding user-defined order in inverse direction\n                        orderBys[columnAlias] = \"ASC\";\n                    return `${distinctAlias}.${columnAlias} as \"ids_${mainAliasName + \"_\" + primaryColumn.databaseName}\"`;\n                });\n\n                rawResults = await new SelectQueryBuilder(this.connection, this.queryRunner)\n                    .select(`DISTINCT ${querySelects.join(\", \")} `)\n                    .addSelect(selects)\n                    .from(`(${new SelectQueryBuilder(this).orderBy().getQuery()})`, \"distinctAlias\")\n                    .offset(this.expressionMap.skip)\n                    .limit(this.expressionMap.take)\n                    .orderBy(orderBys)\n                    .setParameters(this.getParameters())\n                    .getRawMany();\n\n                if (rawResults.length > 0) {\n                    let condition = \"\";\n                    const parameters: ObjectLiteral = {};\n                    if (metadata.hasMultiplePrimaryKeys) {\n                        condition = rawResults.map(result => {\n                            return metadata.primaryColumns.map(primaryColumn => {\n                                parameters[\"ids_\" + primaryColumn.propertyName] = result[\"ids_\" + primaryColumn.databaseName];\n                                return mainAliasName + \".\" + primaryColumn.propertyName + \"=:ids_\" + primaryColumn.databaseName;\n                            }).join(\" AND \");\n                        }).join(\" OR \");\n                    } else {\n                        const ids = rawResults.map(result => result[\"ids_\" + mainAliasName + \"_\" + metadata.primaryColumns[0].databaseName]);\n                        const areAllNumbers = ids.every((id: any) => typeof id === \"number\");\n                        if (areAllNumbers) {\n                            // fixes #190. if all numbers then its safe to perform query without parameter\n                            condition = `${mainAliasName}.${metadata.primaryColumns[0].propertyName} IN (${ids.join(\", \")})`;\n                        } else {\n                            parameters[\"ids\"] = ids;\n                            condition = mainAliasName + \".\" + metadata.primaryColumns[0].propertyName + \" IN (:ids)\";\n                        }\n                    }\n                    rawResults = await new SelectQueryBuilder(this)\n                        .mergeExpressionMap({ extraAppendedAndWhereCondition: condition })\n                        .setParameters(parameters)\n                        .getRawMany();\n                }\n\n            } else {\n                const [sql, parameters] = this.getSqlAndParameters();\n                rawResults = await this.queryRunner.query(sql, parameters);\n            }\n\n            if (rawResults.length > 0) {\n\n                // transform raw results into entities\n                const rawRelationIdResults = await relationIdLoader.load(rawResults);\n                const rawRelationCountResults = await relationCountLoader.load(rawResults);\n                const transformer = new RawSqlResultsToEntityTransformer(this.connection.driver, this.expressionMap.joinAttributes, rawRelationIdResults, rawRelationCountResults);\n                entities = transformer.transform(rawResults, this.expressionMap.mainAlias!);\n\n                // broadcast all \"after load\" events\n                if (this.expressionMap.mainAlias.hasMetadata)\n                    await broadcaster.broadcastLoadEventsForAll(this.expressionMap.mainAlias.target, rawResults);\n            }\n\n            return {\n                raw: rawResults,\n                entities: entities,\n            };\n\n        } finally {\n            if (options.release && this.ownQueryRunner) // means we created our own query runner\n                await this.queryRunner.release();\n        }\n    }\n\n    protected createOrderByCombinedWithSelectExpression(parentAlias: string): [ string, OrderByCondition] {\n\n        // if table has a default order then apply it\n        let orderBys = this.expressionMap.orderBys;\n        if (!Object.keys(orderBys).length && this.expressionMap.mainAlias!.hasMetadata) {\n            orderBys = this.expressionMap.mainAlias!.metadata.orderBy || {};\n        }\n\n        const selectString = Object.keys(orderBys)\n            .map(columnName => {\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\n                return this.escape(parentAlias) + \".\" + this.escape(alias + \"_\" + column + embeddedProperties.join(\"_\"));\n            })\n            .join(\", \");\n\n        const orderByObject: OrderByCondition = {};\n        Object.keys(orderBys).forEach(columnName => {\n            const [alias, column, ...embeddedProperties] = columnName.split(\".\");\n            orderByObject[this.escape(parentAlias) + \".\" + this.escape(alias + \"_\" + column + embeddedProperties.join(\"_\"))] = this.expressionMap.orderBys[columnName];\n        });\n\n        return [selectString, orderByObject];\n    }\n\n    /**\n     * Merges into expression map given expression map properties.\n     */\n    protected mergeExpressionMap(expressionMap: Partial<QueryExpressionMap>): this {\n        Object.assign(this.expressionMap, expressionMap);\n        return this;\n    }\n\n}\n","import {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryBuilder} from \"../QueryBuilder\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {SelectQueryBuilder} from \"../SelectQueryBuilder\";\n\n/**\n * Stores all join relation id attributes which will be used to build a JOIN query.\n */\nexport class RelationIdAttribute {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Name of relation.\n     */\n    relationName: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    /**\n     * Indicates if relation id should NOT be loaded as id map.\n     */\n    disableMixedMap = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private queryExpressionMap: QueryExpressionMap,\n                        relationIdAttribute?: Partial<RelationIdAttribute>) {\n        Object.assign(this, relationIdAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get joinInverseSideMetadata(): EntityMetadata {\n        return this.relation.inverseEntityMetadata;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.substr(0, this.relationName.indexOf(\".\"));\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\n    }\n\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation(): RelationMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\n        if (!relation)\n            throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n        return relation;\n    }\n\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias(): string {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_relation_id\";\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If extra condition without entity was joined, then it will return undefined.\n     */\n    get junctionMetadata(): EntityMetadata {\n        return this.relation.junctionEntityMetadata!;\n    }\n\n    get mapToPropertyParentAlias(): string {\n        return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\n    }\n\n    get mapToPropertyPropertyPath(): string {\n        return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\n    }\n\n}","import {Alias} from \"./Alias\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {JoinAttribute} from \"./JoinAttribute\";\nimport {RelationIdAttribute} from \"./relation-id/RelationIdAttribute\";\nimport {RelationCountAttribute} from \"./relation-count/RelationCountAttribute\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {SelectQuery} from \"./SelectQuery\";\n\n/**\n * Contains all properties of the QueryBuilder that needs to be build a final query.\n */\nexport class QueryExpressionMap {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Main alias is a main selection object selected by QueryBuilder.\n     */\n    mainAlias?: Alias;\n\n    /**\n     * All aliases (including main alias) used in the query.\n     */\n    aliases: Alias[] = [];\n\n    /**\n     * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\n     */\n    queryType: \"select\"|\"update\"|\"delete\"|\"insert\"|\"relation\" = \"select\";\n\n    /**\n     * Data needs to be SELECT-ed.\n     */\n    selects: SelectQuery[] = [];\n\n    /**\n     * If update query was used, it needs \"update set\" - properties which will be updated by this query.\n     * If insert query was used, it needs \"insert set\" - values that needs to be inserted.\n     */\n    valuesSet?: ObjectLiteral|ObjectLiteral[];\n\n    /**\n     * JOIN queries.\n     */\n    joinAttributes: JoinAttribute[] = [];\n\n    /**\n     * RelationId queries.\n     */\n    relationIdAttributes: RelationIdAttribute[] = [];\n\n    /**\n     * Relation count queries.\n     */\n    relationCountAttributes: RelationCountAttribute[] = [];\n\n    /**\n     * WHERE queries.\n     */\n    wheres: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\n\n    /**\n     * HAVING queries.\n     */\n    havings: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\n\n    /**\n     * ORDER BY queries.\n     */\n    orderBys: OrderByCondition = {};\n\n    /**\n     * GROUP BY queries.\n     */\n    groupBys: string[] = [];\n\n    /**\n     * LIMIT query.\n     */\n    limit?: number;\n\n    /**\n     * OFFSET query.\n     */\n    offset?: number;\n\n    /**\n     * Number of rows to skip of result using pagination.\n     */\n    skip?: number;\n\n    /**\n     * Number of rows to take using pagination.\n     */\n    take?: number;\n\n    /**\n     * Locking mode.\n     */\n    lockMode?: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\";\n\n    /**\n     * Current version of the entity, used for locking.\n     */\n    lockVersion?: number|Date;\n\n    /**\n     * Parameters used to be escaped in final query.\n     */\n    parameters: ObjectLiteral = {};\n\n    /**\n     * Indicates if alias, table names and column names will be ecaped by driver, or not.\n     *\n     * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\n     */\n    disableEscaping: boolean = true;\n\n    /**\n     * todo: needs more information.\n     */\n    ignoreParentTablesJoins: boolean = false;\n\n    /**\n     * Indicates if virtual columns should be included in entity result.\n     *\n     * todo: what to do with it? is it properly used? what about persistence?\n     */\n    enableRelationIdValues: boolean = false;\n\n    /**\n     * Extra where condition appended to the end of original where conditions with AND keyword.\n     * Original condition will be wrapped into brackets.\n     */\n    extraAppendedAndWhereCondition: string = \"\";\n\n    /**\n     * Indicates if query builder creates a subquery.\n     */\n    subQuery: boolean = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a main alias and adds it to the current expression map.\n     */\n    createMainAlias(options: { name?: string, target?: Function|string, tableName?: string, subQuery?: string, metadata?: EntityMetadata }): Alias {\n        const alias = this.createAlias(options as any);\n\n        // if main alias is already set then remove it from the array\n        if (this.mainAlias)\n            this.aliases.splice(this.aliases.indexOf(this.mainAlias));\n\n        // set new main alias\n        this.mainAlias = alias;\n\n        return alias;\n    }\n\n    /**\n     * Creates a new alias and adds it to the current expression map.\n     */\n    createAlias(options: { name?: string, target?: Function|string, tableName?: string, subQuery?: string, metadata?: EntityMetadata }): Alias {\n\n        let aliasName = options.name;\n        if (!aliasName && options.tableName)\n            aliasName = options.tableName;\n        if (!aliasName && options.target instanceof Function)\n            aliasName = options.target.name;\n        if (!aliasName && typeof options.target === \"string\")\n            aliasName = options.target;\n\n        const alias = new Alias();\n        if (aliasName)\n            alias.name = aliasName;\n        if (options.metadata)\n            alias.metadata = options.metadata;\n        if (options.target && !alias.hasMetadata)\n            alias.metadata = this.connection.getMetadata(options.target);\n        if (options.tableName)\n            alias.tableName = options.tableName;\n        if (options.subQuery)\n            alias.subQuery = options.subQuery;\n\n        this.aliases.push(alias);\n        return alias;\n    }\n\n    /**\n     * Finds alias with the given name.\n     * If alias was not found it throw an exception.\n     */\n    findAliasByName(aliasName: string): Alias {\n        const alias = this.aliases.find(alias => alias.name === aliasName);\n        if (!alias)\n            throw new Error(`\"${aliasName}\" alias was not found. Maybe you forgot to join it?`);\n\n        return alias;\n    }\n\n    /**\n     * Copies all properties of the current QueryExpressionMap into a new one.\n     * Useful when QueryBuilder needs to create a copy of itself.\n     */\n    clone(): QueryExpressionMap {\n        const map = new QueryExpressionMap(this.connection);\n        map.queryType = this.queryType;\n        map.selects = this.selects.map(select => select);\n        this.aliases.forEach(alias => map.aliases.push(new Alias(alias)));\n        map.mainAlias = this.mainAlias;\n        map.valuesSet = this.valuesSet;\n        map.joinAttributes = this.joinAttributes.map(join => new JoinAttribute(this.connection, this, join));\n        map.relationIdAttributes = this.relationIdAttributes.map(relationId => new RelationIdAttribute(this, relationId));\n        map.relationCountAttributes = this.relationCountAttributes.map(relationCount => new RelationCountAttribute(this, relationCount));\n        map.wheres = this.wheres.map(where => ({ ...where }));\n        map.havings = this.havings.map(having => ({ ...having }));\n        map.orderBys = Object.assign({}, this.orderBys);\n        map.groupBys = this.groupBys.map(groupBy => groupBy);\n        map.limit = this.limit;\n        map.offset = this.offset;\n        map.skip = this.skip;\n        map.take = this.take;\n        map.lockMode = this.lockMode;\n        map.lockVersion = this.lockVersion;\n        map.parameters = Object.assign({}, this.parameters);\n        map.disableEscaping = this.disableEscaping;\n        map.ignoreParentTablesJoins = this.ignoreParentTablesJoins;\n        map.enableRelationIdValues = this.enableRelationIdValues;\n        return map;\n    }\n\n}","import {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class UpdateQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createUpdateExpression();\n        sql += this.createWhereExpression();\n        return sql.trim();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Values needs to be updated.\n     */\n    set(values: Partial<Entity>): this {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"simple\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.andWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.andWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.orWhere(whereExpression, parameters);\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    protected createUpdateExpression() {\n        const valuesSet = this.getValueSets();\n\n        // prepare columns and values to be updated\n        const updateColumnAndValues: string[] = [];\n        Object.keys(valuesSet).forEach(columnProperty => {\n            const column = this.expressionMap.mainAlias!.metadata.findColumnWithPropertyName(columnProperty);\n            if (column) {\n                const paramName = \"_updated_\" + column.databaseName;\n                this.setParameter(paramName, valuesSet[column.propertyName]);\n                updateColumnAndValues.push(this.escape(column.databaseName) + \"=:\" + paramName);\n            }\n        });\n\n        // get a table name and all column database names\n        const tableName = this.escape(this.getTableName());\n\n        // generate and return sql update query\n        return `UPDATE ${tableName} SET ${updateColumnAndValues.join(\", \")}`; // todo: how do we replace aliases in where to nothing?\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSets(): ObjectLiteral {\n        if (this.expressionMap.valuesSet instanceof Object)\n            return this.expressionMap.valuesSet;\n\n        throw new Error(`Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify inserted values.`);\n    }\n\n}\n","import {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ObjectType} from \"../common/ObjectType\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createDeleteExpression();\n        sql += this.createWhereExpression();\n        return sql.trim();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from<T>(entityTarget: ObjectType<T>|string, aliasName: string): DeleteQueryBuilder<T> {\n        this.setMainAlias(entityTarget, aliasName);\n        return (this as any) as DeleteQueryBuilder<T>;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"simple\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.andWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.andWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.orWhere(whereExpression, parameters);\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates DELETE express used to perform insert query.\n     */\n    protected createDeleteExpression() {\n        const tableName = this.escape(this.getTableName());\n        return `DELETE FROM ${tableName}`; // todo: how do we replace aliases in where to nothing?\n    }\n\n}\n","import {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ObjectType} from \"../common/ObjectType\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class InsertQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createInsertExpression();\n        return sql.trim();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies INTO which entity's table insertion will be executed.\n     */\n    into<T>(entityTarget: ObjectType<T>|string): InsertQueryBuilder<T> {\n        this.setMainAlias(entityTarget);\n        return (this as any) as InsertQueryBuilder<T>;\n    }\n\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(values: Partial<Entity>): this;\n\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(values: Partial<Entity>[]): this;\n\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(values: ObjectLiteral|ObjectLiteral[]): this {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates INSERT express used to perform insert query.\n     */\n    protected createInsertExpression() {\n        const valueSets = this.getValueSets();\n\n        // get columns that participate in insertion query\n        const insertColumns: ColumnMetadata[] = [];\n        Object.keys(valueSets[0]).forEach(columnProperty => {\n            const column = this.expressionMap.mainAlias!.metadata.findColumnWithPropertyName(columnProperty);\n            if (column) insertColumns.push(column);\n        });\n\n        // get values needs to be inserted\n        const values = valueSets.map((valueSet, key) => {\n            const columnNames = insertColumns.map(column => {\n                const paramName = \"_inserted_\" + key + \"_\" + column.databaseName;\n                this.setParameter(paramName, valueSet[column.propertyName]);\n                return \":\" + paramName;\n            });\n            return \"(\" + columnNames.join(\",\") + \")\";\n        }).join(\", \");\n\n        // get a table name and all column database names\n        const tableName = this.escape(this.getTableName());\n        const columnNames = insertColumns.map(column => this.escape(column.databaseName)).join(\", \");\n\n        // generate sql query\n        return `INSERT INTO ${tableName}(${columnNames}) VALUES ${values}`;\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSets(): ObjectLiteral[] {\n        if (this.expressionMap.valuesSet instanceof Array && this.expressionMap.valuesSet.length > 0)\n            return this.expressionMap.valuesSet;\n\n        if (this.expressionMap.valuesSet instanceof Object)\n            return [this.expressionMap.valuesSet];\n\n        throw new Error(`Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.`);\n    }\n\n}\n","import {QueryBuilder} from \"./QueryBuilder\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n *\n * todo: implement all functions using SpecificRepository code.\n */\nexport class RelationQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        return \"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets entity relation's value.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Works only for many-to-one and one-to-one relations.\n     * For many-to-many and one-to-many relations use #add and #remove methods instead.\n     */\n    set(value: any): this {\n\n        return this;\n    }\n\n    /**\n     * Adds (binds) given value to entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    add(value: any|any[]): this {\n\n        return this;\n    }\n\n    /**\n     * Removes (unbinds) given value from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    remove(value: any|any[]): this {\n\n        return this;\n    }\n\n    /**\n     * Gets entity's relation id.\n     */\n    async getIdOf(): Promise<any> {\n\n    }\n\n    /**\n     * Gets entity's relation ids.\n     */\n    async getIdsOf(): Promise<any[]> {\n        return [];\n    }\n\n}\n\n\n/**\n * Repository for more specific operations.\n *\n * @deprecated Don't use it yet\n *\n * todo: most of these methods looks like can be part of query builder functionality\n * todo: maybe instead of SpecificRepository we should have SpecificQueryBuilder? (better name needed)\n * todo: it can be used like createQueryBuilder().specific().setRelation\n * todo: or maybe split specific into multiple different purpose QueryBuilders ? For example RelationQueryBuilder\n * todo: with methods like createQueryBuilder().relation(Post, \"categories\").set(value).add(value).remove(value)\n * todo: add and remove for many-to-many, set for many-to-one and value can be entity or simply entity id or id map\n * todo: also createQueryBuilder().relation(Post, \"categories\").getIdsOf(postIds)\n * todo: also createQueryBuilder().relation(Post, \"categories\").getCountOf(postIds)\n */\n/*export class SpecificRepository<Entity extends ObjectLiteral> {\n\n // -------------------------------------------------------------------------\n // Constructor\n // -------------------------------------------------------------------------\n\n constructor(protected connection: Connection,\n protected metadata: EntityMetadata,\n protected queryRunner?: QueryRunner) {\n }\n\n // -------------------------------------------------------------------------\n // Public Methods\n // -------------------------------------------------------------------------\n */\n/**\n * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async setRelation(relationName: string, entityId: any, relatedEntityId: any): Promise<void>;\n\n/**\n * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async setRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityId: any): Promise<void>;\n\n/**\n * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n\n async setRelation(relationProperty: string|((t: Entity) => string|any), entityId: any, relatedEntityId: any): Promise<void> {\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\n        // if (relation.isManyToMany || relation.isOneToMany || relation.isOneToOneNotOwner)\n        //     throw new Error(`Only many-to-one and one-to-one with join column are supported for this operation. ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\n        if (relation.isManyToMany)\n            throw new Error(`Many-to-many relation is not supported for this operation. Use #addToRelation method for many-to-many relations.`);\n\n        // todo: fix issues with joinColumns[0]\n\n        let table: string, values: any = {}, conditions: any = {};\n        if (relation.isOwning) {\n            table = relation.entityMetadata.tableName;\n            values[relation.joinColumns[0].referencedColumn!.databaseName] = relatedEntityId;\n            conditions[relation.joinColumns[0].referencedColumn!.databaseName] = entityId;\n        } else {\n            table = relation.inverseEntityMetadata.tableName;\n            values[relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName] = relatedEntityId;\n            conditions[relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName] = entityId;\n        }\n\n\n        const usedQueryRunner = this.queryRunner || this.connection.createQueryRunner();\n        await usedQueryRunner.update(table, values, conditions);\n        if (!this.queryRunner) // means created by this method\n            await usedQueryRunner.release();\n    }*/\n\n/**\n * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async setInverseRelation(relationName: string, relatedEntityId: any, entityId: any): Promise<void>;\n\n/**\n * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async setInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityId: any): Promise<void>;\n\n/**\n * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n\n async setInverseRelation(relationProperty: string|((t: Entity) => string|any), relatedEntityId: any, entityId: any): Promise<void> {\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\n        // todo: fix issues with joinColumns[0]\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\n        // if (relation.isManyToMany || relation.isOneToMany || relation.isOneToOneNotOwner)\n        //     throw new Error(`Only many-to-one and one-to-one with join column are supported for this operation. ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\n        if (relation.isManyToMany)\n            throw new Error(`Many-to-many relation is not supported for this operation. Use #addToRelation method for many-to-many relations.`);\n\n        let table: string, values: any = {}, conditions: any = {};\n        if (relation.isOwning) {\n            table = relation.inverseEntityMetadata.tableName;\n            values[relation.inverseRelation!.joinColumns[0].databaseName] = relatedEntityId;\n            conditions[relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName] = entityId;\n        } else {\n            table = relation.entityMetadata.tableName;\n            values[relation.joinColumns[0].databaseName] = relatedEntityId;\n            conditions[relation.joinColumns[0].referencedColumn!.databaseName] = entityId;\n        }\n\n        const usedQueryRunner = this.queryRunner || this.connection.createQueryRunner();\n        await usedQueryRunner.update(table, values, conditions);\n        if (!this.queryRunner) // means created by this method\n            await usedQueryRunner.release();\n    }*/\n\n/**\n * Adds a new relation between two entities into relation's many-to-many table.\n * Should be used when you want quickly and efficiently add a relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async addToRelation(relationName: string, entityId: any, relatedEntityIds: any[]): Promise<void>;\n\n/**\n * Adds a new relation between two entities into relation's many-to-many table.\n * Should be used when you want quickly and efficiently add a relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async addToRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void>;\n\n/**\n * Adds a new relation between two entities into relation's many-to-many table.\n * Should be used when you want quickly and efficiently add a relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n\n async addToRelation(relationProperty: string|((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void> {\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\n        if (!relation.isManyToMany)\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyPath} relation type is ${relation.relationType}`);\n\n        const usedQueryRunner = this.queryRunner || this.connection.createQueryRunner();\n        const insertPromises = relatedEntityIds.map(relatedEntityId => {\n            const values: any = {};\n            if (relation.isOwning) {\n                values[relation.junctionEntityMetadata!.columns[0].databaseName] = entityId;\n                values[relation.junctionEntityMetadata!.columns[1].databaseName] = relatedEntityId;\n            } else {\n                values[relation.junctionEntityMetadata!.columns[1].databaseName] = entityId;\n                values[relation.junctionEntityMetadata!.columns[0].databaseName] = relatedEntityId;\n            }\n\n            return usedQueryRunner.insert(relation.junctionEntityMetadata!.tableName, values);\n        });\n        await Promise.all(insertPromises);\n\n        if (!this.queryRunner) // means created by this method\n            await usedQueryRunner.release();\n    }*/\n\n/**\n * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\n * Should be used when you want quickly and efficiently add a relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async addToInverseRelation(relationName: string, relatedEntityId: any, entityIds: any[]): Promise<void>;\n\n/**\n * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\n * Should be used when you want quickly and efficiently add a relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async addToInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void>;\n\n/**\n * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\n * Should be used when you want quickly and efficiently add a relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n\n async addToInverseRelation(relationProperty: string|((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void> {\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\n        if (!relation.isManyToMany)\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyPath} relation type is ${relation.relationType}`);\n\n        const usedQueryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            const insertPromises = entityIds.map(entityId => {\n                const values: any = {};\n                if (relation.isOwning) {\n                    values[relation.junctionEntityMetadata!.columns[0].databaseName] = entityId;\n                    values[relation.junctionEntityMetadata!.columns[1].databaseName] = relatedEntityId;\n                } else {\n                    values[relation.junctionEntityMetadata!.columns[1].databaseName] = entityId;\n                    values[relation.junctionEntityMetadata!.columns[0].databaseName] = relatedEntityId;\n                }\n\n                return usedQueryRunner.insert(relation.junctionEntityMetadata!.tableName, values);\n            });\n            await Promise.all(insertPromises);\n\n        } finally {\n            if (!this.queryRunner) // means created by this method\n                await usedQueryRunner.release();\n        }\n    }*/\n\n/**\n * Removes a relation between two entities from relation's many-to-many table.\n * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async removeFromRelation(relationName: string, entityId: any, relatedEntityIds: any[]): Promise<void>;\n\n/**\n * Removes a relation between two entities from relation's many-to-many table.\n * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async removeFromRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void>;\n\n/**\n * Removes a relation between two entities from relation's many-to-many table.\n * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n\n async removeFromRelation(relationProperty: string|((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void> {\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\n        if (!relation.isManyToMany)\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyPath} relation type is ${relation.relationType}`);\n\n        // check if given relation entity ids is empty - then nothing to do here (otherwise next code will remove all ids)\n        if (!relatedEntityIds || !relatedEntityIds.length)\n            return Promise.resolve();\n\n        const qb = this.connection.manager\n            .createQueryBuilder(this.queryRunner)\n            .delete()\n            .from(relation.junctionEntityMetadata!.tableName, \"junctionEntity\");\n\n        const firstColumnName = this.connection.driver.escapeColumn(relation.isOwning ? relation.junctionEntityMetadata!.columns[0].databaseName : relation.junctionEntityMetadata!.columns[1].databaseName);\n        const secondColumnName = this.connection.driver.escapeColumn(relation.isOwning ? relation.junctionEntityMetadata!.columns[1].databaseName : relation.junctionEntityMetadata!.columns[0].databaseName);\n\n        relatedEntityIds.forEach((relatedEntityId, index) => {\n            qb.orWhere(`(${firstColumnName}=:entityId AND ${secondColumnName}=:relatedEntity_${index})`)\n                .setParameter(\"relatedEntity_\" + index, relatedEntityId);\n        });\n\n        await qb\n            .setParameter(\"entityId\", entityId)\n            .execute();\n    }*/\n\n/**\n * Removes a relation between two entities from relation's many-to-many table.\n * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async removeFromInverseRelation(relationName: string, relatedEntityId: any, entityIds: any[]): Promise<void>;\n\n/**\n * Removes a relation between two entities from relation's many-to-many table.\n * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async removeFromInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void>;\n\n/**\n * Removes a relation between two entities from relation's many-to-many table.\n * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n\n async removeFromInverseRelation(relationProperty: string|((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void> {\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\n        if (!relation.isManyToMany)\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyPath} relation type is ${relation.relationType}`);\n\n        // check if given entity ids is empty - then nothing to do here (otherwise next code will remove all ids)\n        if (!entityIds || !entityIds.length)\n            return Promise.resolve();\n\n        const qb = this.connection.manager\n            .createQueryBuilder(this.queryRunner)\n            .delete()\n            .from(relation.junctionEntityMetadata!.tableName, \"junctionEntity\");\n\n        const firstColumnName = relation.isOwning ? relation.junctionEntityMetadata!.columns[1].databaseName : relation.junctionEntityMetadata!.columns[0].databaseName;\n        const secondColumnName = relation.isOwning ? relation.junctionEntityMetadata!.columns[0].databaseName : relation.junctionEntityMetadata!.columns[1].databaseName;\n\n        entityIds.forEach((entityId, index) => {\n            qb.orWhere(`(${firstColumnName}=:relatedEntityId AND ${secondColumnName}=:entity_${index})`)\n              .setParameter(\"entity_\" + index, entityId);\n        });\n\n        await qb.setParameter(\"relatedEntityId\", relatedEntityId).execute();\n    }*/\n\n/**\n * Performs both #addToRelation and #removeFromRelation operations.\n * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async addAndRemoveFromRelation(relation: string, entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void>;\n\n/**\n * Performs both #addToRelation and #removeFromRelation operations.\n * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async addAndRemoveFromRelation(relation: ((t: Entity) => string|any), entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void>;\n\n/**\n * Performs both #addToRelation and #removeFromRelation operations.\n * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n\n async addAndRemoveFromRelation(relation: string|((t: Entity) => string|any), entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void> {\n        await Promise.all([\n            this.addToRelation(relation as any, entityId, addRelatedEntityIds),\n            this.removeFromRelation(relation as any, entityId, removeRelatedEntityIds)\n        ]);\n    }*/\n\n/**\n * Performs both #addToRelation and #removeFromRelation operations.\n * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async addAndRemoveFromInverseRelation(relation: string, relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void>;\n\n/**\n * Performs both #addToRelation and #removeFromRelation operations.\n * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n */\n// async addAndRemoveFromInverseRelation(relation: ((t: Entity) => string|any), relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void>;\n\n/**\n * Performs both #addToRelation and #removeFromRelation operations.\n * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n\n async addAndRemoveFromInverseRelation(relation: string|((t: Entity) => string|any), relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void> {\n        await Promise.all([\n            this.addToInverseRelation(relation as any, relatedEntityId, addEntityIds),\n            this.removeFromInverseRelation(relation as any, relatedEntityId, removeEntityIds)\n        ]);\n    }*/\n\n// -------------------------------------------------------------------------\n// Protected Methods\n// -------------------------------------------------------------------------\n\n/**\n * Converts entity or entities to id or ids map.\n\n protected convertEntityOrEntitiesToIdOrIds(columns: ColumnMetadata[], entityOrEntities: Entity[]|Entity|any|any[]): any|any[] {\n        if (entityOrEntities instanceof Array) {\n            return entityOrEntities.map(entity => this.convertEntityOrEntitiesToIdOrIds(columns, entity));\n\n        } else {\n            if (entityOrEntities instanceof Object) {\n                return columns.reduce((ids, column) => {\n                    ids[column.databaseName] = column.getEntityValue(entityOrEntities);\n                    return ids;\n                }, {} as ObjectLiteral);\n            } else {\n                return entityOrEntities;\n            }\n        }\n    }*/\n\n/**\n * Extracts unique objects from given entity and all its downside relations.\n\n protected extractObjectsById(entity: any, metadata: EntityMetadata, entityWithIds: Subject[] = []): Promise<Subject[]> {\n        const promises = metadata.relations.map(relation => {\n            const relMetadata = relation.inverseEntityMetadata;\n\n            const value = relation.getEntityValue(entity);\n            if (!value)\n                return undefined;\n\n            if (value instanceof Array) {\n                const subPromises = value.map((subEntity: any) => {\n                    return this.extractObjectsById(subEntity, relMetadata, entityWithIds);\n                });\n                return Promise.all(subPromises);\n\n            } else {\n                return this.extractObjectsById(value, relMetadata, entityWithIds);\n            }\n        });\n\n        return Promise.all<any>(promises.filter(result => !!result)).then(() => {\n            if (!entityWithIds.find(entityWithId => entityWithId.entity === entity)) {\n                const entityWithId = new Subject(metadata, entity);\n                entityWithIds.push(entityWithId);\n            }\n\n            return entityWithIds;\n        });\n    }  */\n\n// }","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {SelectQueryBuilder} from \"./SelectQueryBuilder\";\nimport {UpdateQueryBuilder} from \"./UpdateQueryBuilder\";\nimport {DeleteQueryBuilder} from \"./DeleteQueryBuilder\";\nimport {InsertQueryBuilder} from \"./InsertQueryBuilder\";\nimport {RelationQueryBuilder} from \"./RelationQueryBuilder\";\nimport {ObjectType} from \"../common/ObjectType\";\n\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n\n// todo: implement subselects for WHERE, FROM, SELECT\n// .fromSubSelect()\n// .whereSubSelect()\n// .addSubSelect()\n// .addSubSelectAndMap()\n// use qb => qb.select().from().where() syntax where needed\n\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport abstract class QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Protected properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection on which QueryBuilder was created.\n     */\n    protected connection: Connection;\n\n    /**\n     * Query runner used to execute query builder query.\n     */\n    protected queryRunner: QueryRunner;\n\n    /**\n     * Indicates if query runner was created by QueryBuilder itself, or came from outside.\n     * If it was created by query builder then it will be released by it once it done.\n     * Otherwise it should be released by owner who sent QueryRunner into this QueryBuilder.\n     */\n    protected ownQueryRunner: boolean;\n\n    /**\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\n     */\n    protected expressionMap: QueryExpressionMap;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(queryBuilder: QueryBuilder<any>);\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connection: Connection, queryRunner?: QueryRunner);\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        if (connectionOrQueryBuilder instanceof QueryBuilder) {\n            this.connection = connectionOrQueryBuilder.connection;\n            this.queryRunner = connectionOrQueryBuilder.queryRunner || this.connection.createQueryRunner();\n            this.ownQueryRunner = connectionOrQueryBuilder.queryRunner ? false : true;\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();\n\n        } else {\n            this.connection = connectionOrQueryBuilder;\n            this.queryRunner = queryRunner || this.connection.createQueryRunner();\n            this.ownQueryRunner = queryRunner ? false : true;\n            this.expressionMap = new QueryExpressionMap(this.connection);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    abstract getQuery(): string;\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the main alias string used in this query builder.\n     */\n    get alias(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new Error(`Main alias is not set`); // todo: better exception\n\n        return this.expressionMap.mainAlias.name;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string, selectionAliasName?: string): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string[]): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection?: string|string[], selectionAliasName?: string): SelectQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"select\";\n        if (selection instanceof Array) {\n            this.expressionMap.selects = selection.map(selection => ({ selection: selection }));\n        } else if (selection) {\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\n        }\n\n        // loading it dynamically because of circular issue\n        const SelectQueryBuilderCls = require(\"./SelectQueryBuilder\").SelectQueryBuilder;\n        if (this instanceof SelectQueryBuilderCls)\n            return this as any;\n\n        return new SelectQueryBuilderCls(this);\n    }\n\n    /**\n     * Creates INSERT query.\n     */\n    insert(): InsertQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"insert\";\n\n        // loading it dynamically because of circular issue\n        const InsertQueryBuilderCls = require(\"./InsertQueryBuilder\").InsertQueryBuilder;\n        if (this instanceof InsertQueryBuilderCls)\n            return this as any;\n\n        return new InsertQueryBuilderCls(this);\n    }\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(updateSet: ObjectLiteral): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update<T>(entity: ObjectType<T>, updateSet: ObjectLiteral): UpdateQueryBuilder<T>;\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update(entity: string, updateSet: ObjectLiteral): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query for the given table name and applies given update values.\n     */\n    update(tableName: string, updateSet: ObjectLiteral): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(entityOrTableNameUpdateSet?: string|Function|ObjectLiteral, maybeUpdateSet?: ObjectLiteral): UpdateQueryBuilder<any> {\n        const updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet as ObjectLiteral|undefined;\n\n        if (entityOrTableNameUpdateSet instanceof Function || typeof entityOrTableNameUpdateSet === \"string\")\n            this.setMainAlias(entityOrTableNameUpdateSet);\n\n        this.expressionMap.queryType = \"update\";\n        this.expressionMap.valuesSet = updateSet;\n\n        // loading it dynamically because of circular issue\n        const UpdateQueryBuilderCls = require(\"./UpdateQueryBuilder\").UpdateQueryBuilder;\n        if (this instanceof UpdateQueryBuilderCls)\n            return this as any;\n\n        return new UpdateQueryBuilderCls(this);\n    }\n\n    /**\n     * Creates DELETE query.\n     */\n    delete(): DeleteQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"delete\";\n\n        // loading it dynamically because of circular issue\n        const DeleteQueryBuilderCls = require(\"./DeleteQueryBuilder\").DeleteQueryBuilder;\n        if (this instanceof DeleteQueryBuilderCls)\n            return this as any;\n\n        return new DeleteQueryBuilderCls(this);\n    }\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(entityTarget: Function|string, propertyPath: string): RelationQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"relation\";\n        // qb.expressionMap.propertyPath = propertyPath;\n        this.setMainAlias(entityTarget);\n\n        // loading it dynamically because of circular issue\n        const RelationQueryBuilderCls = require(\"./RelationQueryBuilder\").RelationQueryBuilder;\n        if (this instanceof RelationQueryBuilderCls)\n            return this as any;\n\n        return new RelationQueryBuilderCls(this);\n    }\n\n    /**\n     * Sets parameter name and its value.\n     */\n    setParameter(key: string, value: any): this {\n        this.expressionMap.parameters[key] = value;\n        return this;\n    }\n\n    /**\n     * Adds all parameters from the given object.\n     */\n    setParameters(parameters: ObjectLiteral): this {\n        Object.keys(parameters).forEach(key => {\n            this.expressionMap.parameters[key] = parameters[key];\n        });\n        return this;\n    }\n\n    /**\n     * Gets all parameters.\n     */\n    getParameters(): ObjectLiteral {\n        const parameters: ObjectLiteral = Object.assign({}, this.expressionMap.parameters);\n\n        // add discriminator column parameter if it exist\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const values = metadata.childEntityMetadatas\n                    .filter(childMetadata => childMetadata.discriminatorColumn)\n                    .map(childMetadata => childMetadata.discriminatorValue);\n                values.push(metadata.discriminatorValue);\n                parameters[\"discriminatorColumnValues\"] = values;\n            }\n        }\n\n        return parameters;\n    }\n\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    getSql(): string {\n        return this.connection.driver.escapeQueryWithParameters(this.getQuery(), this.getParameters())[0];\n    }\n\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    printSql(): this {\n        console.log(this.getSql());\n        return this;\n    }\n\n    /**\n     * Gets sql to be executed with all parameters used in it.\n     */\n    getSqlAndParameters(): [string, any[]] {\n        return this.connection.driver.escapeQueryWithParameters(this.getQuery(), this.getParameters());\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<any> {\n        const [sql, parameters] = this.getSqlAndParameters();\n        try {\n            return await this.queryRunner.query(sql, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (this.ownQueryRunner) // means we created our own query runner\n                await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * Creates a completely new query builder.\n     */\n    createQueryBuilder(): this {\n        return new (this.constructor as any)(this.connection);\n    }\n\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    clone(): this {\n        const qb = this.createQueryBuilder();\n        qb.expressionMap = this.expressionMap.clone();\n        return qb;\n    }\n\n    /**\n     * Disables escaping.\n     */\n    disableEscaping(): this {\n        this.expressionMap.disableEscaping = false;\n        return this;\n    }\n\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    escape(name: string): string {\n        if (!this.expressionMap.disableEscaping)\n            return name;\n        return this.connection.driver.escape(name);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    protected getTableName(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new Error(`Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.`);\n\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tableName;\n\n        return this.expressionMap.mainAlias.tableName!;\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    protected setMainAlias(entityTarget: Function|string, aliasName?: string): this {\n\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            this.expressionMap.createMainAlias({\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n            });\n\n        } else {\n            const isSubQuery = entityTarget instanceof Function || entityTarget.substr(0, 1) === \"(\" && entityTarget.substr(-1) === \")\";\n            const subQuery = entityTarget instanceof Function ? entityTarget(((this as any) as SelectQueryBuilder<any>).subQuery()).getQuery() : entityTarget;\n            this.expressionMap.createMainAlias({\n                name: aliasName,\n                tableName: isSubQuery === false ? entityTarget as string : undefined,\n                subQuery: isSubQuery === true ? subQuery : undefined,\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Replaces all entity's propertyName to name in the given statement.\n     */\n    protected replacePropertyNames(statement: string) {\n        this.expressionMap.aliases.forEach(alias => {\n            if (!alias.hasMetadata) return;\n            alias.metadata.columns.forEach(column => {\n                const expression = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + column.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + this.escape(alias.name) + \".\" + this.escape(column.databaseName) + \"$2\");\n                const expression2 = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + column.propertyName + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression2, \"gm\"), \"$1\" + this.escape(alias.name) + \".\" + this.escape(column.databaseName) + \"$2\");\n            });\n            alias.metadata.relations.forEach(relation => {\n                [...relation.joinColumns, ...relation.inverseJoinColumns].forEach(joinColumn => {\n                    const expression = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + relation.propertyPath + \"\\\\.\" + joinColumn.referencedColumn!.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + this.escape(alias.name) + \".\" + this.escape(joinColumn.databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                });\n                if (relation.joinColumns.length > 0) {\n                    const expression = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + relation.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + this.escape(alias.name) + \".\" + this.escape(relation.joinColumns[0].databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                }\n            });\n        });\n        return statement;\n    }\n\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    protected createWhereExpression() {\n\n        const conditions = this.expressionMap.wheres.map((where, index) => {\n            switch (where.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(where.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(where.condition);\n                default:\n                    return this.replacePropertyNames(where.condition);\n            }\n        }).join(\" \");\n\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const condition = `${this.replacePropertyNames(this.expressionMap.mainAlias!.name + \".\" + metadata.discriminatorColumn.databaseName)} IN (:discriminatorColumnValues)`;\n                return ` WHERE ${ conditions.length ? \"(\" + conditions + \") AND\" : \"\" } ${condition}`;\n            }\n        }\n\n        if (!conditions.length) // TODO copy in to discriminator condition\n            return this.expressionMap.extraAppendedAndWhereCondition ? \" WHERE \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : \"\";\n\n        if (this.expressionMap.extraAppendedAndWhereCondition)\n            return \" WHERE (\" + conditions + \") AND \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\n\n        return \" WHERE \" + conditions;\n    }\n\n    /**\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\n     */\n    protected createWhereIdsExpression(ids: any[]): [string, ObjectLiteral] {\n        const metadata = this.expressionMap.mainAlias!.metadata;\n\n        // create shortcuts for better readability\n        const alias = this.expressionMap.mainAlias!.name;\n        const parameters: ObjectLiteral = {};\n        const whereStrings = ids.map((id, index) => {\n            const whereSubStrings: string[] = [];\n            metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {\n                whereSubStrings.push(this.escape(alias) + \".\" + this.escape(primaryColumn.databaseName) + \"=:id_\" + index + \"_\" + secondIndex);\n                parameters[\"id_\" + index + \"_\" + secondIndex] = primaryColumn.getEntityValue(id);\n            });\n            metadata.parentIdColumns.forEach((parentIdColumn, secondIndex) => {\n                whereSubStrings.push(this.escape(alias) + \".\" + this.escape(parentIdColumn.databaseName) + \"=:parentId_\" + index + \"_\" + secondIndex);\n                parameters[\"parentId_\" + index + \"_\" + secondIndex] = parentIdColumn.getEntityValue(id);\n            });\n            return whereSubStrings.join(\" AND \");\n        });\n\n        const whereString = whereStrings.length > 1 ? \"(\" + whereStrings.join(\" OR \") + \")\" : whereStrings[0];\n        return [whereString, parameters];\n    }\n\n}\n","import {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n/**\n * Arguments for RelationIdMetadataArgs class.\n */\nexport interface RelationIdMetadataArgs {\n\n    /**\n     * Class to which this decorator is applied.\n     */\n    readonly target: Function;\n\n    /**\n     * Class's property name to which this decorator is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Target's relation which it should count.\n     */\n    readonly relation: string|((object: any) => any);\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    readonly alias?: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    readonly queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n}\n","import {RelationIdMetadataArgs} from \"../metadata-args/RelationIdMetadataArgs\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationIdMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Relation from which ids will be extracted.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string|((object: any) => any);\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: RelationIdMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation id properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);\n\n        this.relation = relation;\n    }\n\n}","import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\n\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this embedded is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Parent embedded in the case if this embedded inside other embedded.\n     */\n    parentEmbeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Embedded target type.\n     */\n    type: Function;\n\n    /**\n     * Property name on which this embedded is attached.\n     */\n    propertyName: string;\n\n    /**\n     * Columns inside this embed.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Relations inside this embed.\n     */\n    relations: RelationMetadata[] = [];\n\n    /**\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n     */\n    embeddeds: EmbeddedMetadata[] = [];\n\n    /**\n     * Indicates if this embedded is in array mode.\n     *\n     * This option works only in monogodb.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Prefix of the embedded, used instead of propertyName.\n     * If set to empty string, then prefix is not set at all.\n     */\n    customPrefix: string|boolean|undefined;\n\n    /**\n     * Gets the prefix of the columns.\n     * By default its a property name of the class where this prefix is.\n     * But if custom prefix is set then it takes its value as a prefix.\n     * However if custom prefix is set to empty string prefix to column is not applied at all.\n     */\n    prefix: string;\n\n    /**\n     * Returns array of property names of current embed and all its parent embeds.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * we need to get value of \"id\" column from the post real entity object.\n     * this method will return [\"data\", \"information\", \"counters\"]\n     */\n    parentPropertyNames: string[] = [];\n\n    /**\n     * Returns embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    embeddedMetadataTree: EmbeddedMetadata[] = [];\n\n    /**\n     * Embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    columnsFromTree: ColumnMetadata[] = [];\n\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    relationsFromTree: RelationMetadata[] = [];\n\n    /**\n     * Relation ids of this embed and all relation ids from its child embeds.\n     */\n    relationIdsFromTree: RelationIdMetadata[] = [];\n\n    /**\n     * Relation counts of this embed and all relation counts from its child embeds.\n     */\n    relationCountsFromTree: RelationCountMetadata[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: EmbeddedMetadataArgs,\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.type = options.args.type();\n        this.propertyName = options.args.propertyName;\n        this.customPrefix = options.args.prefix;\n        this.isArray = options.args.isArray;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates a new embedded object.\n     */\n    create(): any {\n        return new (this.type as any);\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    build(namingStrategy: NamingStrategyInterface): this {\n        this.embeddeds.forEach(embedded => embedded.build(namingStrategy));\n        this.prefix = this.buildPrefix();\n        this.parentPropertyNames = this.buildParentPropertyNames();\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n        this.columnsFromTree = this.buildColumnsFromTree();\n        this.relationsFromTree = this.buildRelationsFromTree();\n        return this;\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    protected buildPrefix(): string {\n        let prefixes: string[] = [];\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix());\n\n        if (this.customPrefix === undefined) {\n            prefixes.push(this.propertyName);\n\n        } else if (typeof this.customPrefix === \"string\") {\n            prefixes.push(this.customPrefix);\n        }\n\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n    }\n\n    protected buildParentPropertyNames(): string[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\n    }\n\n    protected buildEmbeddedMetadataTree(): EmbeddedMetadata[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\n    }\n\n    protected buildColumnsFromTree(): ColumnMetadata[] {\n        return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);\n    }\n\n    protected buildRelationsFromTree(): RelationMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);\n    }\n\n}","import {OnDeleteType} from \"../../metadata/types/OnDeleteType\";\n\n// todo: add ON_UPDATE\n\n/**\n * Describes all relation's options.\n */\nexport interface RelationOptions {\n\n    /**\n     * If set to true then it means that related object can be allowed to be inserted / updated / removed to the db.\n     * This is option a shortcut if you would like to set cascadeInsert, cascadeUpdate and cascadeRemove to true.\n     */\n    cascadeAll?: boolean;\n\n    /**\n     * If set to true then it means that related object can be allowed to be inserted to the db.\n     */\n    cascadeInsert?: boolean;\n\n    /**\n     * If set to true then it means that related object can be allowed to be updated in the db.\n     */\n    cascadeUpdate?: boolean;\n\n    /**\n     * If set to true then it means that related object can be allowed to be remove from the db.\n     */\n    cascadeRemove?: boolean;\n\n    /**\n     * Indicates if relation column value can be nullable or not.\n     */\n    nullable?: boolean;\n\n    /**\n     * Database cascade action on delete.\n     */\n    onDelete?: OnDeleteType;\n\n    /**\n     * Indicates if this relation will be a primary key.\n     * Can be used only for many-to-one and owner one-to-one relations.\n     */\n    primary?: boolean;\n\n    /**\n     * Set this relation to be lazy. Note: lazy relations are promises. When you call them they return promise\n     * which resolve relation result then. If your property's type is Promise then this relation is set to lazy automatically.\n     */\n    lazy?: boolean;\n\n}","/**\n * Contains the name of the property of the object, or the function that returns this name.\n */\nexport type PropertyTypeFactory<T> = string|((t: T) => string|any);\n","/**\n * Function that returns a type of the field. Returned value must be a class used on the relation.\n */\nexport type RelationTypeInFunction = ((type?: any) => Function)|Function|string; // todo: |string ?\n\n","import {RelationType} from \"../metadata/types/RelationTypes\";\nimport {RelationOptions} from \"../decorator/options/RelationOptions\";\nimport {PropertyTypeFactory} from \"../metadata/types/PropertyTypeInFunction\";\nimport {RelationTypeInFunction} from \"../metadata/types/RelationTypeInFunction\";\n\n/**\n * Arguments for RelationMetadata class.\n */\nexport interface RelationMetadataArgs {\n\n    /**\n     * Class to which this relation is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * In the case if this relation is without a target, targetId must be specified.\n     * This is used for entity schemas without classes.\n     */\n    // readonly targetId?: string;\n\n    /**\n     * Class's property name to which this relation is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Indicates if this relation will be lazily loaded.\n     */\n    readonly isLazy: boolean;\n\n    /**\n     * Original (reflected) class's property type.\n     *\n     * todo: this can be empty for relations from entity schemas.\n     */\n    // readonly propertyType?: any;\n\n    /**\n     * Type of relation. Can be one of the value of the RelationTypes class.\n     */\n    readonly relationType: RelationType;\n\n    /**\n     * Type of the relation. This type is in function because of language specifics and problems with recursive\n     * referenced classes.\n     */\n    readonly type: RelationTypeInFunction;\n\n    /**\n     * Inverse side of the relation.\n     */\n    readonly inverseSideProperty?: PropertyTypeFactory<any>;\n\n    /**\n     * Additional relation options.\n     */\n    readonly options: RelationOptions;\n\n    /**\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n     */\n    readonly isTreeParent?: boolean;\n\n    /**\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n     */\n    readonly isTreeChildren?: boolean;\n\n}","import {RelationType} from \"./types/RelationTypes\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\nimport {OnDeleteType} from \"./types/OnDeleteType\";\nimport {PropertyTypeFactory} from \"./types/PropertyTypeInFunction\";\n\n/**\n * Contains all information about some entity's relation.\n */\nexport class RelationMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity where this relation is placed.\n     *\n     * For example for @ManyToMany(type => Category) in Post, entityMetadata will be metadata of Post entity.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata of the entity that is targeted by this relation.\n     *\n     * For example for @ManyToMany(type => Category) in Post, inverseEntityMetadata will be metadata of Category entity.\n     */\n    inverseEntityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata of the junction table.\n     * Junction tables have their own entity metadata objects.\n     * Defined only for many-to-many relations.\n     */\n    junctionEntityMetadata?: EntityMetadata;\n\n    /**\n     * Embedded metadata where this relation is.\n     * If this relation is not in embed then this property value is undefined.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Relation type, e.g. is it one-to-one, one-to-many, many-to-one or many-to-many.\n     */\n    relationType: RelationType;\n\n    /**\n     * Target entity to which this relation is applied.\n     * Target IS NOT equal to entityMetadata.target, because relation\n     *\n     * For example for @ManyToMany(type => Category) in Post, target will be Post.\n     * If @ManyToMany(type => Category) is in Counters which is embedded into Post, target will be Counters.\n     * If @ManyToMany(type => Category) is in abstract class BaseUser which Post extends, target will be BaseUser.\n     * Target can be string if its defined in entity schema instead of class.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which relation decorator is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Gets full path to this column property (including relation name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just property name of the column.\n     */\n    propertyPath: string;\n\n    /**\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n     */\n    isTreeParent: boolean = false;\n\n    /**\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n     */\n    isTreeChildren: boolean = false;\n\n    /**\n     * Indicates if this relation's column is a primary key.\n     * Can be used only for many-to-one and owner one-to-one relations.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if this relation is lazily loaded.\n     */\n    isLazy: boolean = false;\n\n    /**\n     * If set to true then related objects are allowed to be inserted to the database.\n     */\n    isCascadeInsert: boolean = false;\n\n    /**\n     * If set to true then related objects are allowed to be updated in the database.\n     */\n    isCascadeUpdate: boolean = false;\n\n    /**\n     * If set to true then related objects are allowed to be remove from the database.\n     */\n    isCascadeRemove: boolean = false;\n\n    /**\n     * Indicates if relation column value can be nullable or not.\n     */\n    isNullable: boolean = true;\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType;\n\n    /**\n     * Gets the property's type to which this relation is applied.\n     *\n     * For example for @ManyToMany(type => Category) in Post, target will be Category.\n     */\n    type: Function|string;\n\n    /**\n     * Indicates if this side is an owner of this relation.\n     */\n    isOwning: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"one-to-one\".\n     */\n    isOneToOne: boolean = false;\n\n    /**\n     * Checks if this relation is owner side of the \"one-to-one\" relation.\n     * Owner side means this side of relation has a join column in the table.\n     */\n    isOneToOneOwner: boolean = false;\n\n    /**\n     * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\n     */\n    isWithJoinColumn: boolean = false;\n\n    /**\n     * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\n     * NOT owner side means this side of relation does not have a join column in the table.\n     */\n    isOneToOneNotOwner: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"one-to-many\".\n     */\n    isOneToMany: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-one\".\n     */\n    isManyToOne: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-many\".\n     */\n    isManyToMany: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\n     * Owner side means this side of relation has a join table.\n     */\n    isManyToManyOwner: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\n     * Not owner side means this side of relation does not have a join table.\n     */\n    isManyToManyNotOwner: boolean = false;\n\n    /**\n     * Gets the property path of the inverse side of the relation.\n     */\n    inverseSidePropertyPath: string;\n\n    /**\n     * Inverse side of the relation set by user.\n     *\n     * Inverse side set in the relation can be either string - property name of the column on inverse side,\n     * either can be a function that accepts a map of properties with the object and returns one of them.\n     * Second approach is used to achieve type-safety.\n     */\n    givenInverseSidePropertyFactory: PropertyTypeFactory<any>;\n\n    /**\n     * Gets the relation metadata of the inverse side of this relation.\n     */\n    inverseRelation?: RelationMetadata;\n\n    /**\n     * Join table name.\n     */\n    joinTableName: string;\n\n    /**\n     * Foreign keys created for this relation.\n     */\n    foreignKeys: ForeignKeyMetadata[] = [];\n\n    /**\n     * Join table columns.\n     * Join columns can be obtained only from owner side of the relation.\n     * From non-owner side of the relation join columns will be empty.\n     * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\n     * If this relation is many-to-many then it takes all owner join columns from the junction entity.\n     */\n    joinColumns: ColumnMetadata[] = [];\n\n    /**\n     * Inverse join table columns.\n     * Inverse join columns are supported only for many-to-many relations\n     * and can be obtained only from owner side of the relation.\n     * From non-owner side of the relation join columns will be undefined.\n     */\n    inverseJoinColumns: ColumnMetadata[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        args: RelationMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata!;\n        const args = options.args;\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.relationType = args.relationType;\n\n        if (args.inverseSideProperty)\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty;\n\n        this.isLazy = args.isLazy || false;\n        this.isCascadeInsert = args.options.cascadeInsert || args.options.cascadeAll || false;\n        this.isCascadeUpdate = args.options.cascadeUpdate || args.options.cascadeAll || false;\n        this.isCascadeRemove = args.options.cascadeRemove || args.options.cascadeAll || false;\n        this.isNullable = args.options.nullable !== false;\n        this.onDelete = args.options.onDelete;\n        this.isPrimary = args.options.primary || false;\n        this.isTreeParent = args.isTreeParent || false;\n        this.isTreeChildren = args.isTreeChildren || false;\n        this.type = args.type instanceof Function ? (args.type as () => any)() : args.type;\n\n        this.isOneToOne = this.relationType === \"one-to-one\";\n        this.isOneToMany = this.relationType === \"one-to-many\";\n        this.isManyToOne = this.relationType === \"many-to-one\";\n        this.isManyToMany = this.relationType === \"many-to-many\";\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false;\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(entity: ObjectLiteral): any|undefined {\n\n        // extract column value from embeddeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                return propertyName ? extractEmbeddedColumnValue(propertyNames, value[propertyName]) : value;\n            };\n\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\n            return embeddedObject ? embeddedObject[this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName] : undefined;\n\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\n            return entity[this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName];\n        }\n    }\n\n    /**\n     * Sets given entity's relation's value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     */\n    setEntityValue(entity: ObjectLiteral, value: any): void {\n        const propertyName = this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName;\n\n        if (this.embeddedMetadata) {\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                const embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\n\n        } else {\n            entity[propertyName] = value;\n        }\n    }\n\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value: any) {\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue(propertyNames, {});\n\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\n            return { [this.propertyName]: value };\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation metadata properties.\n     * This builder method should be used only after embedded metadata tree was build.\n     */\n    build() {\n        this.propertyPath = this.buildPropertyPath();\n    }\n\n    /**\n     * Registers given foreign keys in the relation.\n     * This builder method should be used to register foreign key in the relation.\n     */\n    registerForeignKeys(...foreignKeys: ForeignKeyMetadata[]) {\n        this.foreignKeys.push(...foreignKeys);\n        this.joinColumns = this.foreignKeys[0] ? this.foreignKeys[0].columns : [];\n        this.inverseJoinColumns = this.foreignKeys[1] ? this.foreignKeys[1].columns : [];\n        this.isOwning = this.isManyToOne || ((this.isManyToMany || this.isOneToOne) && this.joinColumns.length > 0);\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning;\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning;\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;\n    }\n\n    /**\n     * Registers a given junction entity metadata.\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\n     */\n    registerJunctionEntityMetadata(junctionEntityMetadata: EntityMetadata) {\n        this.junctionEntityMetadata = junctionEntityMetadata;\n        this.joinTableName = junctionEntityMetadata.tableName;\n        if (this.inverseRelation) {\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\n            this.joinTableName = junctionEntityMetadata.tableName;\n        }\n    }\n\n    /**\n     * Builds inverse side property path based on given inverse side property factory.\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\n     */\n    buildInverseSidePropertyPath(): string {\n\n        if (this.givenInverseSidePropertyFactory) {\n            const ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\n                return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);\n\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\n                return this.givenInverseSidePropertyFactory;\n\n        } else if (this.isTreeParent && this.entityMetadata.treeChildrenRelation) {\n            return this.entityMetadata.treeChildrenRelation.propertyName;\n\n        } else if (this.isTreeChildren && this.entityMetadata.treeParentRelation) {\n            return this.entityMetadata.treeParentRelation.propertyName;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds relation's property path based on its embedded tree.\n     */\n    buildPropertyPath(): string {\n        if (!this.embeddedMetadata || !this.embeddedMetadata.parentPropertyNames.length)\n            return this.propertyName;\n\n        return this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\" + this.propertyName;\n    }\n\n}","import {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {Connection} from \"../connection/Connection\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Wraps entities and creates getters/setters for their relations\n * to be able to lazily load relations when accessing these relations.\n */\nexport class LazyRelationsWrapper {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given entity and creates getters/setters for its given relation\n     * to be able to lazily load data when accessing these relation.\n     */\n    wrap(object: ObjectLiteral, relation: RelationMetadata) {\n        const that = this;\n        const dataIndex = \"__\" + relation.propertyName + \"__\"; // in what property of the entity loaded data will be stored\n        const promiseIndex = \"__promise_\" + relation.propertyName + \"__\"; // in what property of the entity loading promise will be stored\n        const resolveIndex = \"__has_\" + relation.propertyName + \"__\"; // indicates if relation data already was loaded or not\n\n        Object.defineProperty(object, relation.propertyName, {\n            get: function() {\n                if (this[resolveIndex] === true) // if related data already was loaded then simply return it\n                    return Promise.resolve(this[dataIndex]);\n\n                if (this[promiseIndex]) // if related data is loading then return a promise that loads it\n                    return this[promiseIndex];\n\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\n                this[promiseIndex] = that.loadRelationResults(relation, this).then(result => {\n                    this[dataIndex] = result;\n                    this[resolveIndex] = true;\n                    delete this[promiseIndex];\n                    return this[dataIndex];\n\n                }); // .catch((err: any) => { throw err; });\n                return this[promiseIndex];\n            },\n            set: function(promise: Promise<any>) {\n                if (promise instanceof Promise) { // if set data is a promise then wait for its resolve and save in the object\n                    promise.then(result => {\n                        this[dataIndex] = result;\n                        this[resolveIndex] = true;\n                    });\n\n                } else { // if its direct data set (non promise, probably not safe-typed)\n                    this[dataIndex] = promise;\n                    this[resolveIndex] = true;\n                }\n            },\n            configurable: true\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation data for the given entity and its relation.\n     */\n    protected loadRelationResults(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadManyToOneOrOneToOneOwner(relation, entity);\n\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadOneToManyOrOneToOneNotOwner(relation, entity);\n\n        } else if (relation.isManyToManyOwner) {\n            return this.loadManyToManyOwner(relation, entity);\n\n        } else { // many-to-many non owner\n            return this.loadManyToManyNotOwner(relation, entity);\n        }\n    }\n\n    /**\n     * Loads data for many-to-one and one-to-one owner relations.\n     *\n     * (ow) post.category<=>category.post\n     * loaded: category from post\n     * example: SELECT category.id AS category_id, category.name AS category_name FROM category category\n     *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\n     */\n    protected loadManyToOneOrOneToOneOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\n        const conditions = joinColumns.map(joinColumn => {\n            return `${relation.entityMetadata.name}.${relation.propertyName} = ${relation.propertyName}.${joinColumn.referencedColumn!.propertyName}`;\n        }).join(\" AND \");\n\n        const qb = this.connection\n            .createQueryBuilder()\n            .select(relation.propertyName) // category\n            .from(relation.type, relation.propertyName) // Category, category\n            .innerJoin(relation.entityMetadata.target as Function, relation.entityMetadata.name, conditions);\n\n        joinColumns.forEach(joinColumn => {\n            qb.andWhere(`${relation.entityMetadata.name}.${joinColumn.referencedColumn!.databaseName} = :${joinColumn.referencedColumn!.databaseName}`)\n                .setParameter(`${joinColumn.referencedColumn!.databaseName}`, joinColumn.referencedColumn!.getEntityValue(entity));\n        });\n        return qb.getOne();\n    }\n\n    /**\n     * Loads data for one-to-many and one-to-one not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]\n     */\n    protected loadOneToManyOrOneToOneNotOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        const qb = this.connection\n            .createQueryBuilder()\n            .select(relation.propertyName)\n            .from(relation.inverseRelation!.entityMetadata.target, relation.propertyName);\n\n        relation.inverseRelation!.joinColumns.forEach(joinColumn => {\n            qb.andWhere(`${relation.propertyName}.${joinColumn.propertyName} = :${joinColumn.referencedColumn!.propertyName}`)\n                .setParameter(`${joinColumn.referencedColumn!.propertyName}`, joinColumn.referencedColumn!.getEntityValue(entity));\n        });\n        return relation.isOneToMany ? qb.getMany() : qb.getOne();\n    }\n\n    /**\n     * Loads data for many-to-many owner relations.\n     *\n     * SELECT category\n     * FROM category category\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = :postId\n     * AND post_categories.categoryId = category.id\n     */\n    protected loadManyToManyOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        const mainAlias = relation.propertyName;\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\n        const joinColumnConditions = relation.joinColumns.map(joinColumn => {\n            return `${joinAlias}.${joinColumn.propertyName} = :${joinColumn.propertyName}`;\n        });\n        const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName}=${mainAlias}.${inverseJoinColumn.referencedColumn!.propertyName}`;\n        });\n        const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(entity);\n            return parameters;\n        }, {} as ObjectLiteral);\n\n        return this.connection\n            .createQueryBuilder()\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    }\n\n    /**\n     * Loads data for many-to-many not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = post.id\n     * AND post_categories.categoryId = post_categories.categoryId\n     */\n    protected loadManyToManyNotOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        const mainAlias = relation.propertyName;\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\n        const joinColumnConditions = relation.inverseRelation!.joinColumns.map(joinColumn => {\n            return `${joinAlias}.${joinColumn.propertyName} = ${mainAlias}.${joinColumn.referencedColumn!.propertyName}`;\n        });\n        const inverseJoinColumnConditions = relation.inverseRelation!.inverseJoinColumns.map(inverseJoinColumn => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName} = :${inverseJoinColumn.propertyName}`;\n        });\n        const parameters = relation.inverseRelation!.inverseJoinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(entity);\n            return parameters;\n        }, {} as ObjectLiteral);\n\n        return this.connection\n            .createQueryBuilder()\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    }\n\n}","import {TableType} from \"../metadata/types/TableTypes\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\n\n/**\n * Arguments for TableMetadata class, helps to construct an TableMetadata object.\n */\nexport interface TableMetadataArgs {\n\n    /**\n     * Class to which table is applied.\n     * Function target is a table defined in the class.\n     * String target is a table defined in a json schema.\n     */\n    target: Function|string;\n\n    /**\n     * Table's name. If name is not set then table's name will be generated from target's name.\n     */\n    name?: string;\n\n    /**\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\n     */\n    type: TableType;\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     */\n    engine?: string;\n\n    /**\n     * Whether table must be synced during schema build or not\n     */\n    skipSync?: boolean;\n\n}\n","import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {IndexMetadata} from \"./IndexMetadata\";\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\nimport {TableType} from \"./types/TableTypes\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityListenerMetadata} from \"./EntityListenerMetadata\";\nimport {PropertyTypeFactory} from \"./types/PropertyTypeInFunction\";\nimport {Repository} from \"../repository/Repository\";\n\n/**\n * Contains all entity metadata.\n */\nexport class EntityMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Repository used for this entity metadata.\n     */\n    repository: Repository<any>;\n\n    /**\n     * Used to wrap lazy relations.\n     */\n    lazyRelationsWrapper: LazyRelationsWrapper;\n\n    /**\n     * If entity's table is a closure-typed table, then this entity will have a closure junction table metadata.\n     */\n    closureJunctionTable: EntityMetadata;\n\n    /**\n     * If this is entity metadata for a junction closure table then its owner closure table metadata will be set here.\n     */\n    parentClosureEntityMetadata: EntityMetadata;\n\n    /**\n     * Parent's entity metadata. Used in inheritance patterns.\n     */\n    parentEntityMetadata: EntityMetadata;\n\n    /**\n     * Children entity metadatas. Used in inheritance patterns.\n     */\n    childEntityMetadatas: EntityMetadata[] = [];\n\n    /**\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\n     */\n    tableType: TableType = \"regular\";\n\n    /**\n     * Target class to which this entity metadata is bind.\n     * Note, that when using table inheritance patterns target can be different rather then table's target.\n     * For virtual tables which lack of real entity (like junction tables) target is equal to their table name.\n     */\n    target: Function|string;\n\n    /**\n     * Indicates if this entity metadata of a junction table, or not.\n     * Junction table is a table created by many-to-many relationship.\n     *\n     * Its also possible to understand if entity is junction via tableType.\n     */\n    isJunction: boolean = false;\n\n    /**\n     * Entity's name.\n     * Equal to entity target class's name if target is set to table.\n     * If target class is not then then it equals to table name.\n     */\n    name: string;\n\n    /**\n     * Gets the name of the target.\n     */\n    targetName: string;\n\n    /**\n     * Original user-given table name (taken from schema or @Entity(tableName) decorator).\n     * If user haven't specified a table name this property will be undefined.\n     */\n    givenTableName?: string;\n\n    /**\n     * Entity table name in the database.\n     * This is final table name of the entity.\n     * This name already passed naming strategy, and generated based on\n     * multiple criteria, including user table name and global table prefix.\n     */\n    tableName: string;\n\n    /**\n     * Gets the table name without global table prefix.\n     * When querying table you need a table name with prefix, but in some scenarios,\n     * for example when you want to name a junction table that contains names of two other tables,\n     * you may want a table name without prefix.\n     */\n    tableNameWithoutPrefix: string;\n\n    /**\n     * Indicates if schema sync is skipped for this entity.\n     */\n    skipSync: boolean;\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     */\n    engine?: string;\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    orderBy?: OrderByCondition;\n\n    /**\n     * Entity's column metadatas defined by user.\n     */\n    ownColumns: ColumnMetadata[] = [];\n\n    /**\n     * Entity's relation metadatas.\n     */\n    ownRelations: RelationMetadata[] = [];\n\n    /**\n     * Relations of the entity, including relations that are coming from the embeddeds of this entity.\n     */\n    relations: RelationMetadata[] = [];\n\n    /**\n     * Columns of the entity, including columns that are coming from the embeddeds of this entity.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Entity's relation id metadatas.\n     */\n    relationIds: RelationIdMetadata[] = [];\n\n    /**\n     * Entity's relation id metadatas.\n     */\n    relationCounts: RelationCountMetadata[] = [];\n\n    /**\n     * Entity's index metadatas.\n     */\n    indices: IndexMetadata[] = [];\n\n    /**\n     * Entity's foreign key metadatas.\n     */\n    foreignKeys: ForeignKeyMetadata[] = [];\n\n    /**\n     * Entity's embedded metadatas.\n     */\n    embeddeds: EmbeddedMetadata[] = [];\n\n    /**\n     * Entity listener metadatas.\n     */\n    listeners: EntityListenerMetadata[] = [];\n\n    /**\n     * If this entity metadata's table using one of the inheritance patterns,\n     * then this will contain what pattern it uses.\n     */\n    inheritanceType?: \"single-table\"|\"class-table\";\n\n    /**\n     * If this entity metadata is a child table of some table, it should have a discriminator value.\n     * Used to store a value in a discriminator column.\n     */\n    discriminatorValue?: string;\n\n    /**\n     * Checks if entity's table has multiple primary columns.\n     */\n    hasMultiplePrimaryKeys: boolean;\n\n    /**\n     * Gets the column with generated flag.\n     */\n    generatedColumn?: ColumnMetadata;\n\n    /**\n     * Gets the object id column used with mongodb database.\n     */\n    objectIdColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains a create date value.\n     */\n    createDateColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains an update date value.\n     */\n    updateDateColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains an entity version.\n     */\n    versionColumn?: ColumnMetadata;\n\n    /**\n     * Gets the discriminator column used to store entity identificator in single-table inheritance tables.\n     */\n    discriminatorColumn?: ColumnMetadata;\n\n    /**\n     * Special column that stores tree level in tree entities.\n     */\n    treeLevelColumn?: ColumnMetadata;\n\n    /**\n     * Gets the primary columns.\n     */\n    primaryColumns: ColumnMetadata[] = [];\n\n    /**\n     * Id columns in the parent table (used in table inheritance).\n     */\n    parentIdColumns: ColumnMetadata[] = [];\n\n    /**\n     * Gets only one-to-one relations of the entity.\n     */\n    oneToOneRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only owner one-to-one relations of the entity.\n     */\n    ownerOneToOneRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only one-to-many relations of the entity.\n     */\n    oneToManyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only many-to-one relations of the entity.\n     */\n    manyToOneRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only many-to-many relations of the entity.\n     */\n    manyToManyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only owner many-to-many relations of the entity.\n     */\n    ownerManyToManyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only owner one-to-one and many-to-one relations.\n     */\n    relationsWithJoinColumns: RelationMetadata[] = [];\n\n    /**\n     * Tree parent relation. Used only in tree-tables.\n     */\n    treeParentRelation?: RelationMetadata;\n\n    /**\n     * Tree children relation. Used only in tree-tables.\n     */\n    treeChildrenRelation?: RelationMetadata;\n\n    /**\n     * Checks if there any non-nullable column exist in this entity.\n     */\n    hasNonNullableRelations: boolean;\n\n    /**\n     * Checks if this table is regular.\n     * All non-specific tables are just regular tables. Its a default table type.\n     */\n    isRegular: boolean;\n\n    /**\n     * Checks if this table is abstract.\n     * This type is for the tables that does not exist in the database,\n     * but provide columns and relations for the tables of the child classes who inherit them.\n     */\n    isAbstract: boolean;\n\n    /**\n     * Checks if this table is a closure table.\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\n     */\n    isClosure: boolean;\n\n    /**\n     * Checks if this table is a junction table of the closure table.\n     * This type is for tables that contain junction metadata of the closure tables.\n     */\n    isClosureJunction: boolean;\n\n    /**\n     * Checks if this table is an embeddable table.\n     * Embeddable tables are not stored in the database as separate tables.\n     * Instead their columns are embed into tables who owns them.\n     */\n    isEmbeddable: boolean;\n\n    /**\n     * Checks if this table is a single table child.\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\n     */\n    isSingleTableChild: boolean;\n\n    /**\n     * Checks if this table is a class table child.\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\n     */\n    isClassTableChild: boolean;\n\n    /**\n     * Map of columns and relations of the entity.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    propertiesMap: ObjectLiteral;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        connection: Connection,\n        parentClosureEntityMetadata?: EntityMetadata,\n        args: TableMetadataArgs\n    }) {\n        const namingStrategy = options.connection.namingStrategy;\n        const tablesPrefix = options.connection.options.tablesPrefix;\n        this.lazyRelationsWrapper = new LazyRelationsWrapper(options.connection);\n        this.parentClosureEntityMetadata = options.parentClosureEntityMetadata!;\n        this.target = options.args.target;\n        this.tableType = options.args.type;\n        this.engine = options.args.engine;\n        this.givenTableName = options.args.name;\n        this.skipSync = options.args.skipSync || false;\n        this.targetName = options.args.target instanceof Function ? (options.args.target as any).name : options.args.target;\n        this.tableNameWithoutPrefix = this.tableType === \"closure-junction\" ? namingStrategy.closureJunctionTableName(this.givenTableName!) : namingStrategy.tableName(this.targetName, this.givenTableName);\n        this.tableName = tablesPrefix ? namingStrategy.prefixTableName(tablesPrefix, this.tableNameWithoutPrefix) : this.tableNameWithoutPrefix;\n        this.target = this.target ? this.target : this.tableName;\n        this.name = this.targetName ? this.targetName : this.tableName;\n\n        this.isClassTableChild = this.tableType === \"class-table-child\";\n        this.isSingleTableChild = this.tableType === \"single-table-child\";\n        this.isEmbeddable = this.tableType === \"embeddable\";\n        this.isJunction = this.tableType === \"closure-junction\" || this.tableType === \"junction\";\n        this.isClosureJunction = this.tableType === \"closure-junction\";\n        this.isClosure = this.tableType === \"closure\";\n        this.isAbstract = this.tableType === \"abstract\";\n        this.isRegular = this.tableType === \"regular\";\n        this.orderBy = (options.args.orderBy instanceof Function) ? options.args.orderBy(this.propertiesMap) : options.args.orderBy;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new entity.\n     */\n    create(): any {\n\n        // if target is set to a function (e.g. class) that can be created then create it\n        if (this.target instanceof Function)\n            return new (<any> this.target)();\n\n        // otherwise simply return a new empty object\n        const newObject = {};\n        this.relations\n            .filter(relation => relation.isLazy)\n            .forEach(relation => this.lazyRelationsWrapper.wrap(newObject, relation));\n\n        return newObject;\n    }\n\n    /**\n     * Checks if given entity has an id.\n     */\n    hasId(entity: ObjectLiteral): boolean {\n        if (!entity)\n            return false;\n\n        return this.primaryColumns.every(primaryColumn => { /// todo: this.metadata.parentEntityMetadata ?\n            const value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined && value !== \"\";\n        });\n    }\n\n    /**\n     * Compares ids of the two entities.\n     * Returns true if they match, false otherwise.\n     */\n    compareIds(firstId: ObjectLiteral|undefined, secondId: ObjectLiteral|undefined): boolean {\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\n            return false;\n\n        return OrmUtils.deepCompare(firstId, secondId);\n    }\n\n    /**\n     * Compares two different entity instances by their ids.\n     * Returns true if they match, false otherwise.\n     */\n    compareEntities(firstEntity: ObjectLiteral, secondEntity: ObjectLiteral): boolean {\n\n        // if any entity ids are empty then they aren't equal\n        const isFirstEntityEmpty = this.isEntityMapEmpty(firstEntity);\n        const isSecondEntityEmpty = this.isEntityMapEmpty(secondEntity);\n        if (isFirstEntityEmpty || isSecondEntityEmpty)\n            return false;\n\n        const firstEntityIds = this.getEntityIdMap(firstEntity);\n        const secondEntityIds = this.getEntityIdMap(secondEntity);\n        return this.compareIds(firstEntityIds, secondEntityIds);\n    }\n\n    /**\n     * Finds column with a given property name.\n     */\n    findColumnWithPropertyName(propertyName: string) {\n        return this.columns.find(column => column.propertyName === propertyName);\n    }\n\n    /**\n     * Finds relation with the given name.\n     */\n    findRelationWithDbName(dbName: string): RelationMetadata|undefined {\n        return this.relationsWithJoinColumns.find(relation => {\n            return !!relation.joinColumns.find(column => column.databaseName === dbName);\n        });\n    }\n\n    /**\n     * Finds relation with the given property path.\n     */\n    findRelationWithPropertyPath(propertyPath: string): RelationMetadata|undefined {\n        return this.relations.find(relation => relation.propertyPath === propertyPath);\n    }\n\n    /**\n     * Computes property name of the entity using given PropertyTypeInFunction.\n     */\n    computePropertyPath(nameOrFn: PropertyTypeFactory<any>) {\n        return typeof nameOrFn === \"string\" ? nameOrFn : nameOrFn(this.propertiesMap);\n    }\n\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createEntityIdMap(ids: any[]) {\n        const primaryColumns = this.parentEntityMetadata ? this.primaryColumns : this.primaryColumns;\n        return primaryColumns.reduce((map, column, index) => Object.assign(map, column.createValueMap(ids[index])), {});\n    }\n\n    /**\n     * Checks each id in the given entity id map if they all aren't empty.\n     * If they all aren't empty it returns true.\n     * If at least one id in the given map is empty it returns false.\n     */\n    isEntityMapEmpty(entity: ObjectLiteral): boolean {\n        const primaryColumns = this.parentEntityMetadata ? this.primaryColumns : this.primaryColumns;\n        return !primaryColumns.every(column => {\n            const value = column.getEntityValue(entity);\n            return value !== null && value !== undefined;\n        });\n    }\n\n    /**\n     * Gets primary keys of the entity and returns them in a literal object.\n     * For example, for Post{ id: 1, title: \"hello\" } where id is primary it will return { id: 1 }\n     * For multiple primary keys it returns multiple keys in object.\n     * For primary keys inside embeds it returns complex object literal with keys in them.\n     */\n    getEntityIdMap(entity: ObjectLiteral|undefined): ObjectLiteral|undefined {\n        if (!entity) // todo: shall it accept an empty entity? try to remove this\n            return undefined;\n\n        const primaryColumns = this.parentEntityMetadata ? this.primaryColumns : this.primaryColumns;\n        const map = primaryColumns.reduce((map, column) => {\n            if (column.isObjectId)\n                return Object.assign(map, column.getEntityValueMap(entity));\n\n            return OrmUtils.mergeDeep(map, column.getEntityValueMap(entity));\n        }, {});\n        return Object.keys(map).length > 0 ? map : undefined;\n    }\n\n    /**\n     * Same as getEntityIdMap, but instead of id column property names it returns database column names.\n     */\n    getDatabaseEntityIdMap(entity: ObjectLiteral): ObjectLiteral|undefined {\n        const map: ObjectLiteral = {};\n        const primaryColumns = this.parentEntityMetadata ? this.primaryColumns : this.primaryColumns;\n        primaryColumns.forEach(column => {\n            const entityValue = column.getEntityValue(entity);\n            if (entityValue === null || entityValue === undefined)\n                return;\n\n            map[column.databaseName] = entityValue;\n        });\n        const hasAllIds = Object.keys(map).every(key => {\n            return map[key] !== undefined && map[key] !== null;\n        });\n        return hasAllIds ? map : undefined;\n    }\n\n    /**\n     * Creates a \"mixed id map\".\n     * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.\n     * But if entity has a single primary key then it will return just value of the id column of the entity, just value.\n     * This is called mixed id map.\n     */\n    getEntityIdMixedMap(entity: ObjectLiteral|undefined): ObjectLiteral|undefined {\n        if (!entity) // todo: undefined entities should not go there??\n            return undefined;\n\n        const idMap = this.getEntityIdMap(entity);\n        if (this.hasMultiplePrimaryKeys) {\n            return idMap;\n        } else if (idMap) {\n            return idMap[this.primaryColumns[0].propertyName]; // todo: what about parent primary column?\n        }\n\n        return idMap;\n    }\n\n    /**\n     * Checks if given object contains ALL primary keys entity must have.\n     * Returns true if it contains all of them, false if at least one of them is not defined.\n     */\n    checkIfObjectContainsAllPrimaryKeys(object: ObjectLiteral) {\n        return this.primaryColumns.every(primaryColumn => {\n            return object.hasOwnProperty(primaryColumn.propertyName);\n        });\n    }\n\n    /**\n     * Iterates throw entity and finds and extracts all values from relations in the entity.\n     * If relation value is an array its being flattened.\n     */\n    extractRelationValuesFromEntity(entity: ObjectLiteral, relations: RelationMetadata[]): [RelationMetadata, any, EntityMetadata][] {\n        const relationsAndValues: [RelationMetadata, any, EntityMetadata][] = [];\n        relations.forEach(relation => {\n            const value = relation.getEntityValue(entity);\n            if (value instanceof Array) {\n                value.forEach(subValue => relationsAndValues.push([relation, subValue, relation.inverseEntityMetadata]));\n            } else if (value) {\n                relationsAndValues.push([relation, value, relation.inverseEntityMetadata]);\n            }\n        });\n        return relationsAndValues;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Registers a new column in the entity and recomputes all depend properties.\n     */\n    registerColumn(column: ColumnMetadata) {\n        this.ownColumns.push(column);\n        this.columns = this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), this.ownColumns);\n        this.parentIdColumns = this.columns.filter(column => column.isParentId);\n        this.primaryColumns = this.columns.filter(column => column.isPrimary);\n        this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;\n        this.propertiesMap = this.createPropertiesMap();\n    }\n\n    /**\n     * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)\n     * in a special format - { propertyName: propertyName }.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    createPropertiesMap(): { [name: string]: string|any } {\n        const map: { [name: string]: string|any } = {};\n        this.columns.forEach(column => OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)));\n        this.relations.forEach(relation => OrmUtils.mergeDeep(map, relation.createValueMap(relation.propertyPath)));\n        return map;\n    }\n}","import {ColumnType} from \"../../driver/types/ColumnTypes\";\n\n/**\n * Describes all column's options.\n */\nexport interface ColumnOptions {\n\n    /**\n     * Column type. Must be one of the value from the ColumnTypes class.\n     */\n    type?: ColumnType;\n\n    /**\n     * Column name in the database.\n     */\n    name?: string;\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length?: string|number;\n\n    /**\n     * Indicates if this column is a primary key.\n     * Same can be achieved when @PrimaryColumn decorator is used.\n     */\n    primary?: boolean;\n\n    /**\n     * Specifies if this column will use auto increment (sequence, generated identity).\n     * Note that only one column in entity can be marked as generated, and it must be a primary column.\n     * (todo: create validation logic for this condition)\n     */\n    generated?: boolean; // |\"uuid\"|\"sequence\";\n\n    /**\n     * Specifies if column's value must be unique or not.\n     */\n    unique?: boolean;\n\n    /**\n     * Indicates if column's value can be set to NULL.\n     */\n    nullable?: boolean;\n\n    /**\n     * Column comment. Not supported by all database types.\n     */\n    comment?: string;\n\n    /**\n     * Default database value.\n     */\n    default?: any;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: any[];\n\n    /**\n     * Indicates if this column is an array.\n     * Can be simply set to true or array length can be specified.\n     * Supported only by postgres.\n     */\n    array?: boolean|string;\n\n}\n","/**\n * Kinda type of the column. Not a type in the database, but locally used type to determine what kind of column\n * we are working with.\n * For example, \"primary\" means that it will be a primary column, or \"createDate\" means that it will create a create\n * date column.\n */\nexport type ColumnMode = \"regular\"|\"virtual\"|\"createDate\"|\"updateDate\"|\"version\"|\"treeChildrenCount\"|\"treeLevel\"|\"discriminator\"|\"parentId\"|\"objectId\"|\"array\";\n","import {ColumnOptions} from \"../decorator/options/ColumnOptions\";\nimport {ColumnMode} from \"./types/ColumnMode\";\n\n/**\n * Arguments for ColumnMetadata class.\n */\nexport interface ColumnMetadataArgs {\n\n    /**\n     * Class to which column is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Class's property name to which column is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Class's property type (reflected) to which column is applied.\n     *\n     * todo: check when this is not set, because for the entity schemas we don't set it.\n     */\n    // readonly propertyType?: string;\n\n    /**\n     * Column mode in which column will work.\n     *\n     * todo: find name better then \"mode\".\n     */\n    readonly mode: ColumnMode;\n\n    /**\n     * Extra column options.\n     */\n    readonly options: ColumnOptions;\n\n}\n","import {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * This metadata contains all information about entity's column.\n */\nexport class ColumnMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     *\n     * For example for @Column() name: string in Post, entityMetadata will be metadata of Post entity.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata where this column metadata is.\n     * If this column is not in embed then this property value is undefined.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * If column is a foreign key of some relation then this relation's metadata will be there.\n     * If this column does not have a foreign key then this property value is undefined.\n     */\n    relationMetadata?: RelationMetadata;\n\n    /**\n     * Class's property name on which this column is applied.\n     */\n    propertyName: string;\n\n    /**\n     * The database type of the column.\n     */\n    type: ColumnType;\n\n    /**\n     * Type's length in the database.\n     */\n    length: string = \"\";\n\n    /**\n     * Indicates if this column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if this column is generated (auto increment or generated other way).\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Indicates if column value in the database should be unique or not.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * Indicates if column can contain nulls or not.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Column comment.\n     * This feature is not supported by all databases.\n     */\n    comment: string = \"\";\n\n    /**\n     * Default database value.\n     */\n    default?: any;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column),\n     * which is the maximum number of digits that are stored for the values.\n     */\n    precision?: number;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column),\n     * which represents the number of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: any[];\n\n    /**\n     * Indicates if this column is an array.\n     * Can be simply set to true or array length can be specified.\n     * Supported only by postgres.\n     */\n    array?: boolean|string;\n\n    /**\n     * Gets full path to this column property (including column property name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just property name of the column.\n     */\n    propertyPath: string;\n\n    /**\n     * Complete column name in the database including its embedded prefixes.\n     */\n    databaseName: string;\n\n    /**\n     * Database name in the database without embedded prefixes applied.\n     */\n    databaseNameWithoutPrefixes: string;\n\n    /**\n     * Database name set by entity metadata builder, not yet passed naming strategy process and without embedded prefixes.\n     */\n    givenDatabaseName?: string;\n\n    /**\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n     */\n    isVirtual: boolean = false;\n\n    /**\n     * Indicates if column is a parent id. Parent id columns are not mapped to the entity.\n     */\n    isParentId: boolean = false;\n\n    /**\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n     */\n    isDiscriminator: boolean = false;\n\n    /**\n     * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\n     */\n    isTreeLevel: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity creation date.\n     */\n    isCreateDate: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity update date.\n     */\n    isUpdateDate: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity version.\n     */\n    isVersion: boolean = false;\n\n    /**\n     * Indicates if this column contains an object id.\n     */\n    isObjectId: boolean = false;\n\n    /**\n     * If this column is foreign key then it references some other column,\n     * and this property will contain reference to this column.\n     */\n    referencedColumn: ColumnMetadata|undefined;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        connection: Connection,\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        referencedColumn?: ColumnMetadata,\n        args: ColumnMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata!;\n        this.referencedColumn = options.referencedColumn;\n        if (options.args.propertyName)\n            this.propertyName = options.args.propertyName;\n        if (options.args.options.name)\n            this.givenDatabaseName = options.args.options.name;\n        if (options.args.options.type)\n            this.type = options.args.options.type;\n        if (options.args.options.length)\n            this.length = String(options.args.options.length);\n        if (options.args.options.primary)\n            this.isPrimary = options.args.options.primary;\n        if (options.args.options.generated)\n            this.isGenerated = options.args.options.generated;\n        if (options.args.options.unique)\n            this.isUnique = options.args.options.unique;\n        if (options.args.options.default === null) // to make sure default: null is the same as nullable: true\n            this.isNullable = true;\n        if (options.args.options.nullable)\n            this.isNullable = options.args.options.nullable;\n        if (options.args.options.comment)\n            this.comment = options.args.options.comment;\n        if (options.args.options.default !== undefined)\n            this.default = options.args.options.default;\n        if (options.args.options.scale)\n            this.scale = options.args.options.scale;\n        if (options.args.options.precision)\n            this.precision = options.args.options.precision;\n        if (options.args.options.enum)\n            this.enum = options.args.options.enum;\n        if (options.args.options.array)\n            this.array = options.args.options.array;\n        if (options.args.mode) {\n            this.isVirtual = options.args.mode === \"virtual\";\n            this.isParentId = options.args.mode === \"parentId\";\n            this.isDiscriminator = options.args.mode === \"discriminator\";\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\n            this.isCreateDate = options.args.mode === \"createDate\";\n            this.isUpdateDate = options.args.mode === \"updateDate\";\n            this.isVersion = options.args.mode === \"version\";\n            this.isObjectId = options.args.mode === \"objectId\";\n        }\n        if (this.isTreeLevel)\n            this.type = options.connection.driver.mappedDataTypes.treeLevel;\n        if (this.isCreateDate) {\n            this.type = options.connection.driver.mappedDataTypes.createDate;\n            if (!this.default)\n                this.default = () => options.connection.driver.mappedDataTypes.createDateDefault;\n        }\n        if (this.isUpdateDate) {\n            this.type = options.connection.driver.mappedDataTypes.updateDate;\n            if (!this.default)\n                this.default = () => options.connection.driver.mappedDataTypes.updateDateDefault;\n        }\n        if (this.isVersion)\n            this.type = options.connection.driver.mappedDataTypes.version;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value: any) {\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue(propertyNames, {});\n\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\n            return { [this.propertyName]: value };\n        }\n    }\n\n    /**\n     * Extracts column value and returns its column name with this value in a literal object.\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\n     *\n     * Examples what this method can return depend if this column is in embeds.\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\n     */\n    getEntityValueMap(entity: ObjectLiteral): ObjectLiteral {\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral, map: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue(propertyNames, value ? value[propertyName] : undefined, map[propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value ? value[this.propertyName] : undefined;\n                return map;\n            };\n            return extractEmbeddedColumnValue(propertyNames, entity, {});\n\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\n            return { [this.propertyName]: entity[this.propertyName] };\n        }\n    }\n\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(entity: ObjectLiteral): any|undefined {\n        // if (entity === undefined || entity === null) return undefined; // uncomment if needed\n\n        // extract column value from embeddeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                return propertyName ? extractEmbeddedColumnValue(propertyNames, value[propertyName]) : value;\n            };\n\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\n            if (embeddedObject) {\n                if (this.relationMetadata && this.referencedColumn && this.isVirtual) {\n                    const relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\n                    return relatedEntity ? this.referencedColumn.getEntityValue(relatedEntity) : undefined;\n                } else {\n                    return embeddedObject[this.propertyName];\n                }\n            }\n            return undefined;\n            // return embeddedObject ? embeddedObject[this.propertyName] : undefined;\n\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.relationMetadata && this.referencedColumn && this.isVirtual) {\n                const relatedEntity = this.relationMetadata.getEntityValue(entity);\n                return relatedEntity ? this.referencedColumn.getEntityValue(relatedEntity) : undefined;\n            } else {\n                return entity[this.propertyName];\n            }\n            // return entity[this.propertyName];\n        }\n    }\n\n    /**\n     * Sets given entity's column value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     */\n    setEntityValue(entity: ObjectLiteral, value: any): void {\n        if (this.embeddedMetadata) {\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                const embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\n\n        } else {\n            entity[this.propertyName] = value;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    build(namingStrategy: NamingStrategyInterface): this {\n        this.propertyPath = this.buildPropertyPath();\n        this.databaseName = this.buildDatabaseName(namingStrategy);\n        this.databaseNameWithoutPrefixes = namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\n        return this;\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    protected buildPropertyPath(): string {\n        let path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n\n        if (this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)\n            path += this.referencedColumn.propertyName + \".\";\n\n        return path + this.propertyName;\n    }\n\n    protected buildDatabaseName(namingStrategy: NamingStrategyInterface): string {\n        const propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPropertyNames : [];\n        return namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\n    }\n\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\n\n/**\n * Table's column's schema in the database represented in this class.\n */\nexport class ColumnSchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string;\n\n    /**\n     * Column type.\n     */\n    type: string;\n\n    /**\n     * Column's default value.\n     */\n    default: any;\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * Column's comment.\n     */\n    comment: string|undefined;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision: number|undefined;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale: number|undefined;\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: any[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: {\n        name?: string,\n        type?: string,\n        default?: any,\n        isNullable?: boolean,\n        isGenerated?: boolean,\n        isPrimary?: boolean,\n        isUnique?: boolean,\n        comment?: string,\n        enum?: any[]\n    }) {\n        if (options) {\n            this.name = options.name || \"\";\n            this.type = options.type || \"\";\n            this.default = options.default;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.comment = options.comment;\n            this.enum = options.enum;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this column schema to a new column schema with exact same properties as this column schema has.\n     */\n    clone(): ColumnSchema {\n        const newColumnSchema = new ColumnSchema();\n        newColumnSchema.name = this.name;\n        newColumnSchema.type = this.type;\n        newColumnSchema.default = this.default;\n        newColumnSchema.isNullable = this.isNullable;\n        newColumnSchema.isGenerated = this.isGenerated;\n        newColumnSchema.isPrimary = this.isPrimary;\n        newColumnSchema.isUnique = this.isUnique;\n        newColumnSchema.comment = this.comment;\n        return newColumnSchema;\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new column based on the given column metadata.\n     */\n    static create(columnMetadata: ColumnMetadata, normalizedType: string, normalizedDefault: string): ColumnSchema {\n        const columnSchema = new ColumnSchema();\n        columnSchema.name = columnMetadata.databaseName;\n        columnSchema.default = normalizedDefault;\n        columnSchema.comment = columnMetadata.comment;\n        columnSchema.isGenerated = columnMetadata.isGenerated;\n        columnSchema.isNullable = columnMetadata.isNullable;\n        columnSchema.type = normalizedType;\n        columnSchema.isPrimary = columnMetadata.isPrimary;\n        columnSchema.isUnique = columnMetadata.isUnique;\n        columnSchema.enum = columnMetadata.enum;\n        return columnSchema;\n    }\n\n}","import {ColumnSchema} from \"../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../schema-builder/schema/ForeignKeySchema\";\nimport {IndexSchema} from \"../schema-builder/schema/IndexSchema\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {ReadStream} from \"fs\";\n\n/**\n * Runs queries on a single database connection.\n *\n * todo: extract schema build operations out of query runner.\n */\nexport interface QueryRunner {\n\n    /**\n     * Connection used by this query runner.\n     */\n    readonly connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    readonly isReleased: boolean;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    readonly isTransactionActive: boolean;\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Releases used database connection.\n     * You cannot use this query runner methods after connection is released.\n     */\n    release(): Promise<void>;\n\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful with using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    clearDatabase(): Promise<void>;\n\n    /**\n     * Starts transaction.\n     */\n    startTransaction(): Promise<void>;\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    commitTransaction(): Promise<void>;\n\n    /**\n     * Ends transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    rollbackTransaction(): Promise<void>;\n\n    /**\n     * Executes a given SQL query and returns raw database results.\n     */\n    query(query: string, parameters?: any[]): Promise<any>;\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream>; // todo: ReadStream gonna bring problems in websql driver\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    insert(tableName: string, valuesMap: Object, generatedColumn?: ColumnMetadata): Promise<any>;\n\n    /**\n     * Updates rows that match given simple conditions in the given table.\n     */\n    update(tableName: string, valuesMap: Object, conditions: Object): Promise<void>;\n\n    /**\n     * Performs a simple DELETE query by a given conditions in a given table.\n     */\n    delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Performs a simple DELETE query by a given conditions in a given table.\n     */\n    delete(tableName: string, conditions: Object): Promise<void>;\n\n    /**\n     * Inserts new values into closure table.\n     */\n    insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number>;\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    loadTableSchema(tableName: string): Promise<TableSchema|undefined>;\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    loadTableSchemas(tableNames: string[]): Promise<TableSchema[]>;\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    hasTable(tableName: string): Promise<boolean>;\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    createTable(table: TableSchema): Promise<void>;\n\n    /**\n     * Drops the table.\n     */\n    dropTable(tableName: string): Promise<void>;\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    hasColumn(tableName: string, columnName: string): Promise<boolean>;\n\n    /**\n     * Adds a new column in the table.\n     */\n    addColumn(tableName: string, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Adds a new column in the table.\n     */\n    addColumn(table: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Adds new columns in the table.\n     */\n    addColumns(tableSchema: string, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Adds new columns in the table.\n     */\n    addColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(table: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a columns in the table.\n     */\n    changeColumns(table: TableSchema, changedColumns: { oldColumn: ColumnSchema, newColumn: ColumnSchema }[]): Promise<void>;\n\n    /**\n     * Drops the column in the table.\n     */\n    dropColumn(table: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Updates primary keys in the table.\n     */\n    updatePrimaryKeys(table: TableSchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    createForeignKeys(table: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKey(table: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKey(table: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKeys(table: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKeys(table: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new index.\n     */\n    createIndex(tableName: string, index: IndexSchema): Promise<void>;\n\n    /**\n     * Drops an index from the table.\n     */\n    dropIndex(table: TableSchema|string, index: IndexSchema|string): Promise<void>;\n\n    /**\n     * Truncates table.\n     *\n     * todo: probably this should be renamed to drop or clear?\n     */\n    truncate(tableName: string): Promise<void>;\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void;\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void;\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[];\n\n}","import {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ColumnType} from \"./types/ColumnTypes\";\nimport {MappedColumnTypes} from \"./types/MappedColumnTypes\";\nimport {SchemaBuilder} from \"../schema-builder/SchemaBuilder\";\n\n/**\n * Driver organizes TypeORM communication with specific database management system.\n */\nexport interface Driver {\n\n    /**\n     * Gets list of supported column data types by a driver.\n     */\n    supportedDataTypes: ColumnType[];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes;\n\n    /**\n     * Performs connection to the database.\n     * Depend on driver type it may create a connection pool.\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Closes connection with database and releases all resourc.\n     */\n    disconnect(): Promise<void>;\n\n    /**\n     * Synchronizes database schema (creates tables, indices, etc).\n     */\n    createSchemaBuilder(): SchemaBuilder;\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    createQueryRunner(): QueryRunner;\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]];\n\n    /**\n     * Escapes a table name, column name or an alias.\n     */\n    escape(tableName: string): string;\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, column: ColumnMetadata): any;\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type.\n     */\n    prepareHydratedValue(value: any, column: ColumnMetadata): any;\n\n    /**\n     * Transforms type of the given column to a database column type.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number, array?: string|boolean }): string;\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string;\n\n}","/**\n * Thrown when repository for the given class is not found.\n */\nexport class RepositoryNotFoundError extends Error {\n    name = \"RepositoryNotFoundError\";\n\n    constructor(connectionName: string, entityClass: Function|string) {\n        super();\n        const targetName = typeof entityClass === \"function\" && (<any> entityClass).name ? (<any> entityClass).name : entityClass;\n        this.message = `No repository for \"${targetName}\" was found. Looks like this entity is not registered in ` +\n            `current \"${connectionName}\" connection?`;\n        this.stack = new Error().stack;\n    }\n\n}","export class RandomGenerator {\n\n    /**\n     *  discuss at: http://locutus.io/php/sha1/\n     * original by: Webtoolkit.info (http://www.webtoolkit.info/)\n     * improved by: Michael White (http://getsprink.com)\n     * improved by: Kevin van Zonneveld (http://kvz.io)\n     *    input by: Brett Zamir (http://brett-zamir.me)\n     *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then\n     *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly\n     *      note 1: in a steaming fashion for faster and more efficient hashing\n     *   example 1: sha1('Kevin van Zonneveld')\n     *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'\n     */\n    static sha1(str: string) {\n\n        let _rotLeft = function(n: any, s: any) {\n            let t4 = (n << s) | (n >>> (32 - s));\n            return t4;\n        };\n\n        let _cvtHex = function(val: any) {\n            let str = \"\";\n            let i;\n            let v;\n\n            for (i = 7; i >= 0; i--) {\n                v = (val >>> (i * 4)) & 0x0f;\n                str += v.toString(16);\n            }\n            return str;\n        };\n\n        let blockstart;\n        let i, j;\n        let W = new Array(80);\n        let H0 = 0x67452301;\n        let H1 = 0xEFCDAB89;\n        let H2 = 0x98BADCFE;\n        let H3 = 0x10325476;\n        let H4 = 0xC3D2E1F0;\n        let A, B, C, D, E;\n        let temp;\n\n        // utf8_encode\n        str = /*unescape*/(encodeURIComponent(str));\n        let strLen = str.length;\n\n        let wordArray = [];\n        for (i = 0; i < strLen - 3; i += 4) {\n            j = str.charCodeAt(i) << 24 |\n                str.charCodeAt(i + 1) << 16 |\n                str.charCodeAt(i + 2) << 8 |\n                str.charCodeAt(i + 3);\n            wordArray.push(j);\n        }\n\n        switch (strLen % 4) {\n            case 0:\n                i = 0x080000000;\n                break;\n            case 1:\n                i = str.charCodeAt(strLen - 1) << 24 | 0x0800000;\n                break;\n            case 2:\n                i = str.charCodeAt(strLen - 2) << 24 | str.charCodeAt(strLen - 1) << 16 | 0x08000;\n                break;\n            case 3:\n                i = str.charCodeAt(strLen - 3) << 24 |\n                    str.charCodeAt(strLen - 2) << 16 |\n                    str.charCodeAt(strLen - 1) <<\n                    8 | 0x80;\n                break;\n        }\n\n        wordArray.push(i);\n\n        while ((wordArray.length % 16) !== 14) {\n            wordArray.push(0);\n        }\n\n        wordArray.push(strLen >>> 29);\n        wordArray.push((strLen << 3) & 0x0ffffffff);\n\n        for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {\n            for (i = 0; i < 16; i++) {\n                W[i] = wordArray[blockstart + i];\n            }\n            for (i = 16; i <= 79; i++) {\n                W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n            }\n\n            A = H0;\n            B = H1;\n            C = H2;\n            D = H3;\n            E = H4;\n\n            for (i = 0; i <= 19; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 20; i <= 39; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 40; i <= 59; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 60; i <= 79; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            H0 = (H0 + A) & 0x0ffffffff;\n            H1 = (H1 + B) & 0x0ffffffff;\n            H2 = (H2 + C) & 0x0ffffffff;\n            H3 = (H3 + D) & 0x0ffffffff;\n            H4 = (H4 + E) & 0x0ffffffff;\n        }\n\n        temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);\n        return temp.toLowerCase();\n    }\n\n}","/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str: string) {\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function(match, p1, p2, offset) {\n        if (p2) return p2.toUpperCase();\n        return p1.toLowerCase();\n    });\n}\n\n/**\n * Converts string into snake-case.\n *\n * @see http://stackoverflow.com/questions/30521224/javascript-convert-pascalcase-to-underscore-case\n */\nexport function snakeCase(str: string) {\n    return str.replace(/(?:^|\\.?)([A-Z])/g, (x, y) => \"_\" + y.toLowerCase()).replace(/^_/, \"\");\n}\n\n/**\n * Converts string into title-case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str: string) {\n    return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}","import {NamingStrategyInterface} from \"./NamingStrategyInterface\";\nimport {RandomGenerator} from \"../util/RandomGenerator\";\nimport {camelCase, snakeCase, titleCase} from \"../util/StringUtils\";\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName: string, userSpecifiedName: string|undefined): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\";\n    }\n\n    columnName(propertyName: string, customName: string, embeddedPrefixes: string[]): string { // todo: simplify\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + (customName ? titleCase(customName) : titleCase(propertyName));\n\n        return customName ? customName : propertyName;\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName;\n    }\n\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string {\n        if (customName)\n            return customName;\n\n        const key = \"ind_\" + tableName + \"_\" + columns.join(\"_\");\n        return \"ind_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName);\n    }\n\n    joinTableName(firstTableName: string,\n                  secondTableName: string,\n                  firstPropertyName: string,\n                  secondPropertyName: string): string {\n        return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\n    }\n\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string {\n        return columnName + \"_\" + index;\n    }\n\n    joinTableColumnName(tableName: string, propertyName: string, columnName?: string): string {\n        return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n    }\n\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string {\n        const key = `${tableName}_${columnNames.join(\"_\")}_${referencedTableName}_${referencedColumnNames.join(\"_\")}`;\n        return \"fk_\" + RandomGenerator.sha1(key).substr(0, 27); // todo: use crypto instead?\n    }\n\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string {\n        return camelCase(parentTableName + \"_\" + parentTableIdPropertyName);\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName;\n    }\n\n}\n","/**\n * Thrown when consumer tries to execute operation allowed only if connection is opened.\n */\nexport class CannotExecuteNotConnectedError extends Error {\n    name = \"CannotExecuteNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot execute operation on \"${connectionName}\" connection because connection is not yet established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to connect when he already connected.\n */\nexport class CannotConnectAlreadyConnectedError extends Error {\n    name = \"CannotConnectAlreadyConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot create a \"${connectionName}\" connection because connection to the database already established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when repository for the given class is not found.\n */\nexport class RepositoryNotTreeError extends Error {\n    name = \"RepositoryNotTreeError\";\n\n    constructor(entityClass: Function|string) {\n        super();\n        const targetName = typeof entityClass === \"function\" && (<any> entityClass).name ? (<any> entityClass).name : entityClass;\n        this.message = `Repository of the \"${targetName}\" class is not a TreeRepository. Try to use @ClosureTable decorator instead of @Table.`;\n        this.stack = new Error().stack;\n    }\n\n}","import {LoggerOptions} from \"./LoggerOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Performs logging of the events in TypeORM.\n *\n * todo: implement logging of too long running queries (there should be option to control max query execution time)\n */\nexport class Logger {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options: LoggerOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters: any[]|undefined, queryRunner?: QueryRunner) {\n        if (this.options.logQueries ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"log\", `executing query: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`, queryRunner);\n    }\n\n    /**\n     * Logs query that failed.\n     */\n    logFailedQuery(query: string, parameters: any[]|undefined, queryRunner?: QueryRunner) {\n        if (this.options.logQueries ||\n            this.options.logOnlyFailedQueries ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"error\", `query failed: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`, queryRunner);\n    }\n\n    /**\n     * Logs failed query's error.\n     */\n    logQueryError(error: any, queryRunner?: QueryRunner) {\n        if (this.options.logFailedQueryError ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"error\", \"error during executing query:\" + error, queryRunner);\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.options.logSchemaCreation ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"info\", message, queryRunner);\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level: \"log\"|\"info\"|\"warn\"|\"error\", message: any, queryRunner?: QueryRunner) {\n        if (!this.options) return;\n\n        if (this.options.logger) {\n            this.options.logger(level, message, queryRunner);\n\n        } else {\n            switch (level) {\n                case \"log\":\n                    console.log(message);\n                    break;\n                case \"info\":\n                    console.info(message);\n                    break;\n                case \"warn\":\n                    console.warn(message);\n                    break;\n                case \"error\":\n                    console.error(message);\n                    break;\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters);\n\n        } catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n\n}","/**\n */\nexport class EntityMetadataNotFound extends Error {\n    name = \"EntityMetadataNotFound\";\n\n    constructor(target: Function|string) {\n        super();\n        const targetName = typeof target === \"function\" && (<any> target).name ? (<any> target).name : target;\n        this.message = `No metadata for \"${targetName}\" was found.`;\n    }\n\n}","import {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Migrations should implement this interface and all its methods.\n */\nexport interface MigrationInterface {\n\n    /**\n     * Run the migrations.\n     */\n    up(queryRunner: QueryRunner): Promise<any>;\n\n    /**\n     * Reverse the migrations.\n     */\n    down(queryRunner: QueryRunner): Promise<any>;\n\n}","import {MigrationInterface} from \"./MigrationInterface\";\n\n/**\n * Represents entity of the migration in the database.\n */\nexport class Migration {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Timestamp of the migration.\n     */\n    timestamp: number;\n\n    /**\n     * Name of the migration (class name).\n     */\n    name: string;\n\n    /**\n     * Migration instance that needs to be run.\n     */\n    instance?: MigrationInterface;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(timestamp: number, name: string, instance?: MigrationInterface) {\n        this.timestamp = timestamp;\n        this.name = name;\n        this.instance = instance;\n    }\n\n}","import {TableSchema} from \"../schema-builder/schema/TableSchema\";\nimport {ColumnSchema} from \"../schema-builder/schema/ColumnSchema\";\nimport {Connection} from \"../connection/Connection\";\nimport {Migration} from \"./Migration\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nexport class MigrationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    protected queryRunner: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection, queryRunner?: QueryRunner) {\n        this.queryRunner = queryRunner || connection.createQueryRunner();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    async executePendingMigrations(): Promise<void> {\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist();\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations();\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find all migrations that needs to be executed\n        const pendingMigrations = allMigrations.filter(migration => {\n            // check if we already have executed migration\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\n            if (executedMigration)\n                return false;\n\n            // migration is new and not executed. now check if its timestamp is correct\n            if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n                throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n\n            // every check is passed means that migration was not run yet and we need to run it\n            return true;\n        });\n\n        // if no migrations are pending then nothing to do here\n        if (!pendingMigrations.length) {\n            this.connection.logger.log(\"info\", `No migrations are pending`);\n            return;\n        }\n\n        // log information about migration execution\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.log(\"info\", `${allMigrations.length} migrations were found in the source code.`);\n        if (lastTimeExecutedMigration)\n            this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\n        this.connection.logger.log(\"info\", `${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (!this.queryRunner.isTransactionActive) {\n            await this.queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        // run all pending migrations in a sequence\n        try {\n            await PromiseUtils.runInSequence(pendingMigrations, migration => {\n                return migration.instance!.up(this.queryRunner)\n                    .then(() => { // now when migration is executed we need to insert record about it into the database\n                        return this.insertExecutedMigration(migration);\n                    })\n                    .then(() => { // informative log about migration success\n                        this.connection.logger.log(\"info\", `Migration ${migration.name} has been executed successfully.`);\n                    });\n            });\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await this.queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await this.queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n        }\n\n    }\n\n    /**\n     * Reverts last migration that were run.\n     */\n    async undoLastMigration(): Promise<void> {\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist();\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations();\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\n\n        // if no migrations found in the database then nothing to revert\n        if (!lastTimeExecutedMigration) {\n            this.connection.logger.log(\"info\", `No migrations was found in the database. Nothing to revert!`);\n            return;\n        }\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find the instance of the migration we need to remove\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\n\n        // if no migrations found in the database then nothing to revert\n        if (!migrationToRevert)\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\n\n        // log information about migration execution\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\n        this.connection.logger.log(\"info\", `Now reverting it...`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (!this.queryRunner.isTransactionActive) {\n            await this.queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        try {\n            await migrationToRevert.instance!.down(this.queryRunner);\n            await this.deleteExecutedMigration(migrationToRevert);\n            this.connection.logger.log(\"info\", `Migration ${migrationToRevert.name} has been reverted successfully.`);\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await this.queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await this.queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    protected async createMigrationsTableIfNotExist(): Promise<void> {\n        const tableExist = await this.queryRunner.hasTable(\"migrations\"); // todo: table name should be configurable\n        if (!tableExist) {\n            await this.queryRunner.createTable(new TableSchema(\"migrations\", [\n                new ColumnSchema({\n                    name: \"timestamp\",\n                    type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }),\n                    isPrimary: true,\n                    isNullable: false\n                }),\n                new ColumnSchema({\n                    name: \"name\",\n                    type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }),\n                    isNullable: false\n                }),\n            ]));\n        }\n    }\n\n    /**\n     * Loads all migrations that were executed and saved into the database.\n     */\n    protected async loadExecutedMigrations(): Promise<Migration[]> {\n        const migrationsRaw: ObjectLiteral[] = await this.connection.manager\n            .createQueryBuilder(this.queryRunner)\n            .select()\n            .from(\"migrations\", \"migrations\")\n            .getRawMany();\n\n        return migrationsRaw.map(migrationRaw => {\n            return new Migration(parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n        });\n    }\n\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    protected getMigrations(): Migration[] {\n        const migrations = this.connection.migrations.map(migration => {\n            const migrationClassName = (migration.constructor as any).name;\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13));\n            if (!migrationTimestamp)\n                throw new Error(`Migration class name should contain a class name at the end of the file. ${migrationClassName} migration name is wrong.`);\n\n            return new Migration(migrationTimestamp, migrationClassName, migration);\n        });\n\n        // sort them by timestamp\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\n    }\n\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    protected getLatestMigration(migrations: Migration[]): Migration|undefined {\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    protected async insertExecutedMigration(migration: Migration): Promise<void> {\n        await this.queryRunner.insert(\"migrations\", {\n            timestamp: migration.timestamp,\n            name: migration.name,\n        });\n    }\n\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    protected async deleteExecutedMigration(migration: Migration): Promise<void> {\n        await this.queryRunner.delete(\"migrations\", {\n            timestamp: migration.timestamp,\n            name: migration.name,\n        });\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\n\n/**\n */\nexport class MissingPrimaryColumnError extends Error {\n    name = \"MissingPrimaryColumnError\";\n\n    constructor(entityMetadata: EntityMetadata) {\n        super();\n        this.message = `Entity \"${entityMetadata.name}\" does not have a primary column. Primary column is required to ` +\n            `have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.`;\n    }\n\n}","/**\n * Thrown when circular relations detected with nullable set to false.\n */\nexport class CircularRelationsError extends Error {\n    name = \"CircularRelationsError\";\n\n    constructor(path: string) {\n        super(`Circular relations detected: ${path}. To resolve this issue you need to set nullable: false somewhere in this dependency structure.`);\n    }\n\n}","/**\n * This source code is from https://github.com/jriecken/dependency-graph\n * Just added \"any\" types here, wrapper everything into exported class.\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\n */\n\n/**\n * A simple dependency graph\n */\n\n/**\n * Helper for creating a Depth-First-Search on\n * a set of edges.\n *\n * Detects cycles and throws an Error if one is detected.\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n */\nfunction createDFS(edges: any, leavesOnly: any, result: any) {\n    let currentPath: any[] = [];\n    let visited: any = {};\n    return function DFS(currentNode: any) {\n        visited[currentNode] = true;\n        currentPath.push(currentNode);\n        edges[currentNode].forEach(function (node: any) {\n            if (!visited[node]) {\n                DFS(node);\n            } else if (currentPath.indexOf(node) >= 0) {\n                currentPath.push(node);\n                throw new Error(`Dependency Cycle Found: ${currentPath.join(\" -> \")}`);\n            }\n        });\n        currentPath.pop();\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\n            result.push(currentNode);\n        }\n    };\n}\n\n\nexport class DepGraph {\n    nodes: any = {};\n    outgoingEdges: any = {}; // Node -> [Dependency Node]\n    incomingEdges: any = {}; // Node -> [Dependant Node]\n\n    /**\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n     */\n    addNode(node: any, data?: any) {\n        if (!this.hasNode(node)) {\n            // Checking the arguments length allows the user to add a node with undefined data\n            if (arguments.length === 2) {\n                this.nodes[node] = data;\n            } else {\n                this.nodes[node] = node;\n            }\n            this.outgoingEdges[node] = [];\n            this.incomingEdges[node] = [];\n        }\n    }\n\n    /**\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n     */\n    removeNode(node: any) {\n        if (this.hasNode(node)) {\n            delete this.nodes[node];\n            delete this.outgoingEdges[node];\n            delete this.incomingEdges[node];\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n                Object.keys(edgeList).forEach(function (key: any) {\n                    let idx = edgeList[key].indexOf(node);\n                    if (idx >= 0) {\n                        edgeList[key].splice(idx, 1);\n                    }\n                }, this);\n            });\n        }\n    }\n\n    /**\n     * Check if a node exists in the graph\n     */\n    hasNode(node: any) {\n        return this.nodes.hasOwnProperty(node);\n    }\n\n    /**\n     * Get the data associated with a node name\n     */\n    getNodeData(node: any) {\n        if (this.hasNode(node)) {\n            return this.nodes[node];\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n     */\n    setNodeData(node: any, data: any) {\n        if (this.hasNode(node)) {\n            this.nodes[node] = data;\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Add a dependency between two nodes. If either of the nodes does not exist,\n     * an Error will be thrown.\n     */\n    addDependency(from: any, to: any) {\n        if (!this.hasNode(from)) {\n            throw new Error(`Node does not exist: ${from}`);\n        }\n        if (!this.hasNode(to)) {\n            throw new Error(`Node does not exist: ${to}`);\n        }\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\n            this.outgoingEdges[from].push(to);\n        }\n        if (this.incomingEdges[to].indexOf(from) === -1) {\n            this.incomingEdges[to].push(from);\n        }\n        return true;\n    }\n\n    /**\n     * Remove a dependency between two nodes.\n     */\n    removeDependency(from: any, to: any) {\n        let idx: any;\n        if (this.hasNode(from)) {\n            idx = this.outgoingEdges[from].indexOf(to);\n            if (idx >= 0) {\n                this.outgoingEdges[from].splice(idx, 1);\n            }\n        }\n\n        if (this.hasNode(to)) {\n            idx = this.incomingEdges[to].indexOf(from);\n            if (idx >= 0) {\n                this.incomingEdges[to].splice(idx, 1);\n            }\n        }\n    }\n\n    /**\n     * Get an array containing the nodes that the specified node depends on (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n     * in the array.\n     */\n    dependenciesOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            let result: any[] = [];\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * get an array containing the nodes that depend on the specified node (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n     */\n    dependantsOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            let result: any[] = [];\n            let DFS = createDFS(this.incomingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Construct the overall processing order for the dependency graph.\n     *\n     * Throws an Error if the graph has a cycle.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n     */\n    overallOrder(leavesOnly?: any) {\n        let self = this;\n        let result: any[] = [];\n        let keys = Object.keys(this.nodes);\n        if (keys.length === 0) {\n            return result; // Empty graph\n        } else {\n            // Look for cycles - we run the DFS starting at all the nodes in case there\n            // are several disconnected subgraphs inside this dependency graph.\n            let CycleDFS = createDFS(this.outgoingEdges, false, []);\n            keys.forEach(function (n: any) {\n                CycleDFS(n);\n            });\n\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            // Find all potential starting points (nodes with nothing depending on them) an\n            // run a DFS starting at these points to get the order\n            keys.filter(function (node) {\n                return self.incomingEdges[node].length === 0;\n            }).forEach(function (n) {\n                DFS(n);\n            });\n\n            return result;\n        }\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {MissingPrimaryColumnError} from \"./error/MissingPrimaryColumnError\";\nimport {CircularRelationsError} from \"./error/CircularRelationsError\";\nimport {DepGraph} from \"../util/DepGraph\";\n\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates all given entity metadatas.\n     */\n    validateMany(entityMetadatas: EntityMetadata[]) {\n        entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas));\n        this.validateDependencies(entityMetadatas);\n    }\n\n    /**\n     * Validates given entity metadata.\n     */\n    validate(entityMetadata: EntityMetadata, allEntityMetadatas: EntityMetadata[]) {\n\n        // check if table metadata has an id\n        if (!entityMetadata.isClassTableChild && !entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError(entityMetadata);\n\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritanceType === \"single-table\") {\n            if (!entityMetadata.discriminatorColumn)\n                throw new Error(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put @DiscriminatorColumn decorator?`);\n\n            if ([\"\", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1)\n                throw new Error(`Entity ${entityMetadata.name} has empty discriminator value. Discriminator value should not be empty.`);\n\n            const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {\n                return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new Error(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.`);\n        }\n\n        entityMetadata.relationCounts.forEach(relationCount => {\n            if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne)\n                throw new Error(`Relation count can not be implemented on ManyToOne or OneToOne relations.`);\n        });\n\n        // validate relations\n        entityMetadata.relations.forEach(relation => {\n\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new Error(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n\n\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n\n\n        });\n\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach(relation => {\n            const isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation!.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new Error(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation!.entityMetadata.name}#${relation.inverseRelation!.propertyName} both has cascade remove set. ` +\n                    `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n    }\n\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    protected validateDependencies(entityMetadatas: EntityMetadata[]) {\n\n        const graph = new DepGraph();\n        entityMetadatas.forEach(entityMetadata => {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.relationsWithJoinColumns\n                .filter(relation => !relation.isNullable)\n                .forEach(relation => {\n                    graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n                });\n        });\n        try {\n            graph.overallOrder();\n\n        } catch (err) {\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    }\n\n}","import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\n\n/**\n * Sqlite-specific connection options.\n */\nexport interface SqliteConnectionOptions extends BaseConnectionOptions {\n\n    /**\n     * Database type.\n     */\n    readonly type: \"sqlite\";\n\n    /**\n     * Storage type or path to the storage.\n     */\n    readonly database: string;\n\n}","import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\n\n/**\n * Websql-specific connection options.\n */\nexport interface WebSqlConnectionOptions extends BaseConnectionOptions {\n\n    /**\n     * Database type.\n     */\n    readonly type: \"websql\";\n\n    /**\n     * Storage type or path to the storage.\n     */\n    readonly database: string;\n\n}","import {MysqlConnectionOptions} from \"../driver/mysql/MysqlConnectionOptions\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {SqliteConnectionOptions} from \"../driver/sqlite/SqliteConnectionOptions\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {OracleConnectionOptions} from \"../driver/oracle/OracleConnectionOptions\";\nimport {WebSqlConnectionOptions} from \"../driver/websql/WebSqlConnectionOptions\";\nimport {MongoConnectionOptions} from \"../driver/mongodb/MongoConnectionOptions\";\n\n/**\n * ConnectionOptions is an interface with settings and options for specific connection.\n * Options contain database and other connection-related settings.\n * Consumer must provide connection options for each of your connections.\n */\nexport type ConnectionOptions =\n    MysqlConnectionOptions|\n    PostgresConnectionOptions|\n    SqliteConnectionOptions|\n    SqlServerConnectionOptions|\n    OracleConnectionOptions|\n    WebSqlConnectionOptions|\n    MongoConnectionOptions;","import {Connection} from \"../connection/Connection\";\nimport {EntityManager} from \"./EntityManager\";\nimport {MongoEntityManager} from \"./MongoEntityManager\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Helps to create entity managers.\n */\nexport class EntityManagerFactory {\n\n    /**\n     * Creates a new entity manager depend on a given connection's driver.\n     */\n    create(connection: Connection, queryRunner?: QueryRunner): EntityManager {\n        if (connection.driver instanceof MongoDriver)\n            return new MongoEntityManager(connection);\n\n        return new EntityManager(connection, queryRunner);\n    }\n\n}","import {LoggerOptions} from \"./LoggerOptions\";\nimport {Logger} from \"./Logger\";\n\n/**\n * Helps to create logger instances.\n */\nexport class LoggerFactory {\n\n    /**\n     * Creates a new logger depend on a given connection's driver.\n     */\n    create(options: LoggerOptions): Logger {\n        return new Logger(options);\n    }\n\n}","import {TreeRepository} from \"./TreeRepository\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {Repository} from \"./Repository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoRepository} from \"./MongoRepository\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Factory used to create different types of repositories.\n */\nexport class RepositoryFactory {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a repository.\n     */\n    create(connection: Connection, metadata: EntityMetadata, queryRunner?: QueryRunner): Repository<any> {\n\n        if (metadata.isClosure) {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            const repository = new TreeRepository<any>();\n            (repository as any)[\"manager\"] = connection.manager;\n            (repository as any)[\"metadata\"] = metadata;\n            (repository as any)[\"queryRunner\"] = queryRunner;\n            return repository;\n\n        } else {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            let repository: Repository<any>;\n            if (connection.driver instanceof MongoDriver) {\n                repository = new MongoRepository();\n            } else {\n                repository = new Repository<any>();\n            }\n            (repository as any)[\"manager\"] = connection.manager;\n            (repository as any)[\"metadata\"] = metadata;\n            (repository as any)[\"queryRunner\"] = queryRunner;\n\n            return repository;\n        }\n    }\n\n}","/**\n * Thrown when consumer specifies driver type that does not exist or supported.\n */\nexport class MissingDriverError extends Error {\n    name = \"MissingDriverError\";\n\n    constructor(driverType: string) {\n        super();\n        this.message = `Wrong driver ${driverType} given. Supported drivers are: \"mysql\", \"postgres\", \"mssql\", \"oracle\", \"mariadb\", \"sqlite\".`;\n        this.stack = new Error().stack;\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {WebsqlDriver} from \"./WebsqlDriver\";\nimport {Connection} from \"../../connection/Connection\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {ReadStream} from \"fs\";\n\n/**\n * Declare a global function that is only available in browsers that support WebSQL.\n */\ndeclare function openDatabase(...params: any[]): any;\n\n/**\n * Runs queries on a single websql database connection.\n */\nexport class WebsqlQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: WebsqlDriver) {\n        this.connection = driver.connection;\n        this.manager = driver.connection.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        const options = Object.assign({}, {\n            database: this.driver.options.database,\n        }, this.driver.options.extra || {});\n\n        this.databaseConnectionPromise = new Promise<void>((ok, fail) => {\n            this.databaseConnection = openDatabase(\n                options.database,\n                options.version,\n                options.description,\n                options.size,\n            );\n            ok(this.databaseConnection);\n        });\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        // todo: implement closing\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n        // await this.query(\"BEGIN TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        // await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        // await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const db = await this.connect();\n            // todo(dima): check if transaction is not active\n            db.transaction((tx: any) => {\n                tx.executeSql(query, parameters, (tx: any, result: any) => {\n                    const rows = Object\n                        .keys(result.rows)\n                        .filter(key => key !== \"length\")\n                        .map(key => result.rows[key]);\n                    ok(rows);\n\n                }, (tx: any, err: any) => {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError(err, this);\n                    return fail(err);\n                });\n            });\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by websqlite driver.`);\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<any[]>(async (ok, fail) => {\n            this.driver.connection.logger.logQuery(sql, parameters, this);\n\n            const db = await this.connect();\n            // todo: check if transaction is not active\n            db.transaction((tx: any) => {\n                tx.executeSql(sql, parameters, (tx: any, result: any) => {\n                    if (generatedColumn)\n                        return ok(result[\"insertId\"]);\n                    ok();\n\n                }, (tx: any, err: any) => {\n                    this.driver.connection.logger.logFailedQuery(sql, parameters, this);\n                    this.driver.connection.logger.logQueryError(err, this);\n                    return fail(err);\n                });\n            });\n        });\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\n        const query = `UPDATE \"${tableName}\" SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(query, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \"${tableName}\" WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\", \"level\") ` +\n                `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\") ` +\n                `SELECT \"ancestor\", ${newEntityId} FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(\"level\") as \"level\" FROM ${tableName} WHERE \"descendant\" = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n\n        // load tables, columns, indices and foreign keys\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (${tableNamesString})`);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables || !dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"name\"]);\n\n            // load columns and indices\n            /*const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\n            ]);\n\n            // find column name with auto increment\n            let autoIncrementColumnName: string|undefined = undefined;\n            const tableSql: string = dbTable[\"sql\"];\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\n                if (comma !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n\n                } else if (bracket !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n                }\n            }\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns.map(dbColumn => {\n                const columnSchema = new ColumnSchema();\n                columnSchema.name = dbColumn[\"name\"];\n                columnSchema.type = dbColumn[\"type\"].toLowerCase();\n                columnSchema.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\n                columnSchema.isNullable = dbColumn[\"notnull\"] === 0;\n                columnSchema.isPrimary = dbColumn[\"pk\"] === 1;\n                columnSchema.comment = \"\"; // todo later\n                columnSchema.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\n                const columnForeignKeys = dbForeignKeys\n                    .filter(foreignKey => foreignKey[\"from\"] === dbColumn[\"name\"])\n                    .map(foreignKey => {\n                        const keyName = namingStrategy.foreignKeyName(dbTable[\"name\"], [foreignKey[\"from\"]], foreignKey[\"table\"], [foreignKey[\"to\"]]);\n                        return new ForeignKeySchema(keyName, [foreignKey[\"from\"]], [foreignKey[\"to\"]], foreignKey[\"table\"], foreignKey[\"on_delete\"]); // todo: how sqlite return from and to when they are arrays? (multiple column foreign keys)\n                    });\n                tableSchema.addForeignKeys(columnForeignKeys);\n                return columnSchema;\n            });\n\n            // create primary key schema\n            await Promise.all(dbIndices\n                .filter(index => index[\"origin\"] === \"pk\")\n                .map(async index => {\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${index[\"name\"]}\")`);\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\n                    indexColumns.forEach(indexColumn => {\n                        tableSchema.primaryKeys.push(new PrimaryKeySchema(index[\"name\"], indexColumn));\n                    });\n                }));\n\n            // create index schemas from the loaded indices\n            const indicesPromises = dbIndices\n                .filter(dbIndex => {\n                    return  dbIndex[\"origin\"] !== \"pk\" &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"name\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"name\"]));\n                })\n                .map(dbIndex => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(async dbIndexName => {\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\n\n                    // check if db index is generated by sqlite itself and has special use case\n                    if (dbIndex![\"name\"].substr(0, \"sqlite_autoindex\".length) === \"sqlite_autoindex\") {\n                        if (dbIndex![\"unique\"] === 1) { // this means we have a special index generated for a column\n                            // so we find and update the column\n                            indexColumns.forEach(columnName => {\n                                const column = tableSchema.columns.find(column => column.name === columnName);\n                                if (column)\n                                    column.isUnique = true;\n                            });\n                        }\n\n                        return Promise.resolve(undefined);\n\n                    } else {\n                        return new IndexSchema(dbTable[\"name\"], dbIndex![\"name\"], indexColumns, dbIndex![\"unique\"] === \"1\");\n                    }\n                });\n\n            const indices = await Promise.all(indicesPromises);\n            tableSchema.indices = indices.filter(index => !!index) as IndexSchema[];*/\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM sqlite_master WHERE type = 'table' AND name = ${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        // skip columns with foreign keys, we will add them later\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generates a wrong schema\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        let sql = `DROP TABLE \"${tableName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\n        const columns: ObjectLiteral[] = await this.query(sql);\n        return !!columns.find(column => column[\"name\"] === columnName);\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns([column]);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns(columns);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        return this.dropColumns(table, [column]);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const updatingTableSchema = table.clone();\n        updatingTableSchema.removeColumns(columns);\n        return this.recreateTable(updatingTableSchema);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        return this.recreateTable(dbTable);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        return this.createForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.addForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        return this.dropForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.removeForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        const sql = `DROP INDEX \"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`DELETE FROM \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        // await this.query(`PRAGMA foreign_keys = OFF;`);\n        await this.startTransaction();\n        try {\n            const selectDropsQuery = `select 'drop table ' || name || ';' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'`;\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n            // await this.query(`PRAGMA foreign_keys = ON;`);\n        }\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=$\" + (startIndex + index + 1));\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema): string {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column instanceof ColumnMetadata) {\n            c += \" \" + this.driver.normalizeType(column);\n        } else {\n            c += \" \" + column.type;\n        }\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isUnique === true)\n            c += \" UNIQUE\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" PRIMARY KEY AUTOINCREMENT\";\n        if (column.default !== undefined && column.default !== null) // todo: same code in all drivers. make it DRY\n            c += ` DEFAULT ${column.default}`;\n\n        return c;\n    }\n\n    protected async recreateTable(tableSchema: TableSchema, oldTableSchema?: TableSchema): Promise<void> {\n        // const withoutForeignKeyColumns = columns.filter(column => column.foreignKeys.length === 0);\n        // const createForeignKeys = options && options.createForeignKeys;\n        const columnDefinitions = tableSchema.columns.map(dbColumn => this.buildCreateColumnSql(dbColumn)).join(\", \");\n        const columnNames = tableSchema.columns.map(column => `\"${column.name}\"`).join(\", \");\n\n        let sql1 = `CREATE TABLE \"temporary_${tableSchema.name}\" (${columnDefinitions}`;\n        // if (options && options.createForeignKeys) {\n        tableSchema.foreignKeys.forEach(foreignKey => {\n            const columnNames = foreignKey.columnNames.map(name => `\"${name}\"`).join(\", \");\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(name => `\"${name}\"`).join(\", \");\n            sql1 += `, FOREIGN KEY(${columnNames}) REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n            if (foreignKey.onDelete) sql1 += \" ON DELETE \" + foreignKey.onDelete;\n        });\n\n        const primaryKeyColumns = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql1 += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generate a wrong schema\n\n        sql1 += \")\";\n\n        // todo: need also create uniques and indices?\n\n        // recreate a table with a temporary name\n        await this.query(sql1);\n\n        // we need only select data from old columns\n        const oldColumnNames = oldTableSchema ? oldTableSchema.columns.map(column => `\"${column.name}\"`).join(\", \") : columnNames;\n\n        // migrate all data from the table into temporary table\n        const sql2 = `INSERT INTO \"temporary_${tableSchema.name}\"(${oldColumnNames}) SELECT ${oldColumnNames} FROM \"${tableSchema.name}\"`;\n        await this.query(sql2);\n\n        // drop old table\n        const sql3 = `DROP TABLE \"${tableSchema.name}\"`;\n        await this.query(sql3);\n\n        // rename temporary table\n        const sql4 = `ALTER TABLE \"temporary_${tableSchema.name}\" RENAME TO \"${tableSchema.name}\"`;\n        await this.query(sql4);\n\n        // also re-create indices\n        const indexPromises = tableSchema.indices.map(index => this.createIndex(tableSchema.name, index));\n        // const uniquePromises = tableSchema.uniqueKeys.map(key => this.createIndex(key));\n        await Promise.all(indexPromises/*.concat(uniquePromises)*/);\n    }\n\n    /**\n     * If given value is a table name then it loads its table schema representation from the database.\n     */\n    protected async getTableSchema(tableSchemaOrName: TableSchema|string): Promise<TableSchema> {\n        if (tableSchemaOrName instanceof TableSchema) {\n            return tableSchemaOrName;\n        } else {\n            const tableSchema = await this.loadTableSchema(tableSchemaOrName);\n            if (!tableSchema)\n                throw new Error(`Table named ${tableSchemaOrName} was not found in the database.`);\n\n            return tableSchema;\n        }\n    }\n\n}","import {Driver} from \"../Driver\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {WebsqlQueryRunner} from \"./WebsqlQueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {WebSqlConnectionOptions} from \"./WebSqlConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\n\n/**\n * Organizes communication with WebSQL in the browser.\n */\nexport class WebsqlDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Connection options.\n     */\n    options: WebSqlConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\n     * @see https://sqlite.org/datatype3.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"integer\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"int2\",\n        \"int8\",\n        \"integer\",\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"clob\",\n        \"text\",\n        \"blob\",\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n        \"boolean\",\n        \"date\",\n        \"datetime\",\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"datetime('now')\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"datetime('now')\",\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as WebSqlConnectionOptions;\n        Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n        // todo: what about extra options: version, description, size\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    disconnect(): Promise<void> {\n        return Promise.resolve();\n        // if (!this.databaseConnection)\n        //     throw new ConnectionIsNotSetError(\"websql\");\n\n        // return new Promise<void>((ok, fail) => {\n            // const handler = (err: any) => err ? fail(err) : ok();\n            // todo: find out how to close connection\n            // ok();\n        // });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        return new WebsqlQueryRunner(this);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            escapedParameters.push(parameters[key.substr(1)]);\n            return \"?\";\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return columnName; // \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.type === Boolean) {\n            return value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.parse(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number, array?: string|boolean }): string {\n        let type = \"\";\n        if (column.type === Number) {\n            type += \"integer\";\n\n        } else if (column.type === String) {\n            type += \"varchar\";\n\n        } else if (column.type === Date) {\n            type += \"datetime\";\n\n        } else if (column.type === Boolean) {\n            type += \"boolean\";\n\n        } else if (column.type === Object) {\n            type += \"text\";\n\n        } else if (column.type === \"simple-array\") {\n            type += \"text\";\n\n        } else {\n            type += column.type;\n        }\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n\n        } else if (column.precision && column.scale) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision) {\n            type += \"(\" + column.precision + \")\";\n\n        } else if (column.scale) {\n            type += \"(\" + column.scale + \")\";\n        }\n        return type;\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        if (typeof column.default === \"number\") {\n            return \"\" + column.default;\n\n        } else if (typeof column.default === \"boolean\") {\n            return column.default === true ? \"1\" : \"0\";\n\n        } else if (typeof column.default === \"function\") {\n            return column.default();\n\n        } else if (typeof column.default === \"string\") {\n            return `'${column.default}'`;\n\n        } else {\n            return column.default;\n        }\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {RandomGenerator} from \"../../util/RandomGenerator\";\nimport {SqliteDriver} from \"./SqliteDriver\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {Connection} from \"../../connection/Connection\";\nimport {ReadStream} from \"fs\";\nimport {Readable} from \"stream\";\n\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nexport class SqliteQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: SqliteDriver) {\n        this.connection = driver.connection;\n        this.manager = driver.connection.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        return Promise.resolve(this.driver.databaseConnection);\n    }\n\n    /**\n     * Releases used database connection.\n     * We don't do anything here because sqlite do not support multiple connections thus query runners.\n     */\n    release(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n        await this.query(\"BEGIN TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            databaseConnection.all(query, parameters, (err: any, result: any) => {\n                if (err) {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError(err, this);\n                    fail(err);\n                } else {\n                    ok(result);\n                }\n            });\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by sqlite driver.`);\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<any[]>(async (ok, fail) => {\n            this.driver.connection.logger.logQuery(sql, parameters, this);\n            const __this = this;\n            const databaseConnection = await this.connect();\n            databaseConnection.run(sql, parameters, function (err: any): void {\n                if (err) {\n                    __this.driver.connection.logger.logFailedQuery(sql, parameters, this);\n                    __this.driver.connection.logger.logQueryError(err, this);\n                    fail(err);\n                } else {\n                    if (generatedColumn)\n                        return ok(this[\"lastID\"]);\n\n                    ok();\n                }\n            });\n        });\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\n        const query = `UPDATE \"${tableName}\" SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(query, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \"${tableName}\" WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\", \"level\") ` +\n                `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\") ` +\n                `SELECT \"ancestor\", ${newEntityId} FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n\n        // load tables, columns, indices and foreign keys\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (${tableNamesString})`);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables || !dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"name\"]);\n\n            // load columns and indices\n            const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\n            ]);\n\n            // find column name with auto increment\n            let autoIncrementColumnName: string|undefined = undefined;\n            const tableSql: string = dbTable[\"sql\"];\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\n                if (comma !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n\n                } else if (bracket !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n                }\n            }\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns.map(dbColumn => {\n                const columnSchema = new ColumnSchema();\n                columnSchema.name = dbColumn[\"name\"];\n                columnSchema.type = dbColumn[\"type\"].toLowerCase();\n                columnSchema.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\n                columnSchema.isNullable = dbColumn[\"notnull\"] === 0;\n                columnSchema.isPrimary = dbColumn[\"pk\"] === 1;\n                columnSchema.comment = \"\"; // todo later\n                columnSchema.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\n                const columnForeignKeys = dbForeignKeys\n                    .filter(foreignKey => foreignKey[\"from\"] === dbColumn[\"name\"])\n                    .map(foreignKey => {\n                        // const keyName = this.driver.namingStrategy.foreignKeyName(dbTable[\"name\"], [foreignKey[\"from\"]], foreignKey[\"table\"], [foreignKey[\"to\"]]);\n                        // todo: figure out solution here, name should be same as naming strategy generates!\n                        const key = `${dbTable[\"name\"]}_${[foreignKey[\"from\"]].join(\"_\")}_${foreignKey[\"table\"]}_${[foreignKey[\"to\"]].join(\"_\")}`;\n                        const keyName = \"fk_\" + RandomGenerator.sha1(key).substr(0, 27);\n                        return new ForeignKeySchema(keyName, [foreignKey[\"from\"]], [foreignKey[\"to\"]], foreignKey[\"table\"], foreignKey[\"on_delete\"]); // todo: how sqlite return from and to when they are arrays? (multiple column foreign keys)\n                    });\n                tableSchema.addForeignKeys(columnForeignKeys);\n                return columnSchema;\n            });\n\n            // create primary key schema\n            await Promise.all(dbIndices\n                .filter(index => index[\"origin\"] === \"pk\")\n                .map(async index => {\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${index[\"name\"]}\")`);\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\n                    indexColumns.forEach(indexColumn => {\n                        tableSchema.primaryKeys.push(new PrimaryKeySchema(index[\"name\"], indexColumn));\n                    });\n                }));\n\n            // create index schemas from the loaded indices\n            const indicesPromises = dbIndices\n                .filter(dbIndex => {\n                    return dbIndex[\"origin\"] !== \"pk\" &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"name\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"name\"]));\n                })\n                .map(dbIndex => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(async dbIndexName => {\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\n\n                    // check if db index is generated by sqlite itself and has special use case\n                    if (dbIndex![\"name\"].substr(0, \"sqlite_autoindex\".length) === \"sqlite_autoindex\") {\n                        if (dbIndex![\"unique\"] === 1) { // this means we have a special index generated for a column\n                            // so we find and update the column\n                            indexColumns.forEach(columnName => {\n                                const column = tableSchema.columns.find(column => column.name === columnName);\n                                if (column)\n                                    column.isUnique = true;\n                            });\n                        }\n\n                        return Promise.resolve(undefined);\n\n                    } else {\n                        return new IndexSchema(dbTable[\"name\"], dbIndex![\"name\"], indexColumns, dbIndex![\"unique\"] === \"1\");\n                    }\n                });\n\n            const indices = await Promise.all(indicesPromises);\n            tableSchema.indices = indices.filter(index => !!index) as IndexSchema[];\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM sqlite_master WHERE type = 'table' AND name = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        // skip columns with foreign keys, we will add them later\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generates a wrong schema\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        let sql = `DROP TABLE \"${tableName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\n        const columns: ObjectLiteral[] = await this.query(sql);\n        return !!columns.find(column => column[\"name\"] === columnName);\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns([column]);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns(columns);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        return this.dropColumns(table, [column]);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const updatingTableSchema = table.clone();\n        updatingTableSchema.removeColumns(columns);\n        return this.recreateTable(updatingTableSchema);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        return this.recreateTable(dbTable);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        return this.createForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.addForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        return this.dropForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.removeForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        const sql = `DROP INDEX \"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`DELETE FROM \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF;`);\n        await this.startTransaction();\n        try {\n            const selectDropsQuery = `select 'drop table ' || name || ';' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'`;\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.query(`PRAGMA foreign_keys = ON;`);\n        }\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=$\" + (startIndex + index + 1));\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema): string {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column instanceof ColumnMetadata) {\n            c += \" \" + this.driver.normalizeType(column);\n        } else {\n            c += \" \" + column.type;\n        }\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isUnique === true)\n            c += \" UNIQUE\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" PRIMARY KEY AUTOINCREMENT\";\n\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            c += \" DEFAULT (\" + column.default + \")\";\n        }\n\n        return c;\n    }\n\n    protected async recreateTable(tableSchema: TableSchema, oldTableSchema?: TableSchema, migrateData = true): Promise<void> {\n        // const withoutForeignKeyColumns = columns.filter(column => column.foreignKeys.length === 0);\n        // const createForeignKeys = options && options.createForeignKeys;\n        const columnDefinitions = tableSchema.columns.map(dbColumn => this.buildCreateColumnSql(dbColumn)).join(\", \");\n        const columnNames = tableSchema.columns.map(column => `\"${column.name}\"`).join(\", \");\n\n        let sql1 = `CREATE TABLE \"temporary_${tableSchema.name}\" (${columnDefinitions}`;\n        // if (options && options.createForeignKeys) {\n        tableSchema.foreignKeys.forEach(foreignKey => {\n            const columnNames = foreignKey.columnNames.map(name => `\"${name}\"`).join(\", \");\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(name => `\"${name}\"`).join(\", \");\n            sql1 += `, FOREIGN KEY(${columnNames}) REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n            if (foreignKey.onDelete) sql1 += \" ON DELETE \" + foreignKey.onDelete;\n        });\n\n        const primaryKeyColumns = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql1 += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generate a wrong schema\n\n        sql1 += \")\";\n\n        // todo: need also create uniques and indices?\n\n        // recreate a table with a temporary name\n        await this.query(sql1);\n\n        // we need only select data from old columns\n        const oldColumnNames = oldTableSchema ? oldTableSchema.columns.map(column => `\"${column.name}\"`).join(\", \") : columnNames;\n\n        // migrate all data from the table into temporary table\n        if (migrateData) {\n            const sql2 = `INSERT INTO \"temporary_${tableSchema.name}\"(${oldColumnNames}) SELECT ${oldColumnNames} FROM \"${tableSchema.name}\"`;\n            await this.query(sql2);\n        }\n\n        // drop old table\n        const sql3 = `DROP TABLE \"${tableSchema.name}\"`;\n        await this.query(sql3);\n\n        // rename temporary table\n        const sql4 = `ALTER TABLE \"temporary_${tableSchema.name}\" RENAME TO \"${tableSchema.name}\"`;\n        await this.query(sql4);\n\n        // also re-create indices\n        const indexPromises = tableSchema.indices.map(index => this.createIndex(tableSchema.name, index));\n        // const uniquePromises = tableSchema.uniqueKeys.map(key => this.createIndex(key));\n        await Promise.all(indexPromises/*.concat(uniquePromises)*/);\n    }\n\n    /**\n     * If given value is a table name then it loads its table schema representation from the database.\n     */\n    protected async getTableSchema(tableSchemaOrName: TableSchema|string): Promise<TableSchema> {\n        if (tableSchemaOrName instanceof TableSchema) {\n            return tableSchemaOrName;\n        } else {\n            const tableSchema = await this.loadTableSchema(tableSchemaOrName);\n            if (!tableSchema)\n                throw new Error(`Table named ${tableSchemaOrName} was not found in the database.`);\n\n            return tableSchema;\n        }\n    }\n\n}\n","import {Driver} from \"../Driver\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {SqliteQueryRunner} from \"./SqliteQueryRunner\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {SqliteConnectionOptions} from \"./SqliteConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class SqliteDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Connection options.\n     */\n    options: SqliteConnectionOptions;\n\n    /**\n     * SQLite underlying library.\n     */\n    sqlite: any;\n\n    /**\n     * Sqlite has a single QueryRunner because it works on a single database connection.\n     */\n    queryRunner?: QueryRunner;\n\n    /**\n     * Real database connection with sqlite database.\n     */\n    databaseConnection: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\n     * @see https://sqlite.org/datatype3.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"integer\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"int2\",\n        \"int8\",\n        \"integer\",\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"clob\",\n        \"text\",\n        \"blob\",\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n        \"boolean\",\n        \"date\",\n        \"datetime\",\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"datetime('now')\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"datetime('now')\",\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as SqliteConnectionOptions;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close((err: any) => err ? fail(err) : ok());\n        });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        if (!this.queryRunner)\n            this.queryRunner = new SqliteQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.type === Boolean) {\n            return value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.parse(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n\n        const builtParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Array) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n            } else {\n                builtParameters.push(value);\n            }\n            return \"$\" + builtParameters.length;\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"\\\"\" + columnName + \"\\\"\";\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number, array?: string|boolean }): string {\n        let type = \"\";\n        if (column.type === Number || column.type === \"int\") {\n            type += \"integer\";\n\n        } else if (column.type === String) {\n            type += \"varchar\";\n\n        } else if (column.type === Date) {\n            type += \"datetime\";\n\n        } else if (column.type === Boolean) {\n            type += \"boolean\";\n\n        } else if (column.type === Object) {\n            type += \"text\";\n\n        } else if (column.type === \"simple-array\") {\n            type += \"text\";\n\n        } else {\n            type += column.type;\n        }\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n\n        } else if (column.precision && column.scale) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision) {\n            type += \"(\" + column.precision + \")\";\n\n        } else if (column.scale) {\n            type += \"(\" + column.scale + \")\";\n        }\n\n        // set default required length if those were not specified\n        if (type === \"varchar\")\n            type += \"(255)\";\n\n        if (type === \"int\")\n            type += \"(11)\";\n\n        return type;\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        if (typeof column.default === \"number\") {\n            return \"\" + column.default;\n\n        } else if (typeof column.default === \"boolean\") {\n            return column.default === true ? \"1\" : \"0\";\n\n        } else if (typeof column.default === \"function\") {\n            return column.default();\n\n        } else if (typeof column.default === \"string\") {\n            return `'${column.default}'`;\n\n        } else {\n            return column.default;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const databaseConnection = new this.sqlite.Database(this.options.database, (err: any) => {\n                if (err) return fail(err);\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete to work with sqlite.\n                databaseConnection.run(`PRAGMA foreign_keys = ON;`, (err: any, result: any) => {\n                    if (err) return fail(err);\n                    ok(databaseConnection);\n                });\n            });\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = PlatformTools.load(\"sqlite3\").verbose();\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\");\n        }\n    }\n\n}","import {MissingDriverError} from \"./error/MissingDriverError\";\nimport {MongoDriver} from \"./mongodb/MongoDriver\";\nimport {WebsqlDriver} from \"./websql/WebsqlDriver\";\nimport {SqlServerDriver} from \"./sqlserver/SqlServerDriver\";\nimport {OracleDriver} from \"./oracle/OracleDriver\";\nimport {SqliteDriver} from \"./sqlite/SqliteDriver\";\nimport {MysqlDriver} from \"./mysql/MysqlDriver\";\nimport {PostgresDriver} from \"./postgres/PostgresDriver\";\nimport {Driver} from \"./Driver\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    create(connection: Connection): Driver {\n        const type = connection.options.type;\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection);\n            case \"postgres\":\n                return new PostgresDriver(connection);\n            case \"mariadb\":\n                return new MysqlDriver(connection);\n            case \"sqlite\":\n                return new SqliteDriver(connection);\n            case \"oracle\":\n                return new OracleDriver(connection);\n            case \"mssql\":\n                return new SqlServerDriver(connection);\n            case \"websql\":\n                return new WebsqlDriver(connection);\n            case \"mongodb\":\n                return new MongoDriver(connection);\n            default:\n                throw new MissingDriverError(type);\n        }\n    }\n\n}","import {PlatformTools} from \"../platform/PlatformTools\";\n\n/**\n * Loads all exported classes from the given directory.\n */\nexport function importClassesFromDirectories(directories: string[], formats = [\".js\", \".ts\"]): Function[] {\n\n    function loadFileClasses(exported: any, allLoaded: Function[]) {\n        if (exported instanceof Function) {\n            allLoaded.push(exported);\n\n        } else if (exported instanceof Object) {\n            Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\n\n        } else if (exported instanceof Array) {\n            exported.forEach((i: any) => loadFileClasses(i, allLoaded));\n        }\n\n        return allLoaded;\n    }\n\n    const allFiles = directories.reduce((allDirs, dir) => {\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormilize(dir)));\n    }, [] as string[]);\n\n    const dirs = allFiles\n        .filter(file => {\n            const dtsExtension = file.substring(file.length - 5, file.length);\n            return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\n        })\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\n\n    return loadFileClasses(dirs, []);\n}\n\n/**\n * Loads all json files from the given directory.\n */\nexport function importJsonsFromDirectories(directories: string[], format = \".json\"): any[] {\n\n    const allFiles = directories.reduce((allDirs, dir) => {\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormilize(dir)));\n    }, [] as string[]);\n\n    return allFiles\n        .filter(file => PlatformTools.pathExtname(file) === format)\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\n}","/**\n * Container options.\n */\nexport interface UseContainerOptions {\n\n    /**\n     * If set to true, then default container will be used in the case if given container haven't returned anything.\n     */\n    fallback?: boolean;\n\n    /**\n     * If set to true, then default container will be used in the case if given container thrown an exception.\n     */\n    fallbackOnErrors?: boolean;\n\n}\n\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nexport const defaultContainer: { get<T>(someClass: { new (...args: any[]): T }|Function): T } = new (class {\n    private instances: { type: Function, object: any }[] = [];\n\n    get<T>(someClass: { new (...args: any[]): T }): T {\n        let instance = this.instances.find(instance => instance.type === someClass);\n        if (!instance) {\n            instance = { type: someClass, object: new someClass() };\n            this.instances.push(instance);\n        }\n\n        return instance.object;\n    }\n})();\n\nlet userContainer: { get<T>(someClass: { new (...args: any[]): T }|Function): T };\nlet userContainerOptions: UseContainerOptions|undefined;\n\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer: { get(someClass: any): any }, options?: UseContainerOptions) {\n    userContainer = iocContainer;\n    userContainerOptions = options;\n}\n\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer<T>(someClass: { new (...args: any[]): T }|Function): T {\n    if (userContainer) {\n        try {\n            const instance = userContainer.get(someClass);\n            if (instance)\n                return instance;\n\n            if (!userContainerOptions || !userContainerOptions.fallback)\n                return instance;\n\n        } catch (error) {\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\n                throw error;\n        }\n    }\n    return defaultContainer.get<T>(someClass);\n}","/**\n * Arguments for NamingStrategyMetadata class.\n */\nexport interface NamingStrategyMetadataArgs {\n\n    /**\n     * Class to which this column is applied.\n     */\n    readonly target: Function;\n\n    /**\n     * Strategy name.\n     */\n    readonly name: string;\n\n}\n","/**\n * Arguments for JoinColumnMetadata class.\n */\nexport interface JoinColumnMetadataArgs {\n\n    /**\n     * Class to which this column is applied.\n     */\n    target: Function|string;\n\n    /**\n     * Class's property name to which this column is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Name of the column.\n     */\n    name?: string;\n\n    /**\n     * Name of the column in the entity to which this column is referenced.\n     * This is column property name, not a column database name.\n     */\n    referencedColumnName?: string;\n\n}\n","import {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\n\n/**\n * Arguments for JoinTableMetadata class.\n */\nexport interface JoinTableMetadataArgs {\n\n    /**\n     * Class to which this column is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Class's property name to which this column is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Name of the table that will be created to store values of the both tables (join table).\n     * By default is auto generated.\n     */\n    readonly name?: string;\n\n    /**\n     * First column of the join table.\n     */\n    readonly joinColumns?: JoinColumnMetadataArgs[];\n\n    /**\n     * Second (inverse) column of the join table.\n     */\n    readonly inverseJoinColumns?: JoinColumnMetadataArgs[];\n\n}\n","/**\n * Arguments for EntitySubscriberMetadata class.\n */\nexport interface EntitySubscriberMetadataArgs {\n\n    /**\n     * Class to which subscriber is applied.\n     */\n    readonly target: Function;\n\n}\n","/**\n * Arguments for InheritanceMetadata class.\n */\nexport interface InheritanceMetadataArgs {\n\n    /**\n     * Class to which inheritance is applied.\n     */\n    readonly target?: Function|string;\n\n    /**\n     * Inheritance type.\n     */\n    readonly type: \"single-table\"|\"class-table\";\n\n}\n","/**\n * DiscriminatorValue properties.\n */\nexport interface DiscriminatorValueMetadataArgs {\n\n    /**\n     * Class to which discriminator name is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Discriminator value.\n     */\n    readonly value: any;\n\n}\n","/**\n * Arguments for EntityRepositoryMetadata class, helps to construct an EntityRepositoryMetadata object.\n */\nexport interface EntityRepositoryMetadataArgs {\n\n    /**\n     * Constructor of the custom entity repository.\n     */\n    readonly target: Function;\n\n    /**\n     * Entity managed by this custom repository.\n     */\n    readonly entity?: Function|string;\n\n}\n","/**\n * Used to inject transaction's entity managed into the method wrapped with @Transaction decorator.\n */\nexport interface TransactionEntityMetadataArgs {\n\n    /**\n     * Target class on which decorator is used.\n     */\n    readonly target: Function;\n\n    /**\n     * Method on which decorator is used.\n     */\n    readonly methodName: string;\n\n    /**\n     * Index of the parameter on which decorator is used.\n     */\n    readonly index: number;\n\n}\n","/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n\n    /**\n     * Gets given's entity all inherited classes.\n     * Gives in order from parents to children.\n     * For example Post extends ContentModel which extends Unit it will give\n     * [Unit, ContentModel, Post]\n     */\n    static getInheritanceTree(entity: Function): Function[] {\n        const tree: Function[] = [entity];\n        const getPrototypeOf = (object: Function): void => {\n            const proto = Object.getPrototypeOf(object);\n            if (proto && proto.name) {\n                tree.push(proto);\n                getPrototypeOf(proto);\n            }\n        };\n        getPrototypeOf(entity);\n        return tree;\n    }\n\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    static isInherited(target1: Function, target2: Function) {\n        return target1.prototype instanceof target2;\n    }\n\n    /**\n     * Filters given array of targets by a given classes.\n     * If classes are not given, then it returns array itself.\n     */\n    static filterByTarget<T extends { target?: any }>(array: T[], classes?: any[]): T[] {\n        if (!classes) return array;\n        return array.filter(item => item.target && classes.indexOf(item.target) !== -1);\n    }\n\n}","import {RelationMetadataArgs} from \"./RelationMetadataArgs\";\nimport {ColumnMetadataArgs} from \"./ColumnMetadataArgs\";\nimport {RelationCountMetadataArgs} from \"./RelationCountMetadataArgs\";\nimport {IndexMetadataArgs} from \"./IndexMetadataArgs\";\nimport {EntityListenerMetadataArgs} from \"./EntityListenerMetadataArgs\";\nimport {TableMetadataArgs} from \"./TableMetadataArgs\";\nimport {NamingStrategyMetadataArgs} from \"./NamingStrategyMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"./JoinTableMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\nimport {EmbeddedMetadataArgs} from \"./EmbeddedMetadataArgs\";\nimport {EntitySubscriberMetadataArgs} from \"./EntitySubscriberMetadataArgs\";\nimport {RelationIdMetadataArgs} from \"./RelationIdMetadataArgs\";\nimport {InheritanceMetadataArgs} from \"./InheritanceMetadataArgs\";\nimport {DiscriminatorValueMetadataArgs} from \"./DiscriminatorValueMetadataArgs\";\nimport {EntityRepositoryMetadataArgs} from \"./EntityRepositoryMetadataArgs\";\nimport {TransactionEntityMetadataArgs} from \"./TransactionEntityMetadataArgs\";\nimport {MetadataUtils} from \"../metadata-builder/MetadataUtils\";\n\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nexport class MetadataArgsStorage {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    readonly tables: TableMetadataArgs[] = [];\n    readonly entityRepositories: EntityRepositoryMetadataArgs[] = [];\n    readonly transactionEntityManagers: TransactionEntityMetadataArgs[] = [];\n    readonly namingStrategies: NamingStrategyMetadataArgs[] = [];\n    readonly entitySubscribers: EntitySubscriberMetadataArgs[] = [];\n    readonly indices: IndexMetadataArgs[] = [];\n    readonly columns: ColumnMetadataArgs[] = [];\n    readonly relations: RelationMetadataArgs[] = [];\n    readonly joinColumns: JoinColumnMetadataArgs[] = [];\n    readonly joinTables: JoinTableMetadataArgs[] = [];\n    readonly entityListeners: EntityListenerMetadataArgs[] = [];\n    readonly relationCounts: RelationCountMetadataArgs[] = [];\n    readonly relationIds: RelationIdMetadataArgs[] = [];\n    readonly embeddeds: EmbeddedMetadataArgs[] = [];\n    readonly inheritances: InheritanceMetadataArgs[] = [];\n    readonly discriminatorValues: DiscriminatorValueMetadataArgs[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    filterTables(target?: Function|string): TableMetadataArgs[];\n    filterTables(target?: (Function|string)[]): TableMetadataArgs[];\n    filterTables(target?: (Function|string)|(Function|string)[]): TableMetadataArgs[] {\n        return this.tables.filter(table => {\n            return target instanceof Array ? target.indexOf(table.target) !== -1 : table.target === target;\n        });\n    }\n\n    filterColumns(target: Function|string): ColumnMetadataArgs[];\n    filterColumns(target: (Function|string)[]): ColumnMetadataArgs[];\n    filterColumns(target: (Function|string)|(Function|string)[]): ColumnMetadataArgs[] {\n        return this.columns.filter(column => {\n            return target instanceof Array ? target.indexOf(column.target) !== -1 : column.target === target;\n        });\n    }\n\n    filterRelations(target: Function|string): RelationMetadataArgs[];\n    filterRelations(target: (Function|string)[]): RelationMetadataArgs[];\n    filterRelations(target: (Function|string)|(Function|string)[]): RelationMetadataArgs[] {\n        return this.relations.filter(relation => {\n            return target instanceof Array ? target.indexOf(relation.target) !== -1 : relation.target === target;\n        });\n    }\n\n    filterRelationIds(target: Function|string): RelationIdMetadataArgs[];\n    filterRelationIds(target: (Function|string)[]): RelationIdMetadataArgs[];\n    filterRelationIds(target: (Function|string)|(Function|string)[]): RelationIdMetadataArgs[] {\n        return this.relationIds.filter(relationId => {\n            return target instanceof Array ? target.indexOf(relationId.target) !== -1 : relationId.target === target;\n        });\n    }\n\n    filterRelationCounts(target: Function|string): RelationCountMetadataArgs[];\n    filterRelationCounts(target: (Function|string)[]): RelationCountMetadataArgs[];\n    filterRelationCounts(target: (Function|string)|(Function|string)[]): RelationCountMetadataArgs[] {\n        return this.relationCounts.filter(relationCount => {\n            return target instanceof Array ? target.indexOf(relationCount.target) !== -1 : relationCount.target === target;\n        });\n    }\n\n    filterIndices(target: Function|string): IndexMetadataArgs[];\n    filterIndices(target: (Function|string)[]): IndexMetadataArgs[];\n    filterIndices(target: (Function|string)|(Function|string)[]): IndexMetadataArgs[] {\n        return this.indices.filter(index => {\n            return target instanceof Array ? target.indexOf(index.target) !== -1 : index.target === target;\n        });\n    }\n\n    filterListeners(target: Function|string): EntityListenerMetadataArgs[];\n    filterListeners(target: (Function|string)[]): EntityListenerMetadataArgs[];\n    filterListeners(target: (Function|string)|(Function|string)[]): EntityListenerMetadataArgs[] {\n        return this.entityListeners.filter(index => {\n            return target instanceof Array ? target.indexOf(index.target) !== -1 : index.target === target;\n        });\n    }\n\n    filterEmbeddeds(target: Function|string): EmbeddedMetadataArgs[];\n    filterEmbeddeds(target: (Function|string)[]): EmbeddedMetadataArgs[];\n    filterEmbeddeds(target: (Function|string)|(Function|string)[]): EmbeddedMetadataArgs[] {\n        return this.embeddeds.filter(embedded => {\n            return target instanceof Array ? target.indexOf(embedded.target) !== -1 : embedded.target === target;\n        });\n    }\n\n    findJoinTable(target: Function|string, propertyName: string): JoinTableMetadataArgs|undefined {\n        return this.joinTables.find(joinTable => {\n            return joinTable.target === target && joinTable.propertyName === propertyName;\n        });\n    }\n\n    filterJoinColumns(target: Function|string, propertyName: string): JoinColumnMetadataArgs[] {\n        return this.joinColumns.filter(joinColumn => {\n            return joinColumn.target === target && joinColumn.propertyName === propertyName;\n        });\n    }\n\n    filterSubscribers(target: Function|string): EntitySubscriberMetadataArgs[];\n    filterSubscribers(target: (Function|string)[]): EntitySubscriberMetadataArgs[];\n    filterSubscribers(target: (Function|string)|(Function|string)[]): EntitySubscriberMetadataArgs[] {\n        return this.entitySubscribers.filter(subscriber => {\n            return target instanceof Array ? target.indexOf(subscriber.target) !== -1 : subscriber.target === target;\n        });\n    }\n\n    filterNamingStrategies(target: Function|string): NamingStrategyMetadataArgs[];\n    filterNamingStrategies(target: (Function|string)[]): NamingStrategyMetadataArgs[];\n    filterNamingStrategies(target: (Function|string)|(Function|string)[]): NamingStrategyMetadataArgs[] {\n        return this.namingStrategies.filter(subscriber => {\n            return target instanceof Array ? target.indexOf(subscriber.target) !== -1 : subscriber.target === target;\n        });\n    }\n\n    filterTransactionEntityManagers(target: Function|string): TransactionEntityMetadataArgs[];\n    filterTransactionEntityManagers(target: (Function|string)[]): TransactionEntityMetadataArgs[];\n    filterTransactionEntityManagers(target: (Function|string)|(Function|string)[]): TransactionEntityMetadataArgs[] {\n        return this.transactionEntityManagers.filter(subscriber => {\n            return target instanceof Array ? target.indexOf(subscriber.target) !== -1 : subscriber.target === target;\n        });\n    }\n\n    filterSingleTableChildren(target: Function|string): TableMetadataArgs[] {\n        return this.tables.filter(table => {\n            return table.target instanceof Function\n                && target instanceof Function\n                && MetadataUtils.isInherited(table.target, target)\n                && table.type === \"single-table-child\";\n        });\n    }\n\n    findInheritanceType(target: Function|string): InheritanceMetadataArgs|undefined {\n        return this.inheritances.find(inheritance => inheritance.target === target);\n    }\n\n    findDiscriminatorValue(target: Function|string): DiscriminatorValueMetadataArgs|undefined {\n        return this.discriminatorValues.find(discriminatorValue => discriminatorValue.target === target);\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\nimport {Connection} from \"../connection/Connection\";\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\n\n/**\n * Creates EntityMetadata for junction tables.\n * Junction tables are tables generated by many-to-many relations.\n */\nexport class JunctionEntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds EntityMetadata for the junction of the given many-to-many relation.\n     */\n    build(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): EntityMetadata {\n        const referencedColumns = this.collectReferencedColumns(relation, joinTable);\n        const inverseReferencedColumns = this.collectInverseReferencedColumns(relation, joinTable);\n\n        const joinTableName = joinTable.name || this.connection.namingStrategy.joinTableName(\n            relation.entityMetadata.tableNameWithoutPrefix,\n            relation.inverseEntityMetadata.tableNameWithoutPrefix,\n            relation.propertyPath,\n            relation.inverseRelation ? relation.inverseRelation.propertyName : \"\"\n        );\n\n        const entityMetadata = new EntityMetadata({\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: joinTableName,\n                type: \"junction\"\n            }\n        });\n\n        // create original side junction columns\n        const junctionColumns = referencedColumns.map(referencedColumn => {\n            const joinColumn = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumnArgs => {\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumnArgs.name;\n            }) : undefined;\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name : this.connection.namingStrategy.joinTableColumnName(relation.entityMetadata.tableNameWithoutPrefix, referencedColumn.propertyName, referencedColumn.databaseName);\n\n            return new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: referencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        name: columnName,\n                        length: referencedColumn.length,\n                        type: referencedColumn.type,\n                        nullable: false,\n                        primary: true,\n                    }\n                }\n            });\n        });\n\n        // create inverse side junction columns\n        const inverseJunctionColumns = inverseReferencedColumns.map(inverseReferencedColumn => {\n            const joinColumn = joinTable.inverseJoinColumns ? joinTable.inverseJoinColumns.find(joinColumnArgs => {\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === inverseReferencedColumn.propertyName) &&\n                    !!joinColumnArgs.name;\n            }) : undefined;\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name : this.connection.namingStrategy.joinTableColumnName(relation.inverseEntityMetadata.tableNameWithoutPrefix, inverseReferencedColumn.propertyName, inverseReferencedColumn.databaseName);\n\n            return new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: inverseReferencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        length: inverseReferencedColumn.length,\n                        type: inverseReferencedColumn.type,\n                        name: columnName,\n                        nullable: false,\n                        primary: true,\n                    }\n                }\n            });\n        });\n\n        // set junction table columns\n        entityMetadata.ownColumns = [...junctionColumns, ...inverseJunctionColumns];\n        entityMetadata.ownColumns.forEach(column => column.relationMetadata = relation);\n\n        // create junction table foreign keys\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: relation.entityMetadata,\n                columns: junctionColumns,\n                referencedColumns: referencedColumns\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: relation.inverseEntityMetadata,\n                columns: inverseJunctionColumns,\n                referencedColumns: inverseReferencedColumns\n            }),\n        ];\n\n        // create junction table indices\n        entityMetadata.indices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: junctionColumns,\n                args: {\n                    target: \"\",\n                    unique: false\n                }\n            }),\n\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: inverseJunctionColumns,\n                args: {\n                    target: \"\",\n                    unique: false\n                }\n            })\n        ];\n\n        // finally return entity metadata\n        return entityMetadata;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    protected collectReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs) {\n        const hasAnyReferencedColumnName = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumn => !!joinColumn.referencedColumnName) : false;\n        if (!joinTable.joinColumns || (joinTable.joinColumns && !hasAnyReferencedColumnName)) {\n            return relation.entityMetadata.columns.filter(column => column.isPrimary);\n        } else {\n            return joinTable.joinColumns.map(joinColumn => {\n                const referencedColumn = relation.entityMetadata.columns.find(column => column.propertyName === joinColumn.referencedColumnName);\n                if (!referencedColumn)\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.entityMetadata.name}`);\n\n                return referencedColumn;\n            });\n        }\n    }\n\n    /**\n     * Collects inverse referenced columns from the given join column args.\n     */\n    protected collectInverseReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs) {\n        const hasInverseJoinColumns = !!joinTable.inverseJoinColumns;\n        const hasAnyInverseReferencedColumnName = hasInverseJoinColumns ? joinTable.inverseJoinColumns!.find(joinColumn => !!joinColumn.referencedColumnName) : false;\n        if (!hasInverseJoinColumns || (hasInverseJoinColumns && !hasAnyInverseReferencedColumnName)) {\n            return relation.inverseEntityMetadata.primaryColumns;\n        } else {\n            return joinTable.inverseJoinColumns!.map(joinColumn => {\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName);\n                if (!referencedColumn)\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\n\n                return referencedColumn;\n            });\n        }\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Creates EntityMetadata for junction tables of the closure entities.\n * Closure junction tables are tables generated by closure entities.\n */\nexport class ClosureJunctionEntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds EntityMetadata for the closure junction of the given closure entity.\n     */\n    build(parentClosureEntityMetadata: EntityMetadata) {\n\n        // create entity metadata itself\n        const entityMetadata = new EntityMetadata({\n            parentClosureEntityMetadata: parentClosureEntityMetadata,\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: parentClosureEntityMetadata.tableNameWithoutPrefix,\n                type: \"closure-junction\"\n            }\n        });\n\n        // create ancestor and descendant columns for new closure junction table\n        parentClosureEntityMetadata.primaryColumns.forEach(primaryColumn => {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: \"ancestor_\" + primaryColumn.databaseName, // todo: naming strategy\n                    options: {\n                        length: primaryColumn.length,\n                        type: primaryColumn.type,\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: \"descendant_\" + primaryColumn.databaseName,\n                    options: {\n                        length: primaryColumn.length,\n                        type: primaryColumn.type,\n                    }\n                }\n            }));\n        });\n\n        // if tree level column was defined by a closure entity then add it to the junction columns as well\n        if (parentClosureEntityMetadata.treeLevelColumn) {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: \"level\",\n                    options: {\n                        type: this.connection.driver.mappedDataTypes.treeLevel,\n                    }\n                }\n            }));\n        }\n\n        // create junction table foreign keys\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns\n            }),\n        ];\n\n        return entityMetadata;\n    }\n\n}","import {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Builds join column for the many-to-one and one-to-one owner relations.\n *\n * Cases it should cover:\n * 1. when join column is set with custom name and without referenced column name\n * we need automatically set referenced column name - primary ids by default\n * @JoinColumn({ name: \"custom_name\" })\n *\n * 2. when join column is set with only referenced column name\n * we need automatically set join column name - relation name + referenced column name\n * @JoinColumn({ referencedColumnName: \"title\" })\n *\n * 3. when join column is set without both referenced column name and join column name\n * we need to automatically set both of them\n * @JoinColumn()\n *\n * 4. when join column is not set at all (as in case of @ManyToOne relation)\n * we need to create join column for it with proper referenced column name and join column name\n *\n * 5. when multiple join columns set none of referencedColumnName and name can be optional\n * both options are required\n * @JoinColumn([\n *      { name: \"category_title\", referencedColumnName: \"type\" },\n *      { name: \"category_title\", referencedColumnName: \"name\" },\n * ])\n *\n * Since for many-to-one relations having JoinColumn decorator is not required,\n * we need to go thought each many-to-one relation without join column decorator set\n * and create join column metadata args for them.\n */\nexport class RelationJoinColumnBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds a foreign key of the many-to-one or one-to-one owner relations.\n     */\n    build(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata): ForeignKeyMetadata|undefined {\n        const referencedColumns = this.collectReferencedColumns(joinColumns, relation);\n        if (!referencedColumns.length)\n            return undefined; // this case is possible only for one-to-one non owning side\n\n        const columns = this.collectColumns(joinColumns, relation, referencedColumns);\n        return new ForeignKeyMetadata({\n            entityMetadata: relation.entityMetadata,\n            referencedEntityMetadata: relation.inverseEntityMetadata,\n            namingStrategy: this.connection.namingStrategy,\n            columns: columns,\n            referencedColumns: referencedColumns,\n            onDelete: relation.onDelete,\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    protected collectReferencedColumns(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata): ColumnMetadata[] {\n        const hasAnyReferencedColumnName = joinColumns.find(joinColumnArgs => !!joinColumnArgs.referencedColumnName);\n        const manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;\n        const hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;\n\n        if (manyToOneWithoutJoinColumn || hasJoinColumnWithoutAnyReferencedColumnName) { // covers case3 and case1\n            return relation.inverseEntityMetadata.primaryColumns;\n\n        } else { // cases with referenced columns defined\n            return joinColumns.map(joinColumn => {\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName); // todo: can we also search in relations?\n                if (!referencedColumn)\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\n\n                return referencedColumn;\n            });\n        }\n    }\n\n    /**\n     * Collects columns from the given join column args.\n     */\n    private collectColumns(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata, referencedColumns: ColumnMetadata[]): ColumnMetadata[] {\n        return referencedColumns.map(referencedColumn => {\n\n            // in the case if relation has join column with only name set we need this check\n            const joinColumnMetadataArg = joinColumns.find(joinColumn => {\n                return (!joinColumn.referencedColumnName || joinColumn.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumn.name;\n            });\n            const joinColumnName = joinColumnMetadataArg ? joinColumnMetadataArg.name : this.connection.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);\n\n            let relationalColumn = relation.entityMetadata.ownColumns.find(column => column.databaseName === joinColumnName);\n            if (!relationalColumn) {\n                relationalColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: relation.entityMetadata,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: relation.propertyName,\n                        options: {\n                            name: joinColumnName,\n                            type: referencedColumn.type,\n                            primary: relation.isPrimary,\n                            nullable: relation.isNullable,\n                        }\n                    }\n                });\n                relation.entityMetadata.registerColumn(relationalColumn);\n            }\n            relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column\n            relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type\n            relationalColumn.relationMetadata = relation;\n            relationalColumn.build(this.connection.namingStrategy);\n            return relationalColumn;\n        });\n    }\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\nimport {RelationIdMetadata} from \"../metadata/RelationIdMetadata\";\nimport {RelationCountMetadata} from \"../metadata/RelationCountMetadata\";\nimport {MetadataUtils} from \"./MetadataUtils\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {JunctionEntityMetadataBuilder} from \"./JunctionEntityMetadataBuilder\";\nimport {ClosureJunctionEntityMetadataBuilder} from \"./ClosureJunctionEntityMetadataBuilder\";\nimport {RelationJoinColumnBuilder} from \"./RelationJoinColumnBuilder\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\nimport {ColumnOptions} from \"../decorator/options/ColumnOptions\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\n\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nexport class EntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to build entity metadatas of the junction entities.\n     */\n    protected junctionEntityMetadataBuilder: JunctionEntityMetadataBuilder;\n\n    /**\n     * Used to build entity metadatas of the closure junction entities.\n     */\n    protected closureJunctionEntityMetadataBuilder: ClosureJunctionEntityMetadataBuilder;\n\n    /**\n     * Used to build join columns of the relations.\n     */\n    protected relationJoinColumnBuilder: RelationJoinColumnBuilder;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection,\n                private metadataArgsStorage: MetadataArgsStorage) {\n\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(connection);\n        this.closureJunctionEntityMetadataBuilder = new ClosureJunctionEntityMetadataBuilder(connection);\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(connection);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds a complete entity metadatas for the given entity classes.\n     */\n    build(entityClasses?: Function[]): EntityMetadata[] {\n\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\n        const allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables;\n\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\n        const realTables = allTables.filter(table => table.type === \"regular\" || table.type === \"closure\" || table.type === \"class-table-child\" || table.type === \"single-table-child\");\n\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n        const entityMetadatas = realTables.map(tableArgs => this.createEntityMetadata(tableArgs));\n\n        // calculate entity metadata computed properties and all its sub-metadatas\n        entityMetadatas.forEach(entityMetadata => this.computeEntityMetadata(entityMetadata));\n\n        // calculate entity metadata's inverse properties\n        entityMetadatas.forEach(entityMetadata => this.computeInverseProperties(entityMetadata, entityMetadatas));\n\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType !== \"single-table-child\")\n            .forEach(entityMetadata => {\n\n                // create entity's relations join columns (for many-to-one and one-to-one owner)\n                entityMetadata.relations.filter(relation => relation.isOneToOne || relation.isManyToOne).forEach(relation => {\n                    const joinColumns = this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);\n                    const foreignKey = this.relationJoinColumnBuilder.build(joinColumns, relation); // create a foreign key based on its metadata args\n                    if (foreignKey) {\n                        relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column\n                        entityMetadata.foreignKeys.push(foreignKey);\n                    }\n                });\n\n                // create junction entity metadatas for entity many-to-many relations\n                entityMetadata.relations.filter(relation => relation.isManyToMany).forEach(relation => {\n                    const joinTable = this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName);\n                    if (!joinTable) return; // no join table set - no need to do anything (it means this is many-to-many inverse side)\n\n                    // here we create a junction entity metadata for a new junction table of many-to-many relation\n                    const junctionEntityMetadata = this.junctionEntityMetadataBuilder.build(relation, joinTable);\n                    relation.registerForeignKeys(...junctionEntityMetadata.foreignKeys);\n                    relation.registerJunctionEntityMetadata(junctionEntityMetadata);\n\n                    // compute new entity metadata properties and push it to entity metadatas pool\n                    this.computeEntityMetadata(junctionEntityMetadata);\n                    this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);\n                    entityMetadatas.push(junctionEntityMetadata);\n                });\n\n                // update entity metadata depend properties\n                entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(relation => relation.isWithJoinColumn);\n                entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(relation => !relation.isNullable || relation.isPrimary);\n        });\n\n        // generate closure junction tables for all closure tables\n        entityMetadatas\n            .filter(metadata => metadata.isClosure)\n            .forEach(entityMetadata => {\n                const closureJunctionEntityMetadata = this.closureJunctionEntityMetadataBuilder.build(entityMetadata);\n                entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;\n                this.computeEntityMetadata(closureJunctionEntityMetadata);\n                this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);\n                entityMetadatas.push(closureJunctionEntityMetadata);\n            });\n\n        // after all metadatas created we set parent entity metadata for class-table inheritance\n        entityMetadatas\n            .filter(metadata => metadata.tableType === \"single-table-child\" || metadata.tableType === \"class-table-child\")\n            .forEach(entityMetadata => {\n                const inheritanceTree: any[] = entityMetadata.target instanceof Function\n                    ? MetadataUtils.getInheritanceTree(entityMetadata.target)\n                    : [entityMetadata.target];\n\n                const parentMetadata = entityMetadatas.find(metadata => {\n                    return inheritanceTree.find(inheritance => inheritance === metadata.target) && (metadata.inheritanceType === \"single-table\" || metadata.inheritanceType === \"class-table\");\n                });\n\n                if (parentMetadata) {\n                    entityMetadata.parentEntityMetadata = parentMetadata;\n                    if (parentMetadata.inheritanceType === \"single-table\")\n                        entityMetadata.tableName = parentMetadata.tableName;\n                }\n            });\n\n        // after all metadatas created we set child entity metadatas for class-table inheritance\n        entityMetadatas.forEach(metadata => {\n            metadata.childEntityMetadatas = entityMetadatas.filter(childMetadata => {\n                return metadata.target instanceof Function\n                    && childMetadata.target instanceof Function\n                    && MetadataUtils.isInherited(childMetadata.target, metadata.target);\n            });\n        });\n\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter(metadata => metadata.inheritanceType === \"single-table\" && metadata.discriminatorColumn)\n            .forEach(entityMetadata => this.createKeysForTableInheritance(entityMetadata));\n\n        // build all indices (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.indices.forEach(index => index.build(this.connection.namingStrategy));\n        });\n\n        entityMetadatas\n            .filter(metadata => !!metadata.parentEntityMetadata && metadata.tableType === \"class-table-child\")\n            .forEach(metadata => {\n                const parentPrimaryColumns = metadata.parentEntityMetadata.primaryColumns;\n                const parentRelationColumns = parentPrimaryColumns.map(parentPrimaryColumn => {\n                    const columnName = this.connection.namingStrategy.classTableInheritanceParentColumnName(metadata.parentEntityMetadata.tableName, parentPrimaryColumn.propertyPath);\n                    const column = new ColumnMetadata({\n                        connection: this.connection,\n                        entityMetadata: metadata,\n                        referencedColumn: parentPrimaryColumn,\n                        args: {\n                            target: metadata.target,\n                            propertyName: columnName,\n                            mode: \"parentId\",\n                            options: <ColumnOptions> {\n                                name: columnName,\n                                type: parentPrimaryColumn.type,\n                                unique: true,\n                                nullable: false,\n                                primary: true\n                            }\n                        }\n                    });\n                    metadata.registerColumn(column);\n                    column.build(this.connection.namingStrategy);\n                    return column;\n                });\n\n                metadata.foreignKeys = [\n                    new ForeignKeyMetadata({\n                        entityMetadata: metadata,\n                        referencedEntityMetadata: metadata.parentEntityMetadata,\n                        namingStrategy: this.connection.namingStrategy,\n                        columns: parentRelationColumns,\n                        referencedColumns: parentPrimaryColumns,\n                        onDelete: \"CASCADE\"\n                    })\n                ];\n            });\n\n        // add lazy initializer for entity relations\n        entityMetadatas\n            .filter(metadata => metadata.target instanceof Function)\n            .forEach(entityMetadata => {\n                entityMetadata.relations\n                    .filter(relation => relation.isLazy)\n                    .forEach(relation => {\n                        const lazyRelationsWrapper = new LazyRelationsWrapper(this.connection);\n                        lazyRelationsWrapper.wrap((entityMetadata.target as Function).prototype, relation);\n                    });\n            });\n\n        return entityMetadatas;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates entity metadata from the given table args.\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n     */\n    protected createEntityMetadata(tableArgs: TableMetadataArgs): EntityMetadata {\n\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n        const inheritanceTree: any[] = tableArgs.target instanceof Function\n            ? MetadataUtils.getInheritanceTree(tableArgs.target)\n            : [tableArgs.target]; // todo: implement later here inheritance for string-targets\n\n        // if single table inheritance used, we need to copy all children columns in to parent table\n        let singleTableChildrenTargets: any[];\n        if (tableArgs.type === \"single-table-child\") {\n            singleTableChildrenTargets = this.metadataArgsStorage\n                .filterSingleTableChildren(tableArgs.target)\n                .map(args => args.target)\n                .filter(target => target instanceof Function);\n\n            inheritanceTree.push(...singleTableChildrenTargets);\n\n        } else if (tableArgs.type === \"class-table-child\") {\n            inheritanceTree.forEach(inheritanceTreeItem => {\n                const isParent = !!this.metadataArgsStorage.inheritances.find(i => i.target === inheritanceTreeItem);\n                if (isParent)\n                    inheritanceTree.splice(inheritanceTree.indexOf(inheritanceTreeItem), 1);\n            });\n        }\n\n        const entityMetadata = new EntityMetadata({\n            connection: this.connection,\n            args: tableArgs\n        });\n\n        const inheritanceType = this.metadataArgsStorage.findInheritanceType(tableArgs.target);\n        entityMetadata.inheritanceType = inheritanceType ? inheritanceType.type : undefined;\n\n        const discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(tableArgs.target);\n        entityMetadata.discriminatorValue = discriminatorValue ? discriminatorValue.value : (tableArgs.target as any).name; // todo: pass this to naming strategy to generate a name\n\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(inheritanceTree));\n        entityMetadata.ownColumns = this.metadataArgsStorage.filterColumns(inheritanceTree).map(args => {\n            const column = new ColumnMetadata({ connection: this.connection, entityMetadata, args });\n            // console.log(column.propertyName);\n            // if single table inheritance used, we need to mark all inherit table columns as nullable\n            if (singleTableChildrenTargets && singleTableChildrenTargets.indexOf(args.target) !== -1)\n                column.isNullable = true;\n            return column;\n        });\n\n        entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(inheritanceTree).map(args => {\n            return new RelationMetadata({ entityMetadata, args });\n        });\n        entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(inheritanceTree).map(args => {\n            return new RelationIdMetadata({ entityMetadata, args });\n        });\n        entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(inheritanceTree).map(args => {\n            return new RelationCountMetadata({ entityMetadata, args });\n        });\n        entityMetadata.indices = this.metadataArgsStorage.filterIndices(inheritanceTree).map(args => {\n            return new IndexMetadata({ entityMetadata, args });\n        });\n        entityMetadata.listeners = this.metadataArgsStorage.filterListeners(inheritanceTree).map(args => {\n            return new EntityListenerMetadata(args);\n        });\n        return entityMetadata;\n    }\n\n    /**\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n     * and does the same for all its sub-embeddeds (goes recursively).\n     */\n    protected createEmbeddedsRecursively(entityMetadata: EntityMetadata, embeddedArgs: EmbeddedMetadataArgs[]): EmbeddedMetadata[] {\n        return embeddedArgs.map(embeddedArgs => {\n            const embeddedMetadata = new EmbeddedMetadata({ entityMetadata: entityMetadata, args: embeddedArgs });\n            embeddedMetadata.columns = this.metadataArgsStorage.filterColumns(embeddedMetadata.type).map(args => {\n                return new ColumnMetadata({ connection: this.connection, entityMetadata, embeddedMetadata, args});\n            });\n            embeddedMetadata.relations = this.metadataArgsStorage.filterRelations(embeddedMetadata.type).map(args => {\n                return new RelationMetadata({ entityMetadata, embeddedMetadata, args });\n            });\n            embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(embeddedMetadata.type));\n            embeddedMetadata.embeddeds.forEach(subEmbedded => subEmbedded.parentEmbeddedMetadata = embeddedMetadata);\n            return embeddedMetadata;\n        });\n    }\n\n    /**\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n     */\n    protected computeEntityMetadata(entityMetadata: EntityMetadata) {\n        entityMetadata.embeddeds.forEach(embedded => embedded.build(this.connection.namingStrategy));\n        entityMetadata.embeddeds.forEach(embedded => {\n            embedded.columnsFromTree.forEach(column => column.build(this.connection.namingStrategy));\n            embedded.relationsFromTree.forEach(relation => relation.build());\n        });\n        entityMetadata.ownColumns.forEach(column => column.build(this.connection.namingStrategy));\n        entityMetadata.ownRelations.forEach(relation => relation.build());\n        entityMetadata.relations = entityMetadata.embeddeds.reduce((relations, embedded) => relations.concat(embedded.relationsFromTree), entityMetadata.ownRelations);\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOne);\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(relation => relation.isOneToMany);\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(relation => relation.isManyToOne);\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToMany);\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOneOwner);\n        entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToManyOwner);\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(relation => relation.isTreeParent);\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(relation => relation.isTreeChildren);\n        entityMetadata.columns = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), entityMetadata.ownColumns);\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(column => column.isPrimary);\n        entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;\n        entityMetadata.generatedColumn = entityMetadata.columns.find(column => column.isGenerated);\n        entityMetadata.createDateColumn = entityMetadata.columns.find(column => column.isCreateDate);\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(column => column.isUpdateDate);\n        entityMetadata.versionColumn = entityMetadata.columns.find(column => column.isVersion);\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(column => column.isDiscriminator);\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(column => column.isTreeLevel);\n        entityMetadata.parentIdColumns = entityMetadata.columns.filter(column => column.isParentId);\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(column => column.isObjectId);\n        entityMetadata.foreignKeys.forEach(foreignKey => foreignKey.build(this.connection.namingStrategy));\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();\n        entityMetadata.relationIds.forEach(relationId => relationId.build());\n        entityMetadata.relationCounts.forEach(relationCount => relationCount.build());\n        entityMetadata.embeddeds.forEach(embedded => {\n            embedded.relationIdsFromTree.forEach(relationId => relationId.build());\n            embedded.relationCountsFromTree.forEach(relationCount => relationCount.build());\n        });\n    }\n\n    /**\n     * Computes entity metadata's relations inverse side properties.\n     */\n    protected computeInverseProperties(entityMetadata: EntityMetadata, entityMetadatas: EntityMetadata[]) {\n        entityMetadata.relations.forEach(relation => {\n\n            // compute inverse side (related) entity metadatas for all relation metadatas\n            const inverseEntityMetadata = entityMetadatas.find(m => m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type));\n            if (!inverseEntityMetadata)\n                throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyPath + \" was not found. Check if you specified a correct entity object, check its really entity and its connected in the connection options.\");\n\n            relation.inverseEntityMetadata = inverseEntityMetadata;\n            relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath();\n\n            // and compute inverse relation and mark if it has such\n            relation.inverseRelation = inverseEntityMetadata.relations.find(foundRelation => foundRelation.propertyPath === relation.inverseSidePropertyPath);\n        });\n    }\n\n    /**\n     * Creates indices for the table of single table inheritance.\n     */\n    protected createKeysForTableInheritance(entityMetadata: EntityMetadata) {\n        entityMetadata.indices.push(\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.discriminatorColumn!],\n                args: {\n                    target: entityMetadata.target,\n                    unique: false\n                }\n            }),\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [...entityMetadata.primaryColumns, entityMetadata.discriminatorColumn!],\n                args: {\n                    target: entityMetadata.target,\n                    unique: false\n                }\n            })\n        );\n    }\n\n}\n\n// generate virtual column with foreign key for class-table inheritance\n/*entityMetadatas.forEach(entityMetadata => {\n if (!entityMetadata.parentEntityMetadata)\n return;\n\n const parentPrimaryColumns = entityMetadata.parentEntityMetadata.primaryColumns;\n const parentIdColumns = parentPrimaryColumns.map(primaryColumn => {\n const columnName = this.namingStrategy.classTableInheritanceParentColumnName(entityMetadata.parentEntityMetadata.tableName, primaryColumn.propertyName);\n const column = new ColumnMetadataBuilder(entityMetadata);\n column.type = primaryColumn.type;\n column.propertyName = primaryColumn.propertyName; // todo: check why needed\n column.givenName = columnName;\n column.mode = \"parentId\";\n column.isUnique = true;\n column.isNullable = false;\n // column.entityTarget = entityMetadata.target;\n return column;\n });\n\n // add foreign key\n const foreignKey = new ForeignKeyMetadataBuilder(\n entityMetadata,\n parentIdColumns,\n entityMetadata.parentEntityMetadata,\n parentPrimaryColumns,\n \"CASCADE\"\n );\n entityMetadata.ownColumns.push(...parentIdColumns);\n entityMetadata.foreignKeys.push(foreignKey);\n });*/\n\n\n/*protected createEntityMetadata(metadata: EntityMetadata, options: {\n userSpecifiedTableName?: string,\n closureOwnerTableName?: string,\n }) {\n\n const tableNameUserSpecified = options.userSpecifiedTableName;\n const isClosureJunction = metadata.tableType === \"closure-junction\";\n const targetName = metadata.target instanceof Function ? (metadata.target as any).name : metadata.target;\n const tableNameWithoutPrefix = isClosureJunction\n ? this.namingStrategy.closureJunctionTableName(options.closureOwnerTableName!)\n : this.namingStrategy.tableName(targetName, options.userSpecifiedTableName);\n\n const tableName = this.namingStrategy.prefixTableName(this.driver.options.tablesPrefix, tableNameWithoutPrefix);\n\n // for virtual tables (like junction table) target is equal to undefined at this moment\n // we change this by setting virtual's table name to a target name\n // todo: add validation so targets with same schema names won't conflicts with virtual table names\n metadata.target = metadata.target ? metadata.target : tableName;\n metadata.targetName = targetName;\n metadata.givenTableName = tableNameUserSpecified;\n metadata.tableNameWithoutPrefix = tableNameWithoutPrefix;\n metadata.tableName = tableName;\n metadata.name = targetName ? targetName : tableName;\n // metadata.namingStrategy = this.namingStrategy;\n }*/\n\n/*protected createEntityMetadata(tableArgs: any, argsForTable: any, ): EntityMetadata {\n const metadata = new EntityMetadata({\n junction: false,\n target: tableArgs.target,\n tablesPrefix: this.driver.options.tablesPrefix,\n namingStrategy: this.namingStrategy,\n tableName: argsForTable.name,\n tableType: argsForTable.type,\n orderBy: argsForTable.orderBy,\n engine: argsForTable.engine,\n skipSchemaSync: argsForTable.skipSchemaSync,\n columnMetadatas: columns,\n relationMetadatas: relations,\n relationIdMetadatas: relationIds,\n relationCountMetadatas: relationCounts,\n indexMetadatas: indices,\n embeddedMetadatas: embeddeds,\n inheritanceType: mergedArgs.inheritance ? mergedArgs.inheritance.type : undefined,\n discriminatorValue: discriminatorValueArgs ? discriminatorValueArgs.value : (tableArgs.target as any).name // todo: pass this to naming strategy to generate a name\n }, this.lazyRelationsWrapper);\n return metadata;\n }*/\n\n\n// const tables = [mergedArgs.table].concat(mergedArgs.children);\n// tables.forEach(tableArgs => {\n\n// find embeddable tables for embeddeds registered in this table and create EmbeddedMetadatas from them\n// const findEmbeddedsRecursively = (embeddedArgs: EmbeddedMetadataArgs[]) => {\n//     const embeddeds: EmbeddedMetadata[] = [];\n//     embeddedArgs.forEach(embedded => {\n//         const embeddableTable = embeddableMergedArgs.find(embeddedMergedArgs => embeddedMergedArgs.table.target === embedded.type());\n//         if (embeddableTable) {\n//             const columns = embeddableTable.columns.toArray().map(args => new ColumnMetadata(args));\n//             const relations = embeddableTable.relations.toArray().map(args => new RelationMetadata(args));\n//             const subEmbeddeds = findEmbeddedsRecursively(embeddableTable.embeddeds.toArray());\n//             embeddeds.push(new EmbeddedMetadata(columns, relations, subEmbeddeds, embedded));\n//         }\n//     });\n//     return embeddeds;\n// };\n// const embeddeds = findEmbeddedsRecursively(mergedArgs.embeddeds.toArray());\n\n// create metadatas from args\n// const argsForTable = mergedArgs.inheritance && mergedArgs.inheritance.type === \"single-table\" ? mergedArgs.table : tableArgs;\n\n// const table = new TableMetadata(argsForTable);\n// const columns = mergedArgs.columns.toArray().map(args => {\n//\n//     // if column's target is a child table then this column should have all nullable columns\n//     if (mergedArgs.inheritance &&\n//         mergedArgs.inheritance.type === \"single-table\" &&\n//         args.target !== mergedArgs.table.target && !!mergedArgs.children.find(childTable => childTable.target === args.target)) {\n//         args.options.nullable = true;\n//     }\n//     return new ColumnMetadata(args);\n// });\n// const discriminatorValueArgs = mergedArgs.discriminatorValues.find(discriminatorValueArgs => {\n//     return discriminatorValueArgs.target === tableArgs.target;\n// });\n\n\n\n// after all metadatas created we set parent entity metadata for class-table inheritance\n// entityMetadatas.forEach(entityMetadata => {\n//     const mergedArgs = realTables.find(args => args.target === entityMetadata.target);\n//     if (mergedArgs && mergedArgs.parent) {\n//         const parentEntityMetadata = entityMetadatas.find(entityMetadata => entityMetadata.target === (mergedArgs!.parent! as any).target); // todo: weird compiler error here, thats why type casing is used\n//         if (parentEntityMetadata)\n//             entityMetadata.parentEntityMetadata = parentEntityMetadata;\n//     }\n// });","import {JoinColumnOptions} from \"./JoinColumnOptions\";\n\n/**\n * Describes all relation's options.\n */\nexport interface JoinTableOptions {\n\n    /**\n     * Name of the table that will be created to store values of the both tables (join table).\n     * By default is auto generated.\n     */\n    name?: string;\n\n    /**\n     * First column of the join table.\n     */\n    joinColumn?: JoinColumnOptions;\n\n    /**\n     * Second (inverse) column of the join table.\n     */\n    inverseJoinColumn?: JoinColumnOptions;\n\n}","import {EntitySchema} from \"./EntitySchema\";\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\nimport {JoinTableOptions} from \"../decorator/options/JoinTableOptions\";\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMuplipleColumnsOptions\";\nimport {ColumnMode} from \"../metadata-args/types/ColumnMode\";\n\nexport class EntitySchemaTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform(schemas: EntitySchema[]): MetadataArgsStorage {\n        const metadataArgsStorage = new MetadataArgsStorage();\n\n        schemas.forEach(schema => {\n\n            // add table metadata args from the schema\n            const tableSchema = schema.table || {} as any;\n            const table: TableMetadataArgs = {\n                target: schema.target || schema.name,\n                name: tableSchema.name,\n                type: tableSchema.type || \"regular\",\n                orderBy: tableSchema.orderBy\n            };\n            metadataArgsStorage.tables.push(table);\n\n            // add columns metadata args from the schema\n            Object.keys(schema.columns).forEach(columnName => {\n                const columnSchema = schema.columns[columnName];\n                let mode: ColumnMode = \"regular\";\n                if (columnSchema.createDate)\n                    mode = \"createDate\";\n                if (columnSchema.updateDate)\n                    mode = \"updateDate\";\n                if (columnSchema.version)\n                    mode = \"version\";\n                if (columnSchema.treeChildrenCount)\n                    mode = \"treeChildrenCount\";\n                if (columnSchema.treeLevel)\n                    mode = \"treeLevel\";\n\n                const column: ColumnMetadataArgs = {\n                    target: schema.target || schema.name,\n                    mode: mode,\n                    propertyName: columnName,\n                    options: {\n                        type: columnSchema.type,\n                        name: columnSchema.name,\n                        length: columnSchema.length,\n                        primary: columnSchema.primary,\n                        generated: columnSchema.generated,\n                        unique: columnSchema.unique,\n                        nullable: columnSchema.nullable,\n                        comment: columnSchema.comment,\n                        default: columnSchema.default,\n                        precision: columnSchema.precision,\n                        scale: columnSchema.scale\n                    }\n                };\n\n                metadataArgsStorage.columns.push(column);\n            });\n\n            // add relation metadata args from the schema\n            if (schema.relations) {\n                Object.keys(schema.relations).forEach(relationName => {\n                    const relationSchema = schema.relations[relationName];\n                    const relation: RelationMetadataArgs = {\n                        target: schema.target || schema.name,\n                        propertyName: relationName,\n                        relationType: relationSchema.type,\n                        isLazy: relationSchema.isLazy || false,\n                        type: relationSchema.target,\n                        inverseSideProperty: relationSchema.inverseSide,\n                        isTreeParent: relationSchema.isTreeParent,\n                        isTreeChildren: relationSchema.isTreeChildren,\n                        options: {\n                            cascadeAll: relationSchema.cascadeAll,\n                            cascadeInsert: relationSchema.cascadeInsert,\n                            cascadeUpdate: relationSchema.cascadeUpdate,\n                            cascadeRemove: relationSchema.cascadeRemove,\n                            nullable: relationSchema.nullable,\n                            onDelete: relationSchema.onDelete\n                        }\n                    };\n\n                    metadataArgsStorage.relations.push(relation);\n\n                    // add join column\n                    if (relationSchema.joinColumn) {\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        } else {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinColumn.name,\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        }\n                    }\n\n                    // add join table\n                    if (relationSchema.joinTable) {\n                        if (typeof relationSchema.joinTable === \"boolean\") {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        } else {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinTable.name,\n                                joinColumns: ((relationSchema.joinTable as JoinTableOptions).joinColumn ? [(relationSchema.joinTable as JoinTableOptions).joinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).joinColumns) as any,\n                                inverseJoinColumns: ((relationSchema.joinTable as JoinTableOptions).inverseJoinColumn ? [(relationSchema.joinTable as JoinTableOptions).inverseJoinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        }\n                    }\n                });\n            }\n        });\n\n        return metadataArgsStorage;\n    }\n}","import {importClassesFromDirectories, importJsonsFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {getFromContainer} from \"../container\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\nimport {EntitySchemaTransformer} from \"../entity-schema/EntitySchemaTransformer\";\nimport {Connection} from \"./Connection\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\n\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    buildMigrations(migrations: Function[]|string[]): MigrationInterface[] {\n        const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\n        const allMigrationClasses = [...migrationClasses, ...importClassesFromDirectories(migrationDirectories)];\n        return allMigrationClasses.map(migrationClass => getFromContainer<MigrationInterface>(migrationClass));\n    }\n\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    buildSubscribers(subscribers: Function[]|string[]): EntitySubscriberInterface<any>[] {\n        const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\n        const allSubscriberClasses = [...subscriberClasses, ...importClassesFromDirectories(subscriberDirectories)];\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map(metadata => getFromContainer<EntitySubscriberInterface<any>>(metadata.target));\n    }\n\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    buildEntityMetadatas(entities: Function[]|string[], schemas: EntitySchema[]|string[]): EntityMetadata[] {\n        const [entityClasses, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\n        const allEntityClasses = [...entityClasses, ...importClassesFromDirectories(entityDirectories)];\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n\n        const [entitySchemaClasses, entitySchemaDirectories] = OrmUtils.splitClassesAndStrings(schemas || []);\n        const allEntitySchemaClasses = [...entitySchemaClasses, ...importJsonsFromDirectories(entitySchemaDirectories)];\n        const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(allEntitySchemaClasses);\n        const schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\n    }\n\n}","import {Driver} from \"../driver/Driver\";\nimport {Repository} from \"../repository/Repository\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\nimport {RepositoryNotFoundError} from \"./error/RepositoryNotFoundError\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\nimport {CannotExecuteNotConnectedError} from \"./error/CannotExecuteNotConnectedError\";\nimport {CannotConnectAlreadyConnectedError} from \"./error/CannotConnectAlreadyConnectedError\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {RepositoryNotTreeError} from \"./error/RepositoryNotTreeError\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Logger} from \"../logger/Logger\";\nimport {EntityMetadataNotFound} from \"../metadata-args/error/EntityMetadataNotFound\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {EntityMetadataValidator} from \"../metadata-builder/EntityMetadataValidator\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\nimport {EntityManagerFactory} from \"../entity-manager/EntityManagerFactory\";\nimport {LoggerFactory} from \"../logger/LoggerFactory\";\nimport {RepositoryFactory} from \"../repository/RepositoryFactory\";\nimport {DriverFactory} from \"../driver/DriverFactory\";\nimport {ConnectionMetadataBuilder} from \"./ConnectionMetadataBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Connection is a single database ORM connection to a specific DBMS database.\n * Its not required to be a database connection, depend on database type it can create connection pool.\n * You can have multiple connections to multiple databases in your application.\n */\nexport class Connection {\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     */\n    readonly name: string;\n\n    /**\n     * Connection options.\n     */\n    readonly options: ConnectionOptions;\n\n    /**\n     * Indicates if connection is initialized or not.\n     */\n    readonly isConnected = false;\n\n    /**\n     * Database driver used by this connection.\n     */\n    readonly driver: Driver;\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    readonly namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Logger used to log orm events.\n     */\n    readonly logger: Logger;\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = [];\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = [];\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: ConnectionOptions) {\n        this.name = options.name || \"default\";\n        this.options = options;\n        this.logger = new LoggerFactory().create(this.options.logging || {});\n        this.driver = new DriverFactory().create(this);\n        this.manager = new EntityManagerFactory().create(this);\n        this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!(this.manager instanceof MongoEntityManager))\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\n\n        return this.manager as MongoEntityManager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async connect(): Promise<this> {\n        if (this.isConnected)\n            throw new CannotConnectAlreadyConnectedError(this.name);\n\n        // connect to the database via its driver\n        await this.driver.connect();\n\n        // set connected status for the current connection\n        Object.assign(this, { isConnected: true });\n\n        try {\n\n            // build all metadatas registered in the current connection\n            this.buildMetadatas();\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchemaOnConnection && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\n                await this.dropDatabase();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.autoSchemaSync && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\n                await this.syncSchema();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.autoMigrationsRun && !PlatformTools.getEnvVariable(\"SKIP_MIGRATIONS_RUN\"))\n                await this.runMigrations();\n\n        } catch (error) {\n\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.close();\n            throw error;\n        }\n\n        return this;\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async close(): Promise<void> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        await this.driver.disconnect();\n        Object.assign(this, { isConnected: false });\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async syncSchema(dropBeforeSync: boolean = false): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        if (dropBeforeSync)\n            await this.dropDatabase();\n\n        const schemaBuilder = this.driver.createSchemaBuilder();\n        await schemaBuilder.build();\n    }\n\n    /**\n     * Returns sql queries generated by schema builder.\n     */\n    async logSyncSchema(): Promise<(string|{ up: string, down: string })[]> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const schemaBuilder = this.driver.createSchemaBuilder();\n        return schemaBuilder.log();\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    async dropDatabase(): Promise<void> {\n        const queryRunner = await this.createQueryRunner();\n        await queryRunner.clearDatabase();\n        await queryRunner.release();\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        await migrationExecutor.executePendingMigrations();\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        await migrationExecutor.undoLastMigration();\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: Function|string): boolean {\n        return !!this.findMetadata(target);\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: Function|string): EntityMetadata {\n        const metadata = this.findMetadata(target);\n        if (!metadata)\n            throw new EntityMetadataNotFound(target);\n\n        return metadata;\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity>(target: ObjectType<Entity>|string): Repository<Entity> {\n        return this.getMetadata(target).repository;\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @ClosureEntity decorator.\n     */\n    getTreeRepository<Entity>(target: ObjectType<Entity>|string): TreeRepository<Entity> {\n        if (this.driver instanceof MongoDriver)\n            throw new Error(`You cannot use getTreeRepository for MongoDB connections.`);\n\n        if (!this.hasMetadata(target))\n            throw new RepositoryNotFoundError(this.name, target);\n\n        const repository = this.getMetadata(target).repository;\n        if (!(repository instanceof TreeRepository))\n            throw new RepositoryNotTreeError(target);\n\n        return repository;\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity>(target: ObjectType<Entity>|string): MongoRepository<Entity> {\n        if (!(this.driver instanceof MongoDriver))\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\n\n        if (!this.hasMetadata(target))\n            throw new RepositoryNotFoundError(this.name, target);\n\n        return this.getMetadata(target).repository as MongoRepository<Entity>;\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository);\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>, queryRunner?: QueryRunner): Promise<any> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Transactions aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n        const transactionEntityManager = new EntityManagerFactory().create(this, usedQueryRunner);\n\n        try {\n            await usedQueryRunner.startTransaction();\n            const result = await runInTransaction(transactionEntityManager);\n            await usedQueryRunner.commitTransaction();\n            return result;\n\n        } catch (err) {\n            try { // we throw original error even if rollback thrown an error\n                await usedQueryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw err;\n\n        } finally {\n            if (!queryRunner) // if we used a new query runner provider then release it\n                await usedQueryRunner.release();\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[], queryRunner?: QueryRunner): Promise<any> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Queries aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n\n        try {\n            return await usedQueryRunner.query(query, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (!queryRunner)\n                await usedQueryRunner.release();\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityOrRunner?: ObjectType<Entity>|Function|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Query Builder is not supported by MongoDB.`);\n\n        if (alias) {\n            const metadata = this.getMetadata(entityOrRunner as Function|string);\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias);\n\n        } else {\n            return new SelectQueryBuilder(this, entityOrRunner as QueryRunner|undefined);\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     */\n    createQueryRunner(): QueryRunner {\n        return this.driver.createQueryRunner();\n    }\n\n    /**\n     * Creates a new entity manager with a single opened connection to the database.\n     * This may be useful if you want to perform all db queries within one connection.\n     * After finishing with entity manager, don't forget to release it (to release database connection back to pool).\n     */\n    createIsolatedManager(queryRunner?: QueryRunner): EntityManager {\n        if (queryRunner && queryRunner.manager && queryRunner.manager !== this.manager)\n            return queryRunner.manager;\n\n        if (!queryRunner)\n            queryRunner = this.createQueryRunner();\n\n        Object.assign(queryRunner, { manager: new EntityManagerFactory().create(this, queryRunner) });\n        return queryRunner.manager;\n    }\n\n    /**\n     * Creates a new repository with a single opened connection to the database.\n     * This may be useful if you want to perform all db queries within one connection.\n     * After finishing with entity manager, don't forget to release it (to release database connection back to pool).\n     */\n    createIsolatedRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, queryRunner?: QueryRunner): Repository<Entity> {\n        if (!queryRunner)\n            queryRunner = this.createQueryRunner();\n        return new RepositoryFactory().create(this, this.getMetadata(entityClassOrName), queryRunner);\n    }\n\n    // -------------------------------------------------------------------------\n    // Deprecated Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity in this connection.\n     *\n     * @deprecated use manager instead.\n     */\n    get entityManager(): EntityManager {\n        return this.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(target: Function|string): EntityMetadata|undefined {\n        return this.entityMetadatas.find(metadata => {\n            if (metadata.target === target)\n                return true;\n            if (typeof target === \"string\")\n                return metadata.name === target || metadata.tableName === target;\n\n            return false;\n        });\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected buildMetadatas(): void {\n\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\n        const repositoryFactory = new RepositoryFactory();\n        const entityMetadataValidator = new EntityMetadataValidator();\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        if (!PlatformTools.getEnvVariable(\"SKIP_SUBSCRIBERS_LOADING\")) {\n            const subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);\n            Object.assign(this, { subscribers: subscribers });\n        }\n\n        // build entity metadatas\n        const entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || [], this.options.entitySchemas || []);\n        Object.assign(this, { entityMetadatas: entityMetadatas });\n\n        // create migration instances\n        const migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);\n        Object.assign(this, { migrations: migrations });\n\n        // initialize repositories for all entity metadatas\n        this.entityMetadatas.forEach(metadata => {\n            metadata.repository = repositoryFactory.create(this, metadata);\n        });\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(this.entityMetadatas);\n    }\n\n}","/**\n * Thrown when consumer tries to get connection that does not exist.\n */\nexport class ConnectionNotFoundError extends Error {\n    name = \"ConnectionNotFoundError\";\n\n    constructor(name: string) {\n        super();\n        this.message = `Connection \"${name}\" was not found.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.\n */\nexport class AlreadyHasActiveConnectionError extends Error {\n    name = \"AlreadyHasActiveConnectionError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot create a new connection named \"${connectionName}\", because connection with such name ` +\n            `already exist and it now has an active connection session.`;\n        this.stack = new Error().stack;\n    }\n\n}","import {Connection} from \"./Connection\";\nimport {ConnectionNotFoundError} from \"./error/ConnectionNotFoundError\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {AlreadyHasActiveConnectionError} from \"./error/AlreadyHasActiveConnectionError\";\n\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n */\nexport class ConnectionManager {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * List of connections registered in this connection manager.\n     */\n    protected readonly connections: Connection[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name: string): boolean {\n        return !!this.connections.find(connection => connection.name === name);\n    }\n\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    get(name: string = \"default\"): Connection {\n        const connection = this.connections.find(connection => connection.name === name);\n        if (!connection)\n            throw new ConnectionNotFoundError(name);\n\n        return connection;\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    create(options: ConnectionOptions): Connection {\n\n        // (backward compatibility) if options are set in the driver section of connection options then merge them into the option\n        if (options.driver)\n            Object.assign(options, options.driver);\n\n        // check if such connection is already registered\n        const existConnection = this.connections.find(connection => connection.name === (options.name || \"default\"));\n        if (existConnection) {\n\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isConnected)\n                throw new AlreadyHasActiveConnectionError(options.name || \"default\");\n\n            // if its registered but closed then simply remove it from the manager\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\n        }\n\n        // create a new connection\n        const connection = new Connection(options);\n        this.connections.push(connection);\n        return connection;\n    }\n\n}\n","import {ConnectionOptions} from \"../ConnectionOptions\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\n\n/**\n * Reads connection options from environment variables.\n * Environment variables can have only a single connection.\n * Its strongly required to define TYPEORM_CONNECTION env variable.\n */\nexport class ConnectionOptionsEnvReader {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads connection options from environment variables.\n     */\n    read(): ConnectionOptions {\n        return {\n            type: PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\"),\n            url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\n            host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\n            port: PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\n            username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\n            password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\n            database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\n            sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\n            extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")) : undefined,\n            autoSchemaSync: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_AUTO_SCHEMA_SYNC\")),\n            entities: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\").split(\",\") : [],\n            migrations: PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS\") ? PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS\").split(\",\") : [],\n            subscribers: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\") ? PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\").split(\",\") : [],\n            entitySchemas: PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\").split(\",\") : [],\n            logging: {\n                logQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_QUERIES\")),\n                logFailedQueryError: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_FAILED_QUERIES\")),\n                logOnlyFailedQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_ONLY_FAILED_QUERIES\")),\n            },\n            cli: {\n                entitiesDir: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES_DIR\"),\n                migrationsDir: PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_DIR\"),\n                subscribersDir: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS_DIR\"),\n            }\n        };\n    }\n\n}\n","import * as fs from \"fs\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {ConnectionOptions} from \"../ConnectionOptions\";\n\n/**\n * Reads connection options defined in the yml file.\n */\nexport class ConnectionOptionsYmlReader {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads connection options from given yml file.\n     */\n    read(path: string): ConnectionOptions[] {\n        const ymlParser = PlatformTools.load(\"js-yaml\");\n        const config = ymlParser.safeLoad(fs.readFileSync(path));\n        return Object.keys(config).map(connectionName => {\n            return Object.assign({ name: connectionName }, config[connectionName]);\n        });\n    }\n\n}","import * as fs from \"fs\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {ConnectionOptions} from \"../ConnectionOptions\";\n\n/**\n * Reads connection options defined in the xml file.\n */\nexport class ConnectionOptionsXmlReader {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads connection options from given xml file.\n     */\n    async read(path: string): Promise<ConnectionOptions[]> {\n        const xml = await this.readXml(path);\n        return (xml.connection as any[]).map(connection => {\n            return {\n                name: connection.$.name,\n                type: connection.$.type,\n                url: connection.url ? connection.url[0] : undefined,\n                host: connection.host ? connection.host[0] : undefined,\n                port: connection.port && connection.port[0] ? parseInt(connection.port[0]) : undefined,\n                username: connection.username ? connection.username[0] : undefined,\n                password: connection.password ? connection.password[0] : undefined,\n                database: connection.database ? connection.database[0] : undefined,\n                sid: connection.sid ? connection.sid[0] : undefined,\n                extra: connection.extra ? connection.extra[0] : undefined,\n                autoSchemaSync: connection.autoSchemaSync ? connection.autoSchemaSync[0] : undefined,\n                entities: connection.entities ? connection.entities[0].entity : [],\n                subscribers: connection.subscribers ? connection.subscribers[0].entity : [],\n                entitySchemas: connection.entitySchemas ? connection.entitySchemas[0].entity : [],\n                logging: {\n                    logQueries: connection.logging && connection.logging[0].logQueries ? connection.logging[0].logQueries[0] : undefined,\n                    logFailedQueryError: connection.logging && connection.logging[0].logFailedQueryError ? connection.logging[0].logFailedQueryError[0] : undefined,\n                    logOnlyFailedQueries: connection.logging && connection.logging[0].logOnlyFailedQueries ? connection.logging[0].logOnlyFailedQueries[0] : undefined,\n                }\n            };\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads xml file contents and returns them in a promise.\n     */\n    protected readXml(path: string): Promise<any> {\n        const xmlParser = PlatformTools.load(\"xml2js\").parseString;\n        const xmlOptions = { trim: true, explicitRoot: false };\n        return new Promise((ok, fail) => {\n            xmlParser(fs.readFileSync(path), xmlOptions, (err: any, result: any) => err ? fail(err) : ok(result));\n        });\n    }\n\n}","import {ConnectionOptions} from \"./ConnectionOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {ConnectionOptionsEnvReader} from \"./options-reader/ConnectionOptionsEnvReader\";\nimport {ConnectionOptionsYmlReader} from \"./options-reader/ConnectionOptionsYmlReader\";\nimport {ConnectionOptionsXmlReader} from \"./options-reader/ConnectionOptionsXmlReader\";\n\n/**\n * Reads connection options from the ormconfig.\n * Can read from multiple file extensions including env, json, js, xml and yml.\n */\nexport class ConnectionOptionsReader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected options?: {\n        /**\n         * Directory where ormconfig should be read from.\n         * By default its your application root (where your app package.json is located).\n         */\n        root?: string,\n\n        /**\n         * Filename of the ormconfig configuration. By default its equal to \"ormconfig\".\n         */\n        configName?: string\n    }) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns all connection options read from the ormconfig.\n     */\n    async all(): Promise<ConnectionOptions[]> {\n        return this.load();\n    }\n\n    /**\n     * Gets a connection with a given name read from ormconfig.\n     * If connection with such name would not be found then it throw error.\n     */\n    async get(name: string): Promise<ConnectionOptions> {\n        const allOptions = await this.all();\n        const targetOptions = allOptions.find(options => options.name === name || (name === \"default\" && !options.name));\n        if (!targetOptions)\n            throw new Error(`Cannot find connection ${name} because its not defined in any orm configuration files.`);\n\n        return targetOptions;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all connection options from a configuration file.\n     *\n     * todo: get in count NODE_ENV somehow\n     */\n    protected async load(): Promise<ConnectionOptions[]> {\n\n        // try to find any of following configuration formats\n        const foundFileFormat = [\"env\", \"js\", \"json\", \"yml\", \"yaml\", \"xml\"].find(format => {\n            return PlatformTools.fileExist(this.baseFilePath + \".\" + format);\n        });\n\n        // if .env file found then load all its variables into process.env using dotenv package\n        if (foundFileFormat === \"env\") {\n            const dotenv = PlatformTools.load(\"dotenv\");\n            dotenv.config({ path: this.baseFilePath + \".env\" });\n        }\n\n        // try to find connection options from any of available sources of configuration\n        let connectionOptions: ConnectionOptions|ConnectionOptions[];\n        if (PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\")) {\n            connectionOptions = new ConnectionOptionsEnvReader().read();\n\n        } else if (foundFileFormat === \"js\") {\n            connectionOptions = PlatformTools.load(this.baseFilePath + \".js\");\n\n        } else if (foundFileFormat === \"json\") {\n            connectionOptions = PlatformTools.load(this.baseFilePath + \".json\");\n\n        } else if (foundFileFormat === \"yml\") {\n            connectionOptions = new ConnectionOptionsYmlReader().read(this.baseFilePath + \".yml\");\n\n        } else if (foundFileFormat === \"yaml\") {\n            connectionOptions = new ConnectionOptionsYmlReader().read(this.baseFilePath + \".yaml\");\n\n        } else if (foundFileFormat === \"xml\") {\n            connectionOptions = await new ConnectionOptionsXmlReader().read(this.baseFilePath + \".xml\");\n\n        } else {\n            throw new Error(`No connection options were found in any of configurations file.`);\n        }\n\n        // normalize and return connection options\n        return this.normalizeConnectionOptions(connectionOptions);\n    }\n\n    /**\n     * Normalize connection options.\n     */\n    protected normalizeConnectionOptions(connectionOptions: ConnectionOptions|ConnectionOptions[]): ConnectionOptions[] {\n        if (!(connectionOptions instanceof Array))\n            connectionOptions = [connectionOptions];\n\n        connectionOptions.forEach(options => {\n\n            if (options.entities) {\n                const entities = (options.entities as any[]).map(entity => {\n                    if (typeof entity === \"string\" || entity.substr(0, 1) !== \"/\")\n                        return this.baseFilePath + \"/\" + entity;\n\n                    return entity;\n                });\n                Object.assign(connectionOptions, { entities: entities });\n            }\n            if (options.subscribers) {\n                const subscribers = (options.subscribers as any[]).map(subscriber => {\n                    if (typeof subscriber === \"string\" || subscriber.substr(0, 1) !== \"/\")\n                        return this.baseFilePath + \"/\" + subscriber;\n\n                    return subscriber;\n                });\n                Object.assign(connectionOptions, { subscribers: subscribers });\n            }\n            if (options.migrations) {\n                const migrations = (options.migrations as any[]).map(migration => {\n                    if (typeof migration === \"string\" || migration.substr(0, 1) !== \"/\")\n                        return this.baseFilePath + \"/\" + migration;\n\n                    return migration;\n                });\n                Object.assign(connectionOptions, { migrations: migrations });\n            }\n        });\n\n        return connectionOptions;\n    }\n\n    /**\n     * Gets directory where configuration file should be located and configuration file name without extension.\n     */\n    protected get baseFilePath(): string {\n        return this.baseDirectory + \"/\" + this.baseConfigName;\n    }\n\n    /**\n     * Gets directory where configuration file should be located.\n     */\n    protected get baseDirectory(): string {\n        if (this.options && this.options.root)\n            return this.options.root;\n\n        return PlatformTools.load(\"app-root-path\").path;\n    }\n\n    /**\n     * Gets configuration file name.\n     */\n    protected get baseConfigName(): string {\n        if (this.options && this.options.configName)\n            return this.options.configName;\n\n        return \"ormconfig\";\n    }\n\n}","export class GeneratedOnlyForPrimaryError extends Error {\n    name = \"GeneratedOnlyForPrimaryError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        this.message = `Column for property ${(<any>object.constructor).name}#${propertyName} cannot have a generated ` +\n            `value because its not a primary column. Try to use @PrimaryColumn decorator.`;\n    }\n\n}","/**\n * Column options specific to all column types.\n */\nexport interface ColumnCommonOptions {\n\n    /**\n     * Column name in the database.\n     */\n    name?: string;\n\n    /**\n     * Indicates if this column is a primary key.\n     * Same can be achieved when @PrimaryColumn decorator is used.\n     */\n    primary?: boolean;\n\n    /**\n     * Specifies if column's value must be unique or not.\n     */\n    unique?: boolean;\n\n    /**\n     * Indicates if column's value can be set to NULL.\n     */\n    nullable?: boolean;\n\n    /**\n     * Default database value.\n     */\n    default?: any;\n\n    /**\n     * Column comment. Not supported by all database types.\n     */\n    comment?: string;\n\n    /**\n     * Indicates if this column is an array.\n     * Can be simply set to true or array length can be specified.\n     * Supported only by postgres.\n     */\n    array?: boolean|string;\n\n}","/**\n * Options for columns that can define a length of the column type.\n */\nexport interface ColumnWithLengthOptions {\n\n    /**\n     * Column type's length.\n     * For example type = \"varchar\" and length = \"100\" means ORM will create a column with type varchar(100).\n     */\n    length?: string|number;\n\n}\n","/**\n * Options for numeric column types where user can specify scale and precision.\n */\nexport interface ColumnNumericOptions {\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n}\n","/**\n * Column options for enum-typed columns.\n */\nexport interface ColumnEnumOptions {\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: any[];\n\n}","/**\n * Column options specific to all column types.\n */\nexport interface ColumnEmbeddedOptions {\n\n    /**\n     * Embedded column prefix.\n     */\n    prefix?: string;\n\n}\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {GeneratedOnlyForPrimaryError} from \"../error/GeneratedOnlyForPrimaryError\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {\n    ColumnType,\n    SimpleColumnType,\n    WithLengthColumnType,\n    WithPrecisionColumnType\n} from \"../../driver/types/ColumnTypes\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\nimport {ColumnCommonOptions} from \"../options/ColumnCommonOptions\";\nimport {ColumnWithLengthOptions} from \"../options/ColumnWithLengthOptions\";\nimport {ColumnNumericOptions} from \"../options/ColumnNumericOptions\";\nimport {ColumnEnumOptions} from \"../options/ColumnEnumOptions\";\nimport {ColumnEmbeddedOptions} from \"../options/ColumnEmbeddedOptions\";\nimport {EmbeddedMetadataArgs} from \"../../metadata-args/EmbeddedMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\n * decorator will be persisted to the database when entity be saved.\n */\nexport function Column(): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(options: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: SimpleColumnType, options?: ColumnCommonOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithLengthColumnType, options?: ColumnCommonOptions & ColumnWithLengthOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithPrecisionColumnType, options?: ColumnCommonOptions & ColumnNumericOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: \"enum\", options?: ColumnCommonOptions & ColumnEnumOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n *\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\n * embedded will be mapped to it from the single table.\n */\nexport function Column(type: (type?: any) => Function, options?: ColumnEmbeddedOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(typeOrOptions?: ((type?: any) => Function)|ColumnType|(ColumnOptions&ColumnEmbeddedOptions), options?: (ColumnOptions&ColumnEmbeddedOptions)): Function {\n    let type: ColumnType|undefined;\n    if (typeof typeOrOptions === \"string\" || typeOrOptions instanceof Function) {\n        type = <ColumnType> typeOrOptions;\n\n    } else if (typeOrOptions) {\n        options = <ColumnOptions> typeOrOptions;\n        type = typeOrOptions.type;\n    }\n    return function (object: Object, propertyName: string) {\n\n        if (typeOrOptions instanceof Function) {\n\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n            const isArray = reflectMetadataType === Array || (options && options.array === true) ? true : false;\n\n            const args: EmbeddedMetadataArgs = {\n                target: object.constructor,\n                propertyName: propertyName,\n                isArray: isArray,\n                prefix: options && options.prefix !== undefined ? options.prefix : undefined,\n                type: typeOrOptions as (type?: any) => Function\n            };\n            getMetadataArgsStorage().embeddeds.push(args);\n\n        } else {\n            // if type is not given implicitly then try to guess it\n            if (!type) {\n                const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n                if (reflectMetadataType)\n                    type = reflectMetadataType; // todo: need to determine later on driver level\n            }\n\n            // if column options are not given then create a new empty options\n            if (!options) options = {} as ColumnOptions;\n\n            // check if there is no type in column options then set type from first function argument, or guessed one\n            if (!options.type && type)\n                options = Object.assign({ type: type } as ColumnOptions, options);\n\n            // check if auto increment is not set for simple column\n            if (options.generated)\n                throw new GeneratedOnlyForPrimaryError(object, propertyName);\n\n            // create and register a new column metadata\n            const args: ColumnMetadataArgs = {\n                target: object.constructor,\n                propertyName: propertyName,\n                mode: \"regular\",\n                options: options\n            };\n            getMetadataArgsStorage().columns.push(args);\n        }\n\n    };\n}\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * This column will store a creation date of the inserted object.\n * Creation date is generated and inserted only once,\n * at the first time when you create an object, the value is inserted into the table, and is never touched again.\n */\nexport function CreateDateColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // implicitly set a type, because this column's type cannot be anything else except date\n        // options = Object.assign({ type: Date } as ColumnOptions, options);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"createDate\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnType} from \"../../driver/types/ColumnTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * DiscriminatorColumn is a special type column used on entity class (not entity property)\n * and creates a special column which will contain an entity type.\n * This type is required for entities which use single table inheritance pattern.\n */\nexport function DiscriminatorColumn(discriminatorOptions: { name: string, type: ColumnType }): Function {\n    return function (target: Function) {\n\n        // if column options are not given then create a new empty options\n        const options: ColumnOptions = {\n            name: discriminatorOptions.name,\n            type: discriminatorOptions.type\n        };\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: target,\n            mode: \"discriminator\",\n            propertyName: discriminatorOptions.name,\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n","export class PrimaryColumnCannotBeNullableError extends Error {\n    name = \"PrimaryColumnCannotBeNullableError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        this.message = `Primary column ${(<any>object.constructor).name}#${propertyName} cannot be nullable. ` +\n            `Its not allowed for primary keys. Try to remove nullable option.`;\n    }\n\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {PrimaryColumnCannotBeNullableError} from \"../error/PrimaryColumnCannotBeNullableError\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n// todo: add overloads for PrimaryGeneratedColumn(generationType: \"sequence\"|\"uuid\" = \"sequence\", options?: ColumnOptions)\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n * This column creates is an alias for @PrimaryColumn(\"int\", { generated: true }).\n */\nexport function PrimaryGeneratedColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // check if there is no type in column options then set the int type - by default for auto generated column\n            options = Object.assign({type: \"int\"} as ColumnOptions, options);\n\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\n\n        // implicitly set a primary and generated to column options\n        options = Object.assign({ primary: true, generated: true } as ColumnOptions, options);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"regular\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n","export class ColumnTypeUndefinedError extends Error {\n    name = \"ColumnTypeUndefinedError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        this.message = `Column type for ${(<any>object.constructor).name}#${propertyName} is not defined or cannot be guessed. ` +\n            `Try to implicitly provide a column type to @Column decorator.`;\n    }\n\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnType} from \"../../driver/types/ColumnTypes\";\nimport {ColumnTypeUndefinedError} from \"../error/ColumnTypeUndefinedError\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {PrimaryColumnCannotBeNullableError} from \"../error/PrimaryColumnCannotBeNullableError\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(options?: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(type?: ColumnType, options?: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\n    let type: ColumnType|undefined;\n    if (typeof typeOrOptions === \"string\") {\n        type = <ColumnType> typeOrOptions;\n    } else {\n        options = <ColumnOptions> typeOrOptions;\n    }\n    return function (object: Object, propertyName: string) {\n\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if type is not given implicitly then try to guess it\n        if (!type) {\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n            if (reflectMetadataType)\n                type = reflectMetadataType;\n        }\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options = Object.assign({ type: type } as ColumnOptions, options);\n\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName);\n\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\n\n        // implicitly set a primary to column options\n        options = Object.assign({ primary: true } as ColumnOptions, options);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"regular\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * This column will store an update date of the updated object.\n * This date is being updated each time you persist the object.\n */\nexport function UpdateDateColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"updateDate\",\n            options: options ? options : {}\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * This column will store a number - version of the entity.\n * Every time your entity will be persisted, this number will be increased by one -\n * so you can organize visioning and update strategies of your entity.\n */\nexport function VersionColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"version\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Special type of column that is available only for MongoDB database.\n * Marks your entity's column to be an object id.\n */\nexport function ObjectIdColumn<T>(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n        options = Object.assign(options, {\n            primary: true,\n            name: options.name ? options.name : \"_id\"\n        });\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"objectId\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after this entity insertion.\n */\nexport function AfterInsert() {\n    return function (object: Object, propertyName: string) {\n\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_INSERT\n        };\n        getMetadataArgsStorage().entityListeners.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after entity is loaded.\n */\nexport function AfterLoad() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_LOAD\n        };\n        getMetadataArgsStorage().entityListeners.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after this entity removal.\n */\nexport function AfterRemove() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_REMOVE\n        };\n        getMetadataArgsStorage().entityListeners.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after this entity update.\n */\nexport function AfterUpdate() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_UPDATE\n        };\n        getMetadataArgsStorage().entityListeners.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied before this entity insertion.\n */\nexport function BeforeInsert() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_INSERT\n        };\n        getMetadataArgsStorage().entityListeners.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied before this entity removal.\n */\nexport function BeforeRemove() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_REMOVE\n        };\n        getMetadataArgsStorage().entityListeners.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied before this entity update.\n */\nexport function BeforeUpdate() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_UPDATE\n        };\n        getMetadataArgsStorage().entityListeners.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EntitySubscriberMetadataArgs} from \"../../metadata-args/EntitySubscriberMetadataArgs\";\n\n/**\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\n * occurs. Those classes must implement EventSubscriberInterface interface.\n */\nexport function EventSubscriber() {\n    return function (target: Function) {\n        const args: EntitySubscriberMetadataArgs = {\n            target: target\n        };\n        getMetadataArgsStorage().entitySubscribers.push(args);\n    };\n}","/**\n * Describes all composite index's options.\n */\nexport interface IndexOptions {\n\n    /**\n     * Indicates if this composite index must be unique or not.\n     */\n    unique?: boolean;\n\n    /**\n     * If true, the index only references documents with the specified field.\n     * These indexes use less space but behave differently in some situations (particularly sorts).\n     * This option is only supported for mongodb database.\n     */\n    sparse?: boolean;\n\n}","import {OrderByCondition} from \"../../find-options/OrderByCondition\";\n\n/**\n * Describes all entity's options.\n */\nexport interface EntityOptions {\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     * It is used only during table creation.\n     * If you update this value and table is already created, it will not change table's engine type.\n     * Note that not all databases support this option.\n     */\n    engine?: string;\n\n    /**\n     * Specifies if this table will be skipped during schema synchronization.\n     */\n    skipSync?: boolean;\n\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {RelationCountMetadataArgs} from \"../../metadata-args/RelationCountMetadataArgs\";\nimport {QueryBuilder} from \"../../query-builder/QueryBuilder\";\nimport {SelectQueryBuilder} from \"../../query-builder/SelectQueryBuilder\";\n\n/**\n * Holds a number of children in the closure table of the column.\n */\nexport function RelationCount<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): Function {\n    return function (object: Object, propertyName: string) {\n        const args: RelationCountMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory\n        };\n        getMetadataArgsStorage().relationCounts.push(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {JoinColumnOptions} from \"../options/JoinColumnOptions\";\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(): Function;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions): Function;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions[]): Function;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(optionsOrOptionsArray?: JoinColumnOptions|JoinColumnOptions[]): Function {\n    return function (object: Object, propertyName: string) {\n        const options = optionsOrOptionsArray instanceof Array ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\n        options.forEach(options => {\n            const args: JoinColumnMetadataArgs = {\n                target: object.constructor,\n                propertyName: propertyName,\n                name: options.name,\n                referencedColumnName: options.referencedColumnName\n            };\n            getMetadataArgsStorage().joinColumns.push(args);\n        });\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {JoinTableOptions} from \"../options/JoinTableOptions\";\nimport {JoinTableMetadataArgs} from \"../../metadata-args/JoinTableMetadataArgs\";\nimport {JoinTableMultipleColumnsOptions} from \"../options/JoinTableMuplipleColumnsOptions\";\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(): Function;\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options: JoinTableOptions): Function;\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options: JoinTableMultipleColumnsOptions): Function;\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options?: JoinTableOptions|JoinTableMultipleColumnsOptions): Function {\n    return function (object: Object, propertyName: string) {\n        options = options || {} as JoinTableOptions|JoinTableMultipleColumnsOptions;\n        const args: JoinTableMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            joinColumns: (options && (options as JoinTableOptions).joinColumn ? [(options as JoinTableOptions).joinColumn!] : (options as JoinTableMultipleColumnsOptions).joinColumns) as any,\n            inverseJoinColumns: (options && (options as JoinTableOptions).inverseJoinColumn ? [(options as JoinTableOptions).inverseJoinColumn!] : (options as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\n        };\n        getMetadataArgsStorage().joinTables.push(args);\n    };\n}\n\n","import {RelationOptions} from \"../options/RelationOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>, options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function;\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\n                              inverseSide?: string|((object: T) => any),\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function;\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\n                              inverseSideOrOptions?: string|((object: T) => any)|{ cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean },\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-many\",\n            isLazy: isLazy,\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        };\n        getMetadataArgsStorage().relations.push(args);\n    };\n}\n\n","import {RelationOptions} from \"../options/RelationOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                             inverseSide?: string|((object: T) => any),\n                             options?: RelationOptions): Function;\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                             inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                             options?: RelationOptions): Function {\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-one\",\n            isLazy: isLazy,\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        };\n        getMetadataArgsStorage().relations.push(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\nimport {RelationOptions} from \"../options/RelationOptions\";\n\n// todo: make decorators which use inverse side string separate\n\n/**\n * One-to-many relation allows to create type of relation when Entity2 can have multiple instances of Entity1.\n * Entity1 have only one Entity2. Entity1 is an owner of the relationship, and storages Entity2 id on its own side.\n */\nexport function OneToMany<T>(typeFunction: (type?: any) => ObjectType<T>, inverseSide: string|((object: T) => any), options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: typeFunction,\n            inverseSideProperty: inverseSide,\n            options: options\n        };\n        getMetadataArgsStorage().relations.push(args);\n    };\n}\n\n","import {RelationOptions} from \"../options/RelationOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                            inverseSide?: string|((object: T) => any),\n                            options?: RelationOptions): Function;\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                            inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                            options?: RelationOptions): Function {\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-one\",\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        };\n        getMetadataArgsStorage().relations.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {RelationIdMetadataArgs} from \"../../metadata-args/RelationIdMetadataArgs\";\nimport {QueryBuilder} from \"../../query-builder/QueryBuilder\";\nimport {SelectQueryBuilder} from \"../../query-builder/SelectQueryBuilder\";\n\n/**\n * Special decorator used to extract relation id into separate entity property.\n */\nexport function RelationId<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): Function {\n    return function (object: Object, propertyName: string) {\n        const args: RelationIdMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory\n        };\n        getMetadataArgsStorage().relationIds.push(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(name?: string, options?: EntityOptions) {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            engine: options && options.engine ? options.engine : undefined,\n            skipSync: !!(options && options.skipSync === true)\n        };\n        getMetadataArgsStorage().tables.push(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * Abstract entity is a class that contains columns and relations for all entities that will inherit this entity.\n * Database table for the abstract entity is not created.\n *\n * @deprecated don't use it anymore. Now entity can extend any class with columns, no need to mark it with this decorator\n */\nexport function AbstractEntity() {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: undefined,\n            type: \"abstract\"\n        };\n        getMetadataArgsStorage().tables.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * Special type of the entity used in the class-table inherited tables.\n */\nexport function ClassEntityChild(tableName?: string, options?: EntityOptions) {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: tableName,\n            type: \"class-table-child\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            skipSync: !!(options && options.skipSync === true)\n        };\n        getMetadataArgsStorage().tables.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * Used on a entities that stores its children in a tree using closure design pattern.\n */\nexport function ClosureEntity(name?: string, options?: EntityOptions) {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: name,\n            type: \"closure\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            skipSync: !!(options && options.skipSync === true)\n        };\n        getMetadataArgsStorage().tables.push(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * This decorator is used on the entities that must be embedded into another entities.\n *\n * @deprecated don't use it anymore. Now entity can embed any class with columns, no need to mark it with this decorator\n */\nexport function EmbeddableEntity(): Function {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            type: \"embeddable\",\n            orderBy: undefined\n        };\n        getMetadataArgsStorage().tables.push(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * Special type of the table used in the single-table inherited tables.\n */\nexport function SingleEntityChild() {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: undefined,\n            type: \"single-table-child\",\n            orderBy: undefined\n        };\n        getMetadataArgsStorage().tables.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {InheritanceMetadataArgs} from \"../../metadata-args/InheritanceMetadataArgs\";\n\n/**\n * Sets what kind of table-inheritance table will use.\n */\nexport function TableInheritance(type: \"single-table\"|\"class-table\") {\n    return function (target: Function) {\n        const args: InheritanceMetadataArgs = {\n            target: target,\n            type: type\n        };\n        getMetadataArgsStorage().inheritances.push(args);\n    };\n}","import {getConnection, getMetadataArgsStorage} from \"../../index\";\n\n/**\n * Wraps some method into the transaction.\n * Note, method result will return a promise if this decorator applied.\n * Note, all database operations in the wrapped method should be executed using entity managed passed as a first parameter\n * into the wrapped method.\n * If you want to control at what position in your method parameters entity manager should be injected,\n * then use @TransactionEntityManager() decorator.\n */\nexport function Transaction(connectionName: string = \"default\"): Function {\n    return function (target: Object, methodName: string, descriptor: PropertyDescriptor) {\n\n        // save original method - we gonna need it\n        const originalMethod = descriptor.value;\n\n        // override method descriptor with proxy method\n        descriptor.value = function(...args: any[]) {\n            return getConnection(connectionName)\n                .manager\n                .transaction(entityManager => {\n\n                    // gets all @TransactionEntityManager() decorator usages for this method\n                    const indices = getMetadataArgsStorage()\n                        .filterTransactionEntityManagers(target.constructor)\n                        .filter(transactionEntityManager => transactionEntityManager.methodName === methodName)\n                        .map(transactionEntityManager => transactionEntityManager.index);\n\n                    let argsWithInjectedEntityManager: any[];\n                    if (indices.length) { // if there are @TransactionEntityManager() decorator usages the inject them\n                        argsWithInjectedEntityManager = [...args];\n                        indices.forEach(index => argsWithInjectedEntityManager.splice(index, 0, entityManager));\n\n                    } else { // otherwise inject it as a first parameter\n                        argsWithInjectedEntityManager = [entityManager, ...args];\n                    }\n\n                    return originalMethod.apply(this, argsWithInjectedEntityManager);\n                });\n        };\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TransactionEntityMetadataArgs} from \"../../metadata-args/TransactionEntityMetadataArgs\";\n\n/**\n * Injects transaction's entity manager into the method wrapped with @Transaction decorator.\n */\nexport function TransactionEntityManager(): Function {\n    return function (object: Object, methodName: string, index: number) {\n        const args: TransactionEntityMetadataArgs = {\n            target: object.constructor,\n            methodName: methodName,\n            index: index,\n        };\n        getMetadataArgsStorage().transactionEntityManagers.push(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Creates a \"level\"/\"length\" column to the table that holds a closure table.\n */\nexport function TreeLevelColumn(): Function {\n    return function (object: Object, propertyName: string) {\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"treeLevel\",\n            options: {}\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {RelationOptions} from \"../options/RelationOptions\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Marks a specific property of the class as a parent of the tree.\n */\nexport function TreeParent(options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            isTreeParent: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"many-to-one\",\n            type: () => object.constructor,\n            options: options\n        };\n        getMetadataArgsStorage().relations.push(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {RelationOptions} from \"../options/RelationOptions\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Marks a specific property of the class as a children of the tree.\n */\nexport function TreeChildren(options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        // add one-to-many relation for this \n        const args: RelationMetadataArgs = {\n            isTreeChildren: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: () => object.constructor,\n            options: options\n        };\n        getMetadataArgsStorage().relations.push(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../index\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\nimport {IndexOptions} from \"./options/IndexOptions\";\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(name: string, options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(name: string, fields: string[], options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(fields: string[], options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(name: string, fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(nameOrFieldsOrOptions: string|string[]|((object: any) => any[])|IndexOptions,\n                      maybeFieldsOrOptions?: ((object?: any) => (any[]|{ [key: string]: number }))|IndexOptions|string[],\n                      maybeOptions?: IndexOptions): Function {\n    const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\n    const fields = typeof nameOrFieldsOrOptions === \"string\" ? <((object?: any) => (any[]|{ [key: string]: number }))|string[]> maybeFieldsOrOptions : nameOrFieldsOrOptions as string[];\n    let options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\n    if (!options)\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? maybeFieldsOrOptions as IndexOptions : maybeOptions;\n\n    return function (clsOrObject: Function|Object, propertyName?: string) {\n        const args: IndexMetadataArgs = {\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\n            name: name,\n            columns: propertyName ? [propertyName] : fields,\n            unique: options && options.unique ? true : false\n        };\n        getMetadataArgsStorage().indices.push(args);\n    };\n}\n","import {ObjectType} from \"../common/ObjectType\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\n\n/**\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\n * embedded will be mapped to it from the single table.\n *\n * Array option works only in monogodb.\n *\n * @deprecated use @Column(type => EmbeddedModel) instead\n */\nexport function Embedded<T>(typeFunction: (type?: any) => ObjectType<T>, options?: { prefix?: string|boolean, array?: boolean }) {\n    return function (object: Object, propertyName: string) {\n\n        const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n        const isArray = reflectMetadataType === Array || (options && options.array === true) ? true : false;\n\n        const args: EmbeddedMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            isArray: isArray,\n            prefix: options && options.prefix !== undefined ? options.prefix : undefined,\n            type: typeFunction\n        };\n        getMetadataArgsStorage().embeddeds.push(args);\n    };\n}","import {getMetadataArgsStorage} from \"../index\";\nimport {DiscriminatorValueMetadataArgs} from \"../metadata-args/DiscriminatorValueMetadataArgs\";\n\n/**\n * If entity is a child table of some table, it should have a discriminator value.\n * This decorator sets custom discriminator value for the entity.\n */\nexport function DiscriminatorValue(value: any): Function {\n    return function (target: Function) {\n        const args: DiscriminatorValueMetadataArgs = {\n            target: target,\n            value: value\n        };\n        getMetadataArgsStorage().discriminatorValues.push(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../index\";\nimport {EntityRepositoryMetadataArgs} from \"../metadata-args/EntityRepositoryMetadataArgs\";\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can either manage some specific entity, either just be generic.\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\n */\nexport function EntityRepository(entity?: Function): Function {\n    return function (target: Function) {\n        const args: EntityRepositoryMetadataArgs = {\n            target: target,\n            entity: entity,\n        };\n        getMetadataArgsStorage().entityRepositories.push(args);\n    };\n}\n","import {Repository} from \"./Repository\";\nimport {getConnection} from \"../index\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {Connection} from \"../connection/Connection\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Base abstract entity for all entities, used in ActiveRecord patterns.\n */\nexport class BaseEntity {\n\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used in all static methods of the BaseEntity.\n     */\n    private static usedConnection?: Connection;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(): boolean {\n        return (this.constructor as any).getRepository().hasId(this);\n    }\n\n    /**\n     * Saves current entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save(): Promise<this> {\n        return (this.constructor as any).getRepository().save(this);\n    }\n\n    /**\n     * Removes current entity from the database.\n     */\n    remove(): Promise<this> {\n        return (this.constructor as any).getRepository().remove(this);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets connection to be used by entity.\n     */\n    static useConnection(connection: Connection) {\n        this.usedConnection = connection;\n    }\n\n    /**\n     * Gets current entity's Repository.\n     */\n    static getRepository<T extends BaseEntity>(this: ObjectType<T>, ): Repository<T> {\n        const connection: Connection = (this as any).usedConnection || getConnection();\n        return connection.getRepository<T>(this);\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    static get target(): Function|string {\n        return this.getRepository().target;\n    }\n\n    /**\n     * Checks entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    static hasId(entity: BaseEntity): boolean {\n        return this.getRepository().hasId(entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    static getId<T extends BaseEntity>(this: ObjectType<T>, entity: T): any {\n        return (this as any).getRepository().getId(entity);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    static createQueryBuilder<T extends BaseEntity>(this: ObjectType<T>, alias: string): SelectQueryBuilder<T> {\n        return (this as any).getRepository().createQueryBuilder(alias);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    static create<T extends BaseEntity>(this: ObjectType<T>): T {\n        return (this as any).getRepository().create();\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    static merge<T extends BaseEntity>(this: ObjectType<T>, mergeIntoEntity: T, ...entityLikes: DeepPartial<T>[]): T {\n        return (this as any).getRepository().merge(mergeIntoEntity, ...entityLikes);\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    static preload<T extends BaseEntity>(this: ObjectType<T>, entityLike: DeepPartial<T>): Promise<T|undefined> {\n        return (this as any).getRepository().preload(entityLike);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(this: ObjectType<T>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(this: ObjectType<T>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    static save<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return (this as any).getRepository().save(entityOrEntities as any, options);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     */\n    static update<T extends BaseEntity>(this: ObjectType<T>, conditions: Partial<T>, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void>;\n\n    /**\n     * Updates entity partially. Entity can be found by a given find options.\n     */\n    static update<T extends BaseEntity>(this: ObjectType<T>, findOptions: FindOneOptions<T>, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void>;\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     */\n    static update<T extends BaseEntity>(this: ObjectType<T>, conditionsOrFindOptions: Partial<T>|FindOneOptions<T>, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void> {\n        return (this as any).getRepository().update(conditionsOrFindOptions as any, partialEntity, options);\n    }\n\n    /**\n     * Updates entity partially. Entity will be found by a given id.\n     */\n    static updateById<T extends BaseEntity>(this: ObjectType<T>, id: any, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void> {\n        return (this as any).getRepository().updateById(id, partialEntity, options);\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entities: T[], options?: RemoveOptions): Promise<T[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entity: T, options?: RemoveOptions): Promise<T>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities: T|T[], options?: RemoveOptions): Promise<T|T[]> {\n        return (this as any).getRepository().remove(entityOrEntities as any, options);\n    }\n\n    /**\n     * Removes entity by a given entity id.\n     */\n    static removeById<T extends BaseEntity>(this: ObjectType<T>, id: any, options?: RemoveOptions): Promise<void> {\n        return (this as any).getRepository().removeById(id, options);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    static count<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    static count<T extends BaseEntity>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    static count<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<number> {\n        return (this as any).getRepository().count(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    static find<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    static find<T extends BaseEntity>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<T[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    static find<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<T[]> {\n        return (this as any).getRepository().find(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<[ T[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<[ T[], number ]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<[ T[], number ]> {\n        return (this as any).getRepository().findAndCount(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], options?: FindManyOptions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], conditions?: DeepPartial<T>): Promise<T[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<T[]> {\n        return (this as any).getRepository().findByIds(ids, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, options?: FindOneOptions<T>): Promise<T|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<T|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindOneOptions<T>|DeepPartial<T>): Promise<T|undefined> {\n        return (this as any).getRepository().findOne(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entity by given id.\n     * Optionally find options can be applied.\n     */\n    static findOneById<T extends BaseEntity>(this: ObjectType<T>, id: any, options?: FindOneOptions<T>): Promise<T|undefined>;\n\n    /**\n     * Finds entity by given id.\n     * Optionally conditions can be applied.\n     */\n    static findOneById<T extends BaseEntity>(this: ObjectType<T>, id: any, conditions?: DeepPartial<T>): Promise<T|undefined>;\n\n    /**\n     * Finds entity by given id.\n     * Optionally find options or conditions can be applied.\n     */\n    static findOneById<T extends BaseEntity>(this: ObjectType<T>, id: any, optionsOrConditions?: FindOneOptions<T>|DeepPartial<T>): Promise<T|undefined> {\n        return (this as any).getRepository().findOneById(id, optionsOrConditions as any);\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    static query<T extends BaseEntity>(this: ObjectType<T>, query: string, parameters?: any[]): Promise<any> {\n        return (this as any).getRepository().query(query, parameters);\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     */\n    static clear<T extends BaseEntity>(this: ObjectType<T>, ): Promise<void> {\n        return (this as any).getRepository().clear();\n    }\n\n}","/*!\n */\nimport {DriverOptions} from \"./driver/DriverOptions\";\nimport {ConnectionManager} from \"./connection/ConnectionManager\";\nimport {Connection} from \"./connection/Connection\";\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\nimport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nimport {getFromContainer} from \"./container\";\nimport {ObjectType} from \"./common/ObjectType\";\nimport {Repository} from \"./repository/Repository\";\nimport {EntityManager} from \"./entity-manager/EntityManager\";\nimport {PlatformTools} from \"./platform/PlatformTools\";\nimport {TreeRepository} from \"./repository/TreeRepository\";\nimport {MongoRepository} from \"./repository/MongoRepository\";\nimport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./container\";\nexport * from \"./common/ObjectType\";\nexport * from \"./common/ObjectLiteral\";\nexport * from \"./decorator/columns/Column\";\nexport * from \"./decorator/columns/CreateDateColumn\";\nexport * from \"./decorator/columns/DiscriminatorColumn\";\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\nexport * from \"./decorator/columns/PrimaryColumn\";\nexport * from \"./decorator/columns/UpdateDateColumn\";\nexport * from \"./decorator/columns/VersionColumn\";\nexport * from \"./decorator/columns/ObjectIdColumn\";\nexport * from \"./decorator/listeners/AfterInsert\";\nexport * from \"./decorator/listeners/AfterLoad\";\nexport * from \"./decorator/listeners/AfterRemove\";\nexport * from \"./decorator/listeners/AfterUpdate\";\nexport * from \"./decorator/listeners/BeforeInsert\";\nexport * from \"./decorator/listeners/BeforeRemove\";\nexport * from \"./decorator/listeners/BeforeUpdate\";\nexport * from \"./decorator/listeners/EventSubscriber\";\nexport * from \"./decorator/options/ColumnOptions\";\nexport * from \"./decorator/options/IndexOptions\";\nexport * from \"./decorator/options/JoinColumnOptions\";\nexport * from \"./decorator/options/JoinTableOptions\";\nexport * from \"./decorator/options/RelationOptions\";\nexport * from \"./decorator/options/EntityOptions\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/JoinColumn\";\nexport * from \"./decorator/relations/JoinTable\";\nexport * from \"./decorator/relations/ManyToMany\";\nexport * from \"./decorator/relations/ManyToOne\";\nexport * from \"./decorator/relations/OneToMany\";\nexport * from \"./decorator/relations/OneToOne\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/RelationId\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/AbstractEntity\";\nexport * from \"./decorator/entity/ClassEntityChild\";\nexport * from \"./decorator/entity/ClosureEntity\";\nexport * from \"./decorator/entity/EmbeddableEntity\";\nexport * from \"./decorator/entity/SingleEntityChild\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/TableInheritance\";\nexport * from \"./decorator/transaction/Transaction\";\nexport * from \"./decorator/transaction/TransactionEntityManager\";\nexport * from \"./decorator/tree/TreeLevelColumn\";\nexport * from \"./decorator/tree/TreeParent\";\nexport * from \"./decorator/tree/TreeChildren\";\nexport * from \"./decorator/Index\";\nexport * from \"./decorator/Embedded\";\nexport * from \"./decorator/DiscriminatorValue\";\nexport * from \"./decorator/EntityRepository\";\nexport * from \"./schema-builder/schema/ColumnSchema\";\nexport * from \"./schema-builder/schema/ForeignKeySchema\";\nexport * from \"./schema-builder/schema/IndexSchema\";\nexport * from \"./schema-builder/schema/PrimaryKeySchema\";\nexport * from \"./schema-builder/schema/TableSchema\";\nexport * from \"./driver/mongodb/typings\";\n\nexport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\nexport {Connection} from \"./connection/Connection\";\nexport {ConnectionManager} from \"./connection/ConnectionManager\";\nexport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nexport {DriverOptions} from \"./driver/DriverOptions\";\nexport {Driver} from \"./driver/Driver\";\nexport {QueryBuilder} from \"./query-builder/QueryBuilder\";\nexport {QueryRunner} from \"./query-runner/QueryRunner\";\nexport {EntityManager} from \"./entity-manager/EntityManager\";\nexport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\nexport {MigrationInterface} from \"./migration/MigrationInterface\";\nexport {DefaultNamingStrategy} from \"./naming-strategy/DefaultNamingStrategy\";\nexport {NamingStrategyInterface} from \"./naming-strategy/NamingStrategyInterface\";\nexport {Repository} from \"./repository/Repository\";\nexport {TreeRepository} from \"./repository/TreeRepository\";\nexport {MongoRepository} from \"./repository/MongoRepository\";\nexport {FindManyOptions} from \"./find-options/FindManyOptions\";\nexport {InsertEvent} from \"./subscriber/event/InsertEvent\";\nexport {UpdateEvent} from \"./subscriber/event/UpdateEvent\";\nexport {RemoveEvent} from \"./subscriber/event/RemoveEvent\";\nexport {EntitySubscriberInterface} from \"./subscriber/EntitySubscriberInterface\";\nexport {BaseEntity} from \"./repository/BaseEntity\";\n\n// -------------------------------------------------------------------------\n// Deprecated\n// -------------------------------------------------------------------------\n\n// -------------------------------------------------------------------------\n// Commonly used functionality\n// -------------------------------------------------------------------------\n\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    const globalScope = PlatformTools.getGlobalVariable();\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n\n    return globalScope.typeormMetadataArgsStorage;\n}\n\n/**\n * Gets a ConnectionManager which creates connections.\n */\nexport function getConnectionManager(): ConnectionManager {\n    return getFromContainer(ConnectionManager);\n}\n\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n */\nexport async function createConnection(options?: ConnectionOptions): Promise<Connection> {\n    if (!options)\n        options = await new ConnectionOptionsReader().get(\"default\");\n\n    return getConnectionManager().create(options).connect();\n}\n\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * All connections from the ormconfig will be created.\n */\nexport async function createConnections(options?: ConnectionOptions[]): Promise<Connection[]> {\n    if (!options)\n        options = await new ConnectionOptionsReader().all();\n\n    return Promise.all(options.map(options => getConnectionManager().create(options).connect()));\n}\n\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getConnection(connectionName: string = \"default\"): Connection {\n    return getConnectionManager().get(connectionName);\n}\n\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getEntityManager(connectionName: string = \"default\"): EntityManager {\n    return getConnectionManager().get(connectionName).manager;\n}\n\n/**\n * Gets repository for the given entity class.\n */\nexport function getRepository<Entity>(entityClass: ObjectType<Entity>|string, connectionName: string = \"default\"): Repository<Entity> {\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClass);\n}\n\n/**\n * Gets tree repository for the given entity class.\n */\nexport function getTreeRepository<Entity>(entityClass: ObjectType<Entity>|string, connectionName: string = \"default\"): TreeRepository<Entity> {\n    return getConnectionManager().get(connectionName).getTreeRepository<Entity>(entityClass);\n}\n\n/**\n * Gets mongodb repository for the given entity class or name.\n */\nexport function getMongoRepository<Entity>(entityClass: ObjectType<Entity>|string, connectionName: string = \"default\"): MongoRepository<Entity> {\n    return getConnectionManager().get(connectionName).getMongoRepository<Entity>(entityClass);\n}\n","export * from \"./typeorm/index\";","/*import {TableSchema} from \"./schema/TableSchema\";\n\nexport class Schema {\n\n    createTable(name: string): TableSchema;\n    createTable(entity: Function): TableSchema;\n    createTable(nameOrEntity: Function|string): TableSchema {\n        return new TableSchema(nameOrEntity as string);\n    }\n\n    updateTable(table: TableSchema): Promise<void> {\n\n    }\n\n    dropTable(name: string): Promise<void>;\n    dropTable(entity: Function): Promise<void>;\n    dropTable(nameOrEntity: Function|string): Promise<void> {\n    }\n\n\n    hasTable(name: string): Promise<boolean>;\n    hasTable(entity: Function): Promise<boolean>;\n    hasTable(nameOrEntity: Function|string): Promise<boolean> {\n    }\n\n    getTables(): Promise<TableSchema[]> {\n\n    }\n\n\n    getTableNames(): Promise<string[]> {\n\n    }\n\n}*/","import {QueryRunner} from \"./QueryRunner\";\nimport {Driver} from \"../driver/Driver\";\n\n/**\n * Represents functionality to provide a new query runners, and release old ones.\n * Also can provide always same query runner.\n *\n * todo: rename to QueryExecutor ?\n */\nexport class QueryRunnerProvider {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    protected reusableQueryRunner: QueryRunner;\n\n    protected reusableQueryRunnerPromise: Promise<QueryRunner>;\n\n    /**\n     * Indicates if this entity manager is released.\n     * Entity manager can be released only if custom queryRunnerProvider is provided.\n     * Once entity manager is released, its repositories and some other methods can't be used anymore.\n     */\n    protected _isReleased: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: Driver,\n                protected useSingleQueryRunner: boolean = false) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get isReleased() {\n        return this._isReleased;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Provides a new query runner used to run repository queries.\n     * If use useSingleQueryRunner mode is enabled then reusable query runner will be provided instead.\n     */\n    // provide(): Promise<QueryRunner> {\n        // if (this.useSingleQueryRunner) {\n        //     if (!this.reusableQueryRunner) {\n        //         if (!this.reusableQueryRunnerPromise) {\n        //             // we do this because this method can be created multiple times\n        //             // this will lead to multiple query runner creations\n        //             this.reusableQueryRunnerPromise = this.driver\n        //                 .createQueryRunner()\n        //                 .then(reusableQueryRunner => {\n        //                     this.reusableQueryRunner = reusableQueryRunner;\n        //                     return reusableQueryRunner;\n        //                 });\n        //         }\n        //         return this.reusableQueryRunnerPromise;\n        //     }\n        //     return Promise.resolve(this.reusableQueryRunner);\n        // }\n        // return this.driver.createQueryRunner();\n    // }\n\n    /**\n     * Releases reused query runner.\n     */\n    async releaseReused(): Promise<void> {\n        this._isReleased = true;\n        if (this.reusableQueryRunner)\n            return this.reusableQueryRunner.release();\n    }\n\n}","/**\n * Thrown when connection is trying to be created automatically from connection options found in the ormconfig.json\n * or environment variables, but failed due to missing these configurations.\n */\nexport class CannotDetermineConnectionOptionsError extends Error {\n    name = \"CannotDetermineConnectionOptionsError\";\n\n    constructor() {\n        super();\n        this.message = `Cannot create connection, because connection options are missing. ` +\n            `You either need to explicitly pass connection options, either create a ormconfig.json with connection options ` +\n            `and \"default\" connection name, either to set proper environment variables. Also, if you are using environment-specific ` +\n            `configurations in your ormconfig.json make sure your are running under correct NODE_ENV.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to access entity manager before connection is established.\n */\nexport class CannotGetEntityManagerNotConnectedError extends Error {\n    name = \"CannotGetEntityManagerNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot get entity manager for \"${connectionName}\" connection because connection is not yet established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to import entities / entity schemas / subscribers / naming strategies after connection\n * is established.\n */\nexport class CannotImportAlreadyConnectedError extends Error {\n    name = \"CannotImportAlreadyConnected\";\n\n    constructor(importStuff: string, connectionName: string) {\n        super();\n        this.message = `Cannot import ${importStuff} for \"${connectionName}\" connection because connection to the database already established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to run/revert migrations without connection set.\n */\nexport class CannotRunMigrationNotConnectedError extends Error {\n    name = \"CannotRunMigrationNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot run/revert migrations on \"${connectionName}\" connection because connection is not yet established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to sync a database schema after connection is established\n */\nexport class CannotSyncNotConnectedError extends Error {\n    name = \"CannotSyncNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot sync schema of the \"${connectionName}\" connection because connection is not yet established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to change used naming strategy after connection is established.\n */\nexport class CannotUseNamingStrategyNotConnectedError extends Error {\n    name = \"CannotUseNamingStrategyNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot use a given naming strategy for \"${connectionName}\" connection because connection to the database already established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to use naming strategy that does not exist.\n */\nexport class NamingStrategyNotFoundError extends Error {\n    name = \"NamingStrategyNotFoundError\";\n\n    constructor(strategyName: string|Function, connectionName: string) {\n        super();\n        const name = strategyName instanceof Function ? (strategyName as any).name : strategyName;\n        this.message = `Naming strategy \"${name}\" was not found. Looks like this naming strategy does not ` +\n            `exist or it was not registered in current \"${connectionName}\" connection?`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to access repository before connection is established.\n */\nexport class NoConnectionForRepositoryError extends Error {\n    name = \"NoConnectionForRepositoryError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot get a Repository for \"${connectionName} connection, because connection with the database ` +\n            `is not established yet. Call connection#connect method to establish connection.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown if some data type is not supported by a driver.\n */\nexport class DataTypeNotSupportedByDriverError extends Error {\n    name = \"DataTypeNotSupportedByDriverError\";\n\n    constructor(dataType: string, driverName: string) {\n        super();\n        this.message = `Specified type (${dataType}) is not supported by ${driverName} driver.`;\n    }\n\n}","/**\n * Thrown when some unexpected error occur on driver packages load.\n */\nexport class DriverPackageLoadError extends Error {\n    name = \"DriverPackageLoadError\";\n\n    constructor() {\n        super();\n        this.message = `Cannot load driver dependencies. Try to install all required dependencies.`;\n    }\n\n}","/**\n * Thrown if database driver does not support pooling.\n */\nexport class DriverPoolingNotSupportedError extends Error {\n    name = \"DriverPoolingNotSupportedError\";\n\n    constructor(driverName: string) {\n        super();\n        this.message = `Connection pooling is not supported by (${driverName}) driver.`;\n    }\n\n}","// -------------------------------------------------------------------------\n// Numeric Types\n// -------------------------------------------------------------------------\n\n/**\n * A very small integer that can be signed or unsigned.\n * If signed, the allowable range is from -128 to 127.\n * If unsigned, the allowable range is from 0 to 255.\n * You can specify a width of up to 4 digits.\n */\nexport type TinyintColumnType = \"tinyint\";\n\n/**\n * A small integer that can be signed or unsigned.\n * If signed, the allowable range is from -32768 to 32767.\n * If unsigned, the allowable range is from 0 to 65535.\n * You can specify a width of up to 5 digits.\n */\nexport type SmallintColumnType = \"smallint\";\n\n/**\n * A medium-sized integer that can be signed or unsigned.\n * If signed, the allowable range is from -8388608 to 8388607.\n * If unsigned, the allowable range is from 0 to 16777215.\n * You can specify a width of up to 9 digits.\n */\nexport type MediumintColumnType = \"mediumint\";\n\n/**\n * A normal-sized integer that can be signed or unsigned.\n * If signed, the allowable range is from -2147483648 to 2147483647.\n * If unsigned, the allowable range is from 0 to 4294967295.\n * You can specify a width of up to 11 digits.\n */\nexport type IntegerColumnType = \"int\";\n\n/**\n * A large integer that can be signed or unsigned.\n * If signed, the allowable range is from -9223372036854775808 to 9223372036854775807.\n * If unsigned, the allowable range is from 0 to 18446744073709551615.\n * You can specify a width of up to 20 digits.\n */\nexport type BigintColumnType = \"bigint\";\n\n/**\n * A floating-point number that cannot be unsigned.\n * You can define the display length (M) and the number of decimals (D).\n * This is not required and will default to 10,2,\n * where 2 is the number of decimals and 10 is the total number of digits (including decimals).\n * Decimal precision can go to 24 places for a FLOAT.\n */\nexport type FloatColumnType = \"float\";\n\n/**\n * A double precision floating-point number that cannot be unsigned.\n * You can define the display length (M) and the number of decimals (D).\n * This is not required and will default to 16,4, where 4 is the number of decimals.\n * Decimal precision can go to 53 places for a DOUBLE. REAL is a synonym for DOUBLE.\n */\nexport type DoubleColumnType = \"real\"|\"double\";\n\n/**\n * An unpacked floating-point number that cannot be unsigned.\n * In unpacked decimals, each decimal corresponds to one byte.\n * Defining the display length (M) and the number of decimals (D) is required.\n * NUMERIC is a synonym for DECIMAL.\n */\nexport type DecimalColumnType = \"numeric\"|\"decimal\";\n\n// -------------------------------------------------------------------------\n// Character Types\n// -------------------------------------------------------------------------\n\n/**\n * A variable-length string between 1 and 255 characters in length; for example VARCHAR(25).\n * You must define a length when creating a VARCHAR field.\n */\nexport type VarcharColumnType = \"varchar\";\n\n/**\n * A fixed-length string between 1 and 255 characters in length (for example CHAR(5)),\n * right-padded with spaces to the specified length when stored.\n * Defining a length is not required, but the default is 1.\n */\nexport type CharColumnType = \"char\";\n\n/**\n * A BLOB or TEXT column with a maximum length of 255 characters.\n * You do not specify a length with TINYBLOB or TINYTEXT.\n */\nexport type TinyTextColumnType = \"tinyblob\"|\"tinytext\";\n\n/**\n * A BLOB or TEXT column with a maximum length of 16777215 characters.\n * You do not specify a length with MEDIUMBLOB or MEDIUMTEXT.\n */\nexport type MediumTextColumnType = \"mediumblob\"|\"mediumtext\";\n\n/**\n * A field with a maximum length of 65535 characters.\n * BLOBs are \"Binary Large Objects\" and are used to store large amounts of binary data, such as images or other types of files.\n * Fields defined as TEXT also hold large amounts of data;\n * the difference between the two is that sorts and comparisons on stored data are case sensitive on BLOBs and are not case sensitive in TEXT fields.\n * You do not specify a length with BLOB or TEXT.\n */\nexport type TextColumnType = \"blob\"|\"text\";\n\n/**\n * A BLOB or TEXT column with a maximum length of 4294967295 characters.\n * You do not specify a length with LONGBLOB or LONGTEXT.\n */\nexport type LongTextColumnType = \"longblob\"|\"longtext\";\n\n// -------------------------------------------------------------------------\n// Date/Time Types\n// -------------------------------------------------------------------------\n\n/**\n * A date in YYYY-MM-DD format, between 1000-01-01 and 9999-12-31.\n * For example, December 30th, 1973 would be stored as 1973-12-30.\n */\nexport type DateColumnType = \"date\";\n\n/**\n * A date and time combination in YYYY-MM-DD HH:MM:SS format,\n * between 1000-01-01 00:00:00 and 9999-12-31 23:59:59.\n * For example, 3:30 in the afternoon on December 30th, 1973 would be stored as 1973-12-30 15:30:00.\n */\nexport type DatetimeColumnType = \"datetime\";\n\n/**\n * A timestamp between midnight, January 1, 1970 and sometime in 2037.\n * This looks like the previous DATETIME format, only without the hyphens between numbers;\n * 3:30 in the afternoon on December 30th, 1973 would be stored as 19731230153000 ( YYYYMMDDHHMMSS ).\n */\nexport type TimestampColumnType = \"timestamp\";\n\n/**\n * Stores the time in HH:MM:SS format.\n */\nexport type TimeColumnType = \"time\";\n\n/**\n * Stores a year in 2-digit or 4-digit format.\n * If the length is specified as 2 (for example YEAR(2)), YEAR can be 1970 to 2069 (70 to 69).\n * If the length is specified as 4, YEAR can be 1901 to 2155.\n * The default length is 4.\n */\nexport type YearColumnType = \"year\";\n\n// -------------------------------------------------------------------------\n// Enumerated Type\n// -------------------------------------------------------------------------\n\n/**\n * An enumeration, which is a fancy term for list.\n * When defining an ENUM, you are creating a list of items from which the value must be selected (or it can be NULL).\n * For example, if you wanted your field to contain \"A\" or \"B\" or \"C\",\n * you would define your ENUM as ENUM ('A', 'B', 'C') and only those values (or NULL) could ever populate that field.\n */\nexport type EnumColumnType = \"enum\";\n\n// -------------------------------------------------------------------------\n// Merged Types\n// -------------------------------------------------------------------------\n\n/**\n * Column types where column length is used.\n */\nexport type WithLengthColumnType =\n    VarcharColumnType|\n    CharColumnType|\n    YearColumnType;\n\n/**\n * Column types where precision is used.\n */\nexport type NumericColumnType =\n    FloatColumnType|\n    DoubleColumnType|\n    DecimalColumnType;\n\n/**\n * Column types where time options are used.\n */\nexport type WithTimeColumnType =\n    DatetimeColumnType|\n    TimestampColumnType;\n\n/**\n * All other column types without extra options used.\n */\nexport type SimpleColumnType =\n    TinyintColumnType|\n    SmallintColumnType|\n    MediumintColumnType|\n    IntegerColumnType|\n    BigintColumnType|\n    TinyTextColumnType|\n    MediumTextColumnType|\n    TextColumnType|\n    LongTextColumnType|\n    DateColumnType|\n    TimeColumnType;\n\n/**\n * All column types supported by a database.\n */\nexport type AllColumnType =\n    SimpleColumnType|\n    WithLengthColumnType|\n    NumericColumnType|\n    WithTimeColumnType|\n    EnumColumnType;","// -------------------------------------------------------------------------\n// Numeric Types\n// -------------------------------------------------------------------------\n\n/**\n * Numeric type.\n * Small-range integer type.\n * Size: 2 bytes.\n * Range: -32768 to +32767.\n */\nexport type SmallintColumnType = \"smallint\"|\"int2\";\n\n/**\n * Integer type.\n * Size: 4 bytes.\n * Range: -2147483648 to +2147483647.\n */\nexport type IntegerColumnType = \"integer\"|\"int\"|\"int4\";\n\n/**\n * Numeric type.\n * Large-range integer type.\n * Size: 8 bytes.\n * Range: -9223372036854775808 to 9223372036854775807.\n */\nexport type BigintColumnType = \"bigint\"|\"int8\";\n\n/**\n * Numeric type.\n * User-specified precision, exact.\n * Size: variable.\n * Range: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point.\n */\nexport type DecimalColumnType = \"decimal\";\n\n/**\n * Numeric type.\n * User-specified precision, exact.\n * Size: variable.\n * Range: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point.\n */\nexport type NumericColumnType = \"numeric\"|\"decimal\";\n\n/**\n * Numeric type.\n * Variable-precision, inexact.\n * Size: 4 bytes.\n * Range: 6 decimal digits precision.\n */\nexport type RealColumnType = \"real\"|\"float4\";\n\n/**\n * Numeric type.\n * Variable-precision, inexact.\n * Size: 8 bytes.\n * Range: 15 decimal digits precision.\n */\nexport type DoublePrecisionColumnType = \"double precision\"|\"float8\";\n\n/**\n * Numeric type.\n * Small autoincrementing integer.\n * Size: 2 bytes.\n * Range: 1 to 32767.\n */\nexport type SmallserialColumnType = \"smallserial\"|\"serial2\";\n\n/**\n * Numeric type.\n * Autoincrementing integer.\n * Size: 4 bytes.\n * Range: 1 to 2147483647.\n */\nexport type SerialColumnType = \"serial\"|\"serial4\";\n\n/**\n * Numeric type.\n * Large autoincrementing integer.\n * Size: 8 bytes.\n * Range: -92233720368547758.08 to +92233720368547758.07\n */\nexport type BigserialColumnType = \"bigserial\"|\"serial8\";\n\n// -------------------------------------------------------------------------\n// Monetary Types\n// -------------------------------------------------------------------------\n\n/**\n * Monetary type.\n * Currency amount.\n * Size: 8 bytes.\n * Range: 1 to 9223372036854775807.\n */\nexport type MoneyColumnType = \"money\";\n\n// -------------------------------------------------------------------------\n// Character Types\n// -------------------------------------------------------------------------\n\n/**\n * Character type.\n * Variable-length with limit type.\n */\nexport type VarcharColumnType = \"character varying\"|\"varchar\";\n\n/**\n * Character type.\n * Fixed-length, blank padded type.\n */\nexport type CharColumnType = \"character\"|\"char\";\n\n/**\n * Character type.\n * Variable-length character string.\n */\nexport type TextColumnType = \"text\";\n\n// -------------------------------------------------------------------------\n// Binary Data Types\n// -------------------------------------------------------------------------\n\n/**\n * Variable-length binary string type.\n * Size: 1 or 4 bytes plus the actual binary string.\n */\nexport type ByteaColumnType = \"bytea\";\n\n// -------------------------------------------------------------------------\n// Date/Time Types\n// -------------------------------------------------------------------------\n\n/**\n * Both date and time type.\n * With or without timezone.\n * Size: 8 bytes.\n * Value range: from 4713 BC to 294276 AD.\n */\nexport type TimestampColumnType = \"timestamp\";\n\n/**\n * Date (no time of day) type.\n * With or without timezone.\n * Size: 4 bytes.\n * Value range: from 4713 BC to 5874897 AD.\n *\n * This column type has additional options.\n */\nexport type DateColumnType = \"date\";\n\n/**\n * Time of day (no date) type.\n * With or without timezone.\n * Size: 8 bytes or 12 bytes (depend on timezone).\n * Value range: from 00:00:00+1459 BC to 24:00:00-1459.\n *\n * This column type has additional options.\n */\nexport type TimeColumnType = \"time\";\n\n/**\n * Time interval type.\n * Size: 12 bytes.\n * Value range: from -178000000 years to 178000000 years.\n */\nexport type IntervalColumnType = \"interval\";\n\n// -------------------------------------------------------------------------\n// Boolean Type\n// -------------------------------------------------------------------------\n\n/**\n * Boolean type.\n * Size: 1 byte.\n */\nexport type BooleanColumnType = \"boolean\"|\"bool\";\n\n// -------------------------------------------------------------------------\n// Enumerated Type\n// -------------------------------------------------------------------------\n\n/**\n * Enumerated type.\n * Enumerated (enum) types are data types that comprise a static, ordered set of values.\n * This column type has additional options.\n */\nexport type EnumColumnType = \"enum\";\n\n// -------------------------------------------------------------------------\n// Geometric Types\n// -------------------------------------------------------------------------\n\n/**\n * Geometric type - point.\n * Stores values in a (x,y) format.\n * Size: 16 bytes.\n */\nexport type PointColumnType = \"point\";\n\n/**\n * Geometric type - infinite line.\n * Stores values in a ((x1,y1),(x2,y2)) format.\n * Size: 32 bytes.\n */\nexport type LineColumnType = \"line\";\n\n/**\n * Geometric type - finite line segment.\n * Stores values in a ((x1,y1),(x2,y2)) format.\n * Size: 32 bytes.\n */\nexport type LsegColumnType = \"lseg\";\n\n/**\n * Geometric type - rectangular box.\n * Stores values in a ((x1,y1),(x2,y2)) format.\n * Size: 32 bytes.\n */\nexport type BoxColumnType = \"box\";\n\n/**\n * Geometric type - circle.\n * Stores values in a <(x,y),r> format.\n * Size: 24 bytes.\n */\nexport type CircleColumnType = \"circle\";\n\n/**\n * Geometric type - path.\n * Size: 40+16n bytes.\n */\nexport type PathColumnType = \"path\";\n\n/**\n * Geometric type - path (similar to polygon).\n */\nexport type PolygonColumnType = \"polygon\";\n\n// -------------------------------------------------------------------------\n// Network Address Types\n// -------------------------------------------------------------------------\n\n/**\n * IPv4 and IPv6 networks.\n * Size: 7 or 19 bytes.\n */\nexport type CidrColumnType = \"cidr\";\n\n/**\n * IPv4 and IPv6 hosts and networks type.\n * Size: 7 or 19 bytes.\n */\nexport type InetColumnType = \"inet\";\n\n/**\n * MAC addresses type.\n * Size: 6 bytes.\n */\nexport type MacaddrColumnType = \"macaddr\";\n\n// -------------------------------------------------------------------------\n// Bit String Types\n// -------------------------------------------------------------------------\n\n/**\n * Bit types are used to store bit masks with fixed length.\n */\nexport type BitColumnType = \"bit\";\n\n/**\n * Bit type are used to store bit masks with variable length.\n */\nexport type VarbitColumnType = \"bit varying\"|\"varbit\";\n\n// -------------------------------------------------------------------------\n// Text Search Types\n// -------------------------------------------------------------------------\n\n/**\n * This is a sorted list of distinct words that have been normalized\n * to merge different variants of the same word, called as \"lexemes\".\n */\nexport type TsvectorColumnType = \"tsvector\";\n\n/**\n * This stores lexemes that are to be searched for,\n * and combines them honoring the Boolean operators & (AND), | (OR), and ! (NOT).\n * Parentheses can be used to enforce grouping of the operators.\n */\nexport type TsqueryColumnType = \"tsquery\";\n\n// -------------------------------------------------------------------------\n// Other Types\n// -------------------------------------------------------------------------\n\n/**\n * Universally Unique Identifier type.\n */\nexport type UUIDColumnType = \"UUID\";\n\n/**\n * The xml data type can be used to store XML data.\n */\nexport type XmlColumnType = \"xml\";\n\n/**\n * The json data type can be used to store JSON (JavaScript Object Notation) data.\n */\nexport type JsonColumnType = \"json\";\n\n/**\n * The jsonb data type can be used to store JSON (JavaScript Object Notation) in a binary format.\n */\nexport type JsonbColumnType = \"jsonb\";\n\n// -------------------------------------------------------------------------\n// Merged Types\n// -------------------------------------------------------------------------\n\n/**\n * Column types where column length is used.\n */\nexport type WithLengthColumnType =\n    VarcharColumnType|\n    CharColumnType|\n    IntervalColumnType|\n    BitColumnType|\n    VarbitColumnType;\n\n/**\n * Column types where time options are used.\n */\nexport type WithTimeColumnType =\n    TimeColumnType|\n    TimestampColumnType;\n\n/**\n * All other column types without extra options used.\n */\nexport type SimpleColumnType =\n    SmallintColumnType|\n    IntegerColumnType|\n    BigintColumnType|\n    DecimalColumnType|\n    RealColumnType|\n    DoublePrecisionColumnType|\n    SmallserialColumnType|\n    SerialColumnType|\n    BigserialColumnType|\n    MoneyColumnType|\n    TextColumnType|\n    ByteaColumnType|\n    DateColumnType|\n    BooleanColumnType|\n    PointColumnType|\n    LineColumnType|\n    LsegColumnType|\n    BoxColumnType|\n    CircleColumnType|\n    PathColumnType|\n    PolygonColumnType|\n    CidrColumnType|\n    InetColumnType|\n    MacaddrColumnType|\n    TsvectorColumnType|\n    TsqueryColumnType|\n    UUIDColumnType|\n    XmlColumnType|\n    JsonColumnType|\n    JsonbColumnType;\n\n/**\n * All column types supported by a database.\n */\nexport type AllColumnType =\n    SimpleColumnType|\n    WithLengthColumnType|\n    WithTimeColumnType|\n    NumericColumnType|\n    EnumColumnType;","/**\n */\nexport class MetadataAlreadyExistsError extends Error {\n    name = \"MetadataAlreadyExistsError\";\n\n    constructor(metadataType: string, constructor: Function, propertyName?: string) {\n        super();\n        this.message = metadataType + \" metadata already exists for the class constructor \" + JSON.stringify(constructor) +\n            (propertyName ? \" on property \" + propertyName : \". If you previously renamed or moved entity class, make sure\" +\n            \" that compiled version of old entity class source wasn't left in the compiler output directory.\");\n    }\n\n}","/**\n */\nexport class MetadataWithSuchNameAlreadyExistsError extends Error {\n    name = \"MetadataWithSuchNameAlreadyExistsError\";\n\n    constructor(metadataType: string, name: string) {\n        super();\n        this.message = metadataType + \" metadata with such name \" + name + \" already exists. \" +\n            \"Do you apply decorator twice? Or maybe try to change a name?\";\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class MissingJoinColumnError extends Error {\n    name = \"MissingJoinColumnError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        if (relation.inverseRelation) {\n            this.message = `JoinColumn is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} one-to-one relationship. ` +\n                `You need to put JoinColumn decorator on one of the sides.`;\n        } else {\n            this.message = `JoinColumn is missing on ${entityMetadata.name}#${relation.propertyName} one-to-one relationship. ` +\n                `You need to put JoinColumn decorator on it.`;\n        }\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class MissingJoinTableError extends Error {\n    name = \"MissingJoinTableError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n\n        if (relation.inverseRelation) {\n            this.message = `JoinTable is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} many-to-many relationship. ` +\n                `You need to put decorator decorator on one of the sides.`;\n        } else {\n            this.message = `JoinTable is missing on ${entityMetadata.name}#${relation.propertyName} many-to-many relationship. ` +\n                `You need to put JoinTable decorator on it.`;\n        }\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinColumnIsNotAllowedError extends Error {\n    name = \"UsingJoinColumnIsNotAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinColumn on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\n            `You can use JoinColumn only on one-to-one and many-to-one relations.`;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinColumnOnlyOnOneSideAllowedError extends Error {\n    name = \"UsingJoinColumnOnlyOnOneSideAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinColumn is allowed only on one side of the one-to-one relationship. ` +\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation!.propertyName} ` +\n            `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinTableIsNotAllowedError extends Error {\n    name = \"UsingJoinTableIsNotAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinTable on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\n            `${entityMetadata.name}#${relation.propertyName} has ${relation.relationType} relation, ` +\n            `however you can use JoinTable only on many-to-many relations.`;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinTableOnlyOnOneSideAllowedError extends Error {\n    name = \"UsingJoinTableOnlyOnOneSideAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinTable is allowed only on one side of the many-to-many relationship. ` +\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation!.propertyName} ` +\n            `has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class CascadesNotAllowedError extends Error {\n    name = \"CascadesNotAllowedError\";\n\n    // todo: remove metadata attribute since its present in relation attribute\n    constructor(type: \"insert\"|\"update\"|\"remove\", metadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Cascades (${type}) are not allowed for the given relation ${metadata.name}#${relation.joinColumns[0].referencedColumn!.databaseName}`;\n    }\n\n}","/**\n * Thrown . Theoretically can't be thrown.\n */\nexport class PersistedEntityNotFoundError extends Error {\n    name = \"PersistedEntityNotFoundError\";\n\n    constructor() {\n        super();\n        this.message = `Internal error. Persisted entity was not found in the list of prepared operated entities.`;\n    }\n\n}","/**\n * Thrown if same custom repository instance is reused between different connections.\n */\nexport class CustomRepositoryReusedError extends Error {\n    name = \"CustomRepositoryReusedError\";\n\n    constructor(repository: any) {\n        super(`Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\n            `was already used in the different connection. You can't share entity repositories between different connections ` +\n            `when useContainer is set to true for the entity repository.`);\n    }\n\n}"],"sourceRoot":"."}