{"version":3,"sources":["../../src/entity-manager/EntityManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,yHAAsH;AAMtH,+FAA4F;AAG5F,uDAAoD;AACpD,qEAAkE;AAClE,gEAA6D;AAC7D,oFAAiF;AACjF,oHAAiH;AACjH,8HAA2H;AAC3H,mGAAgG;AAChG,kCAAgD;AAChD,uEAAoE;AACpE,iIAA8H;AAI9H;;;GAGG;AACH;IA0BI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,uBAAY,UAAsB,EAAE,WAAyB;QAV7D;;;WAGG;QACO,SAAI,GAAkB,EAAE,CAAC;QAO/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,EAAE,CAAC,CAAC,WAAW,CAAC;YACZ,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACG,mCAAW,GAAjB,UAAkB,gBAA+D;;;gBAC7E,sBAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,EAAC;;;KAC1E;IAED;;OAEG;IACG,6BAAK,GAAX,UAAY,KAAa,EAAE,UAAkB;;;gBACzC,sBAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,EAAC;;;KACrE;IAYD;;OAEG;IACH,0CAAkB,GAAlB,UAA2B,WAA4D,EAAE,KAAc,EAAE,WAAyB;QAC9H,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAA8B,EAAE,KAAK,EAAE,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;QAEtH,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAAoC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;QACxG,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,+BAAO,GAAP,UAAQ,GAAW;QACf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,+BAAO,GAAP,UAAQ,GAAW,EAAE,KAAU;QAC3B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAYD;;OAEG;IACH,6BAAK,GAAL,UAAM,cAAmC,EAAE,WAAiB;QACxD,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC;QACpF,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,WAAW,GAAG,cAAc,CAAC;QACrE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrD,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAYD;;OAEG;IACH,6BAAK,GAAL,UAAM,cAAmC,EAAE,WAAiB;QACxD,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC;QACpF,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,WAAW,GAAG,cAAc,CAAC;QACrE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrD,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAmBD;;;OAGG;IACH,8BAAM,GAAN,UAAe,WAAsC,EAAE,oBAAgE;QAAvH,iBAUC;QATG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAE1D,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC;YACtB,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAE7B,EAAE,CAAC,CAAC,oBAAoB,YAAY,KAAK,CAAC;YACtC,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAA,eAAe,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,WAAW,EAAE,eAAe,CAAC,EAAzC,CAAyC,CAAC,CAAC;QAElG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,oBAAoB,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACH,6BAAK,GAAL,UAAc,WAAsC,EAAE,eAAuB;QAAE,qBAAqC;aAArC,UAAqC,EAArC,qBAAqC,EAArC,IAAqC;YAArC,oCAAqC;;QAChH,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAM,8BAA8B,GAAG,IAAI,qEAAiC,EAAE,CAAC;QAC/E,WAAW,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,8BAA8B,CAAC,SAAS,CAAC,eAAe,EAAE,MAAM,EAAE,QAAQ,CAAC,EAA3E,CAA2E,CAAC,CAAC;QAC3G,MAAM,CAAC,eAAe,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACG,+BAAO,GAAb,UAAsB,WAAsC,EAAE,UAA+B;;gBACnF,QAAQ,EACR,sCAAsC;;;;mCAD3B,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC;iEACV,IAAI,+EAAsC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;wBACxF,qBAAM,sCAAsC,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAA;;4CAA5E,SAA4E;wBACtG,EAAE,CAAC,CAAC,iBAAiB,CAAC;4BAClB,MAAM,gBAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,iBAA2B,EAAE,UAAU,CAAC,EAAC;wBAE5E,sBAAO,SAAS,EAAC;;;;KACpB;IA0BD;;OAEG;IACH,4BAAI,GAAJ,UAAa,cAAiD,EAAE,oBAAsC,EAAE,YAA0B;QAAlI,iBAoBC;QAlBG,IAAM,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,cAAc,YAAY,QAAQ,IAAI,OAAO,cAAc,KAAK,QAAQ,CAAC,CAAC,GAAG,cAAiC,GAAG,SAAS,CAAC;QACpK,IAAM,MAAM,GAAoB,MAAM,GAAG,oBAAuC,GAAG,cAAiC,CAAC;QACrH,IAAM,OAAO,GAAG,MAAM,GAAG,YAAY,GAAG,oBAAmC,CAAC;QAE5E,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;;gBAQhB,WAAW;;;;6BANjB,CAAA,MAAM,YAAY,KAAK,CAAA,EAAvB,wBAAuB;wBACvB,qBAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC;gCAC1B,IAAM,WAAW,GAAG,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,WAAW,CAAC;gCACpD,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,EAAE,OAAO,CAAQ,CAAC;4BACxD,CAAC,CAAC,CAAC,EAAA;;wBAHH,SAGG,CAAC;;;sCAEgB,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW;wBACxD,qBAAM,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,MAAgB,EAAE,OAAO,CAAC,EAAA;;wBAA1D,SAA0D,CAAC;;4BAG/D,sBAAO,MAAM,EAAC;;;aACjB,CAAC,CAAC;IACP,CAAC;IAkDD;;;;OAIG;IACH,+BAAO,GAAP,UAAgB,cAAiD,EAAE,WAA6B,EAAE,OAAqB;QACnH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAqB,EAAE,WAAkB,EAAE,OAAO,CAAC,CAAC;IACzE,CAAC;IAYD;;OAEG;IACG,8BAAM,GAAZ,UAAqB,MAAiC,EAAE,uBAA+D,EAAE,aAAkC,EAAE,OAAqB;;;;;4BAC/J,qBAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,uBAA8B,CAAC,EAAA;;iCAA1D,SAA0D;wBACzE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;wBAExE,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;wBACrC,qBAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;wBAAhC,SAAgC,CAAC;;;;;KACpC;IAED;;OAEG;IACG,kCAAU,GAAhB,UAAyB,MAAiC,EAAE,EAAO,EAAE,aAAkC,EAAE,OAAqB;;;;;4BAC3G,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAS,CAAC,EAAA;;iCAAzC,SAAyC;wBACxD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;wBAE5D,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;wBACrC,qBAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;wBAAhC,SAAgC,CAAC;;;;;KACpC;IAsBD;;OAEG;IACH,8BAAM,GAAN,UAAe,cAAiD,EAAE,oBAAsC,EAAE,YAA4B;QAAtI,iBAoBC;QAlBG,IAAM,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,cAAc,YAAY,QAAQ,IAAI,OAAO,cAAc,KAAK,QAAQ,CAAC,CAAC,GAAG,cAAiC,GAAG,SAAS,CAAC;QACpK,IAAM,MAAM,GAAoB,MAAM,GAAG,oBAAuC,GAAG,cAAiC,CAAC;QACrH,IAAM,OAAO,GAAG,MAAM,GAAG,YAAY,GAAG,oBAAqC,CAAC;QAE9E,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;;gBAQhB,WAAW;;;;6BANjB,CAAA,MAAM,YAAY,KAAK,CAAA,EAAvB,wBAAuB;wBACvB,qBAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC;gCAC1B,IAAM,WAAW,GAAG,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,WAAW,CAAC;gCACpD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,EAAE,OAAO,CAAQ,CAAC;4BAC1D,CAAC,CAAC,CAAC,EAAA;;wBAHH,SAGG,CAAC;;;sCAEgB,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW;wBACxD,qBAAM,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,MAAgB,EAAE,OAAO,CAAC,EAAA;;wBAA5D,SAA4D,CAAC;;4BAGjE,sBAAO,MAAM,EAAC;;;aACjB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACG,kCAAU,GAAhB,UAAyB,cAAyC,EAAE,EAAO,EAAE,OAAuB;;;;;4BACjF,qBAAM,IAAI,CAAC,WAAW,CAAM,cAAc,EAAE,EAAE,CAAC,EAAA;;iCAA/C,SAA+C;wBAC9D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;wBAElE,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;wBAAlC,SAAkC,CAAC;;;;;KACtC;IAED;;OAEG;IACG,mCAAW,GAAjB,UAA0B,cAAyC,EAAE,GAAU,EAAE,OAAuB;;;gBAC9F,QAAQ;;;;mCAAG,GAAG,CAAC,GAAG,CAAC,UAAM,EAAE;;;;4CACd,qBAAM,IAAI,CAAC,WAAW,CAAM,cAAc,EAAE,EAAE,CAAC,EAAA;;iDAA/C,SAA+C;wCAC9D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4CACR,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;wCAElE,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;wCAAlC,SAAkC,CAAC;;;;6BACtC,CAAC;wBAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;wBAA3B,SAA2B,CAAC;;;;;KAC/B;IAYD;;OAEG;IACH,6BAAK,GAAL,UAAc,WAAsC,EAAE,mBAA6D;QAC/G,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,mCAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpI,MAAM,CAAC,mCAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC/G,CAAC;IAYD;;OAEG;IACH,4BAAI,GAAJ,UAAa,WAAsC,EAAE,mBAA6D;QAC9G,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,mCAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpI,MAAM,CAAC,mCAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,OAAO,EAAE,CAAC;IAC9G,CAAC;IAgBD;;;;OAIG;IACH,oCAAY,GAAZ,UAAqB,WAAsC,EAAE,mBAA6D;QACtH,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,mCAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpI,MAAM,CAAC,mCAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,eAAe,EAAE,CAAC;IACtH,CAAC;IAcD;;;OAGG;IACH,iCAAS,GAAT,UAAkB,WAAsC,EAAE,GAAU,EAAE,mBAA6D;QAC/H,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,mCAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpI,mCAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;QAEzF,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,UAAA,EAAE;YACZ,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,sBAAsB,IAAI,CAAC,CAAC,EAAE,YAAY,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC9D,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,CAAC;YACD,MAAM,CAAC,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACnB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAYD;;OAEG;IACH,+BAAO,GAAP,UAAgB,WAAsC,EAAE,mBAA4D;QAChH,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,mCAAgB,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QACnI,MAAM,CAAC,mCAAgB,CAAC,6CAA6C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,MAAM,EAAE,CAAC;IAC5G,CAAC;IAcD;;;OAGG;IACH,mCAAW,GAAX,UAAoB,WAAsC,EAAE,EAAO,EAAE,mBAA4D;QAC7H,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,mCAAgB,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QACnI,EAAE,CAAC,CAAC,QAAQ,CAAC,sBAAsB,IAAI,CAAC,CAAC,EAAE,YAAY,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7D,0DAA0D;YAC1D,MAAM,IAAI,KAAK,CAAC,8GAA8G;gBAC1H,uFAAuF,CAAC,CAAC;QACjG,CAAC;QAED,mCAAgB,CAAC,6CAA6C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;QACxF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,sBAAsB,IAAI,CAAC,CAAC,EAAE,YAAY,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9D,EAAE,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC;QACD,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACG,6BAAK,GAAX,UAAoB,WAAsC;;gBAChD,QAAQ,EACR,WAAW;;;;mCADA,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC;sCACrC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;;;;wBAEhE,qBAAM,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAA;4BAArD,sBAAO,SAA8C,EAAC,CAAC,oDAAoD;;6BAGvG,CAAC,IAAI,CAAC,WAAW,EAAjB,wBAAiB;wBACjB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;;;;;;;KAEvC;IAED;;;;;OAKG;IACH,qCAAa,GAAb,UAAsB,iBAA4C;QAE9D,0FAA0F;QAC1F,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC5B,MAAM,IAAI,iFAAuC,EAAE,CAAC;YAExD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,iBAAiB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAS,iBAAwB,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;OAKG;IACH,yCAAiB,GAAjB,UAA0B,iBAA4C;QAElE,0FAA0F;QAC1F,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC5B,MAAM,IAAI,iFAAuC,EAAE,CAAC;YAExD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,iBAAiB,EAAE,IAAI,CAAC,WAAW,CAA2B,CAAC;QACnH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAS,iBAAwB,CAAC,CAAC;IAC/E,CAAC;IAYD;;OAEG;IACH,0CAAkB,GAAlB,UAA2B,iBAA4C;QAEnE,0FAA0F;QAC1F,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC5B,MAAM,IAAI,iFAAuC,EAAE,CAAC;YAExD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,iBAAiB,EAAE,IAAI,CAAC,WAAW,CAA4B,CAAC;QACpH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAS,iBAAwB,CAAC,CAAC;IAChF,CAAC;IAED;;OAEG;IACH,2CAAmB,GAAnB,UAAuB,gBAA+B;QAClD,IAAM,4BAA4B,GAAG,8BAAsB,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAA,UAAU;YAC5F,MAAM,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,gBAAgB,YAAY,QAAQ,GAAG,gBAAgB,GAAI,gBAAwB,CAAC,WAAW,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,CAAC,4BAA4B,CAAC;YAC9B,MAAM,IAAI,6DAA6B,CAAC,gBAAgB,CAAC,CAAC;QAE9D,IAAM,cAAc,GAAG,4BAA4B,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,4BAA4B,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;QAE1I,IAAM,wBAAwB,GAAG,IAAK,4BAA4B,CAAC,MAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAExG,4HAA4H;QAC5H,kEAAkE;QAClE,EAAE,CAAC,CAAC,wBAAwB,YAAY,uCAAkB,CAAC,CAAC,CAAC;YACzD,EAAE,CAAC,CAAC,CAAE,wBAAgC,CAAC,SAAS,CAAC,CAAC;gBAC7C,wBAAgC,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;QAC5D,CAAC;QACD,EAAE,CAAC,CAAC,wBAAwB,YAAY,uBAAU,CAAC,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;gBAChB,MAAM,IAAI,2FAA4C,CAAC,gBAAgB,CAAC,CAAC;YAE5E,wBAAgC,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;YACnD,wBAAgC,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC;QACnE,CAAC;QAED,MAAM,CAAC,wBAAwB,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACG,+BAAO,GAAb;;;gBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;oBAClB,MAAM,IAAI,qEAAiC,EAAE,CAAC;gBAElD,sBAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAC;;;KACrC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACa,+BAAO,GAAvB,UAAwB,MAAuB,EAAE,MAAW,EAAE,OAAqB;;gBACzE,QAAQ,EACR,WAAW,EAEP,wBAAwB,EAIxB,oBAAoB,EAGpB,QAAQ;;;;mCAVD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC;sCAChC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;;;;mDAEtC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,WAAW,CAAC;wBACnF,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC;4BACxB,wBAAwB,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;+CAEpB,IAAI,+BAAc,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC;wBAC7E,qBAAM,oBAAoB,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAA;;wBAApD,SAAoD,CAAC;mCAEpC,IAAI,mDAAwB,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,EAAE,WAAW,CAAC;wBACrG,qBAAM,QAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,eAAe,CAAC,EAAA;;wBAA5D,SAA4D,CAAC;;;6BAGzD,CAAC,IAAI,CAAC,WAAW,EAAjB,wBAAiB;wBACjB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;;;;;;;KAEvC;IAED;;OAEG;IACa,iCAAS,GAAzB,UAA0B,MAAuB,EAAE,MAAW,EAAE,OAAuB;;gBAC7E,QAAQ,EACR,WAAW,EAEP,wBAAwB,EAIxB,oBAAoB,EAGpB,QAAQ;;;;mCAVD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC;sCAChC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;;;;mDAEtC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,WAAW,CAAC;wBACnF,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC;4BACxB,wBAAwB,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;+CAEpB,IAAI,+BAAc,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC;wBAC7E,qBAAM,oBAAoB,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAA;;wBAAnD,SAAmD,CAAC;mCAEnC,IAAI,mDAAwB,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,EAAE,WAAW,CAAC;wBACrG,qBAAM,QAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,eAAe,CAAC,EAAA;;wBAA5D,SAA4D,CAAC;;;6BAGzD,CAAC,IAAI,CAAC,WAAW,EAAjB,wBAAiB;wBACjB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;;;;;;;KAEvC;IAEL,oBAAC;AAAD,CAltBA,AAktBC,IAAA;AAltBY,sCAAa","file":"EntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {NoNeedToReleaseEntityManagerError} from \"./error/NoNeedToReleaseEntityManagerError\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {Repository} from \"../repository/Repository\";\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\nimport {SubjectBuilder} from \"../persistence/SubjectBuilder\";\nimport {SubjectOperationExecutor} from \"../persistence/SubjectOperationExecutor\";\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport {CustomRepositoryNotFoundError} from \"../repository/error/CustomRepositoryNotFoundError\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../repository/error/CustomRepositoryCannotInheritRepositoryError\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection to be used in this entity manager.\n     */\n    connection: Connection;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     */\n    protected queryRunner: QueryRunner;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    protected data: ObjectLiteral = {};\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\n        this.connection = connection;\n        if (queryRunner)\n            this.queryRunner = queryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\n        return this.connection.transaction(runInTransaction, this.queryRunner);\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        return this.connection.query(query, parameters, this.queryRunner);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass?: ObjectType<Entity>|Function|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(entityClass as Function|string, alias, queryRunner || this.queryRunner);\n\n        } else {\n            return this.connection.createQueryBuilder(entityClass as QueryRunner|undefined || this.queryRunner);\n        }\n    }\n\n    /**\n     * Gets user data by a given key.\n     * Used get stored data stored in a transactional entity manager.\n     */\n    getData(key: string): any {\n        return this.data[key];\n    }\n\n    /**\n     * Sets value for the given key in user data.\n     * Used to store data in a transactional entity manager which can be accessed in subscribers then.\n     */\n    setData(key: string, value: any): this {\n        this.data[key] = value;\n        return this;\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean;\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function|string, entity: any): boolean;\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any|Function|string, maybeEntity?: any): boolean {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.hasId(entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: Function|string, entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any|Function|string, maybeEntity?: any): any {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.getEntityIdMixedMap(entity);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObject: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjects: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        const metadata = this.connection.getMetadata(entityClass);\n\n        if (!plainObjectOrObjects)\n            return metadata.create();\n\n        if (plainObjectOrObjects instanceof Array)\n            return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass, plainEntityLike));\n\n        return this.merge(entityClass, metadata.create(), plainObjectOrObjects);\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entityClass: ObjectType<Entity>|string, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity { // todo: throw exception ie tntity manager is released\n        const metadata = this.connection.getMetadata(entityClass);\n        const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n        entityLikes.forEach(object => plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\n        return mergeIntoEntity;\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity>(entityClass: ObjectType<Entity>|string, entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\n        if (transformedEntity)\n            return this.merge(entityClass, transformedEntity as Entity, entityLike);\n\n        return undefined;\n    }\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(targetOrEntity: Function|string, entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(targetOrEntity: Function|string, entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) a given entity in the database.\n     */\n    save<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: SaveOptions): Promise<Entity|Entity[]> {\n\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\n            // todo: throw exception if constructor in target is not set\n            if (entity instanceof Array) {\n                await Promise.all(entity.map(e => {\n                    const finalTarget = target ? target : e.constructor;\n                    return this.saveOne(finalTarget, e, options) as any;\n                }));\n            } else {\n                const finalTarget = target ? target : entity.constructor;\n                await this.saveOne(finalTarget, entity as Entity, options);\n            }\n\n            return entity;\n        });\n    }\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: Function, entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: string, entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: Function, entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: string, entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) a given entity in the database.\n     *\n     * @deprecated\n     */\n    persist<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[], options?: SaveOptions): Promise<Entity|Entity[]> {\n        return this.save(targetOrEntity as any, maybeEntity as any, options);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     */\n    async update<Entity>(target: ObjectType<Entity>|string, conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\n\n    /**\n     * Updates entity partially. Entity can be found by a given find options.\n     */\n    async update<Entity>(target: ObjectType<Entity>|string, findOptions: FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     */\n    async update<Entity>(target: ObjectType<Entity>|string, conditionsOrFindOptions: Partial<Entity>|FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        const entity = await this.findOne(target, conditionsOrFindOptions as any); // this is temporary, in the future can be refactored to perform better\n        if (!entity)\n            throw new Error(`Cannot find entity to update by a given criteria`);\n\n        Object.assign(entity, partialEntity);\n        await this.save(entity, options);\n    }\n\n    /**\n     * Updates entity partially. Entity will be found by a given id.\n     */\n    async updateById<Entity>(target: ObjectType<Entity>|string, id: any, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        const entity = await this.findOneById(target, id as any); // this is temporary, in the future can be refactored to perform better\n        if (!entity)\n            throw new Error(`Cannot find entity to update by a id`);\n\n        Object.assign(entity, partialEntity);\n        await this.save(entity, options);\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: RemoveOptions): Promise<Entity|Entity[]> {\n\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as RemoveOptions;\n\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\n            // todo: throw exception if constructor in target is not set\n            if (entity instanceof Array) {\n                await Promise.all(entity.map(e => {\n                    const finalTarget = target ? target : e.constructor;\n                    return this.removeOne(finalTarget, e, options) as any;\n                }));\n            } else {\n                const finalTarget = target ? target : entity.constructor;\n                await this.removeOne(finalTarget, entity as Entity, options);\n            }\n\n            return entity;\n        });\n    }\n\n    /**\n     * Removes entity by a given entity id.\n     */\n    async removeById<Entity>(targetOrEntity: ObjectType<Entity>|string, id: any, options?: RemoveOptions): Promise<void> {\n        const entity = await this.findOneById<any>(targetOrEntity, id); // this is temporary, in the future can be refactored to perform better\n        if (!entity)\n            throw new Error(`Cannot find entity to remove by a given id`);\n\n        await this.remove(entity, options);\n    }\n\n    /**\n     * Removes entity by a given entity ids.\n     */\n    async removeByIds<Entity>(targetOrEntity: ObjectType<Entity>|string, ids: any[], options?: RemoveOptions): Promise<void> {\n        const promises = ids.map(async id => {\n            const entity = await this.findOneById<any>(targetOrEntity, id); // this is temporary, in the future can be refactored to perform better\n            if (!entity)\n                throw new Error(`Cannot find entity to remove by a given id`);\n\n            await this.remove(entity, options);\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given find options and conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], conditions?: Partial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n\n        ids = ids.map(id => {\n            if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\n                return metadata.createEntityIdMap([id]);\n            }\n            return id;\n        });\n        qb.whereInIds(ids);\n        return qb.getMany();\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getOne();\n    }\n\n    /**\n     * Finds entity with given id.\n     * Optionally find options can be applied.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity with given id.\n     * Optionally conditions can be applied.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, conditions?: Partial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity with given id.\n     * Optionally find options or conditions can be applied.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\n        if (metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\n            // const columnNames = this.metadata.getEntityIdMap({  });\n            throw new Error(`You have multiple primary keys in your entity, to use findOneById with multiple primary keys please provide ` +\n                `complete object with all entity ids, like this: { firstKey: value, secondKey: value }`);\n        }\n\n        FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n        if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\n            id = metadata.createEntityIdMap([id]);\n        }\n        qb.whereInIds([id]);\n        return qb.getOne();\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     */\n    async clear<Entity>(entityClass: ObjectType<Entity>|string): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            return await queryRunner.truncate(metadata.tableName); // await is needed here because we are using finally\n\n        } finally {\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\n\n        // if single db connection is used then create its own repository with reused query runner\n        if (this.queryRunner) {\n            if (this.queryRunner.isReleased)\n                throw new QueryRunnerProviderAlreadyReleasedError();\n\n            return this.connection.createIsolatedRepository(entityClassOrName, this.queryRunner);\n        }\n\n        return this.connection.getRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\n\n        // if single db connection is used then create its own repository with reused query runner\n        if (this.queryRunner) {\n            if (this.queryRunner.isReleased)\n                throw new QueryRunnerProviderAlreadyReleasedError();\n\n            return this.connection.createIsolatedRepository(entityClassOrName, this.queryRunner) as TreeRepository<Entity>;\n        }\n\n        return this.connection.getTreeRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\n\n    /**\n     * Gets mongodb repository for the given entity name.\n     */\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\n\n    /**\n     * Gets mongodb repository for the given entity class or name.\n     */\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\n\n        // if single db connection is used then create its own repository with reused query runner\n        if (this.queryRunner) {\n            if (this.queryRunner.isReleased)\n                throw new QueryRunnerProviderAlreadyReleasedError();\n\n            return this.connection.createIsolatedRepository(entityClassOrName, this.queryRunner) as MongoRepository<Entity>;\n        }\n\n        return this.connection.getMongoRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\n\n        const entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)(this, entityMetadata);\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this;\n        }\n        if (entityRepositoryInstance instanceof Repository) {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\n\n            (entityRepositoryInstance as any)[\"manager\"] = this;\n            (entityRepositoryInstance as any)[\"metadata\"] = entityMetadata;\n        }\n\n        return entityRepositoryInstance;\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner)\n            throw new NoNeedToReleaseEntityManagerError();\n\n        return this.queryRunner.release();\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs a save operation for a single entity.\n     */\n    protected async saveOne(target: Function|string, entity: any, options?: SaveOptions): Promise<void> {\n        const metadata = this.connection.getMetadata(target);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            const transactionEntityManager = this.connection.createIsolatedManager(queryRunner);\n            if (options && options.data)\n                transactionEntityManager.data = options.data;\n\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\n            await databaseEntityLoader.persist(entity, metadata);\n\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner);\n            await executor.execute(databaseEntityLoader.operateSubjects);\n\n        } finally {\n            if (!this.queryRunner) // release it only if its created by this method\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Performs a remove operation for a single entity.\n     */\n    protected async removeOne(target: Function|string, entity: any, options?: RemoveOptions): Promise<void> {\n        const metadata = this.connection.getMetadata(target);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            const transactionEntityManager = this.connection.createIsolatedManager(queryRunner);\n            if (options && options.data)\n                transactionEntityManager.data = options.data;\n\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\n            await databaseEntityLoader.remove(entity, metadata);\n\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner);\n            await executor.execute(databaseEntityLoader.operateSubjects);\n\n        } finally {\n            if (!this.queryRunner) // release it only if its created by this method\n                await queryRunner.release();\n        }\n    }\n\n}"],"sourceRoot":".."}