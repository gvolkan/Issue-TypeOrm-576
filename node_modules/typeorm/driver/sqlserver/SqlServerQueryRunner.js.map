{"version":3,"sources":["../../src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":"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","file":"SqlServerQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {SqlServerDriver} from \"./SqlServerDriver\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {Connection} from \"../../connection/Connection\";\nimport {ReadStream} from \"fs\";\n\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class SqlServerQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because in transaction mode mssql cannot execute parallel queries,\n     * that's why we store last executed query promise to wait it when we execute next query.\n     *\n     * @see https://github.com/patriksimek/node-mssql/issues/491\n     */\n    protected queryResponsibilityChain: Promise<any>[] = [];\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: SqlServerDriver) {\n        this.connection = driver.connection;\n        this.manager = driver.connection.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        return new Promise<void>(async (ok, fail) => {\n            this.isTransactionActive = true;\n            this.databaseConnection = this.driver.connectionPool.transaction();\n            this.databaseConnection.begin((err: any) => {\n                if (err) {\n                    this.isTransactionActive = false;\n                    return fail(err);\n                }\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.commit((err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.rollback((err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise(async (ok, fail) => {\n\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : this.driver.connectionPool);\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    request.input(index, parameters![index]);\n                });\n            }\n            request.query(query, (err: any, result: any) => {\n\n                const resolveChain = () => {\n                    if (promiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(promiseIndex, 1);\n                    if (waitingPromiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                    waitingOkay();\n                };\n\n                let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                if (err) {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError((err.originalError && err.originalError.info) ? err.originalError.info.message : err, this);\n                    resolveChain();\n                    return fail(err);\n                }\n\n                ok(result.recordset);\n                resolveChain();\n            });\n        });\n        if (this.isTransactionActive)\n            this.queryResponsibilityChain.push(promise);\n\n        return promise;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise<ReadStream>(async (ok, fail) => {\n\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : this.driver.connectionPool);\n            request.stream = true;\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    request.input(index, parameters![index]);\n                });\n            }\n            request.query(query, (err: any, result: any) => {\n\n                const resolveChain = () => {\n                    if (promiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(promiseIndex, 1);\n                    if (waitingPromiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                    waitingOkay();\n                };\n\n                let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                if (err) {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError((err.originalError && err.originalError.info) ? err.originalError.info.message : err, this);\n                    resolveChain();\n                    return fail(err);\n                }\n\n                ok(result.recordset);\n                resolveChain();\n            });\n            if (onEnd) request.on(\"done\", onEnd);\n            if (onError) request.on(\"error\", onError);\n            ok(request as ReadStream);\n        });\n        if (this.isTransactionActive)\n            this.queryResponsibilityChain.push(promise);\n\n        return promise;\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map((key, index) => \"@\" + index).join(\",\");\n        const parameters = keys.map(key => keyValues[key]);\n\n        const sql = columns.length > 0\n            ? `INSERT INTO \"${tableName}\"(${columns}) ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.databaseName + \" \" : \"\" }VALUES (${values})`\n            : `INSERT INTO \"${tableName}\" ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.databaseName + \" \" : \"\" }DEFAULT VALUES `;\n\n        const result = await this.query(sql, parameters);\n        return generatedColumn ? result instanceof Array ? result[0][generatedColumn.databaseName] : result[generatedColumn.databaseName] : undefined;\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, updateParams.length).join(\" AND \");\n        const sql = `UPDATE \"${tableName}\" SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \"${tableName}\" WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\", \"level\") ` +\n                `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\") ` +\n                `SELECT \"ancestor\", ${newEntityId} FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM \"${tableName}\" WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n        const tablesSql          = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql         = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}'`;\n        const constraintsSql     = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages ` +\n`LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME ` +\n`WHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\n        const identityColumnsSql = `SELECT COLUMN_NAME, TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}' AND COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1;`;\n        const indicesSql         = `SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, IndexId = ind.index_id, ColumnId = ic.index_column_id, COLUMN_NAME = col.name, ind.*, ic.*, col.* ` +\n`FROM sys.indexes ind INNER JOIN sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id INNER JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id ` +\n`INNER JOIN sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 AND ind.is_unique = 0 AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0 ORDER BY t.name, ind.name, ind.index_id, ic.index_column_id`;\n        const [dbTables, dbColumns, dbConstraints, dbIdentityColumns, dbIndices]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(identityColumnsSql),\n            this.query(indicesSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const isPrimary = !!dbConstraints.find(dbConstraint => {\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\n                    });\n                    const isGenerated = !!dbIdentityColumns.find(column => {\n                        return  column[\"TABLE_NAME\"] === tableSchema.name &&\n                                column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n                    const isUnique = !!dbConstraints.find(dbConstraint => {\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n                    });\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n                    columnSchema.type = dbColumn[\"DATA_TYPE\"].toLowerCase() + (dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] ? \"(\" + dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] + \")\" : \"\"); // todo: use normalize type?\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    columnSchema.isPrimary = isPrimary;\n                    columnSchema.isGenerated = isGenerated;\n                    columnSchema.isUnique = isUnique;\n                    columnSchema.comment = \"\"; // todo: less priority, implement this later\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = dbConstraints\n                .filter(dbConstraint => {\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\n                })\n                .map(keyColumnUsage => {\n                    return new PrimaryKeySchema(keyColumnUsage[\"CONSTRAINT_NAME\"], keyColumnUsage[\"COLUMN_NAME\"]);\n                });\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = dbConstraints\n                .filter(dbConstraint => {\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"FOREIGN KEY\";\n                })\n                .map(dbConstraint => new ForeignKeySchema(dbConstraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return  dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\n                            (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n                            (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n                })\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(dbIndexName => {\n                    const columnNames = dbIndices\n                        .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName)\n                        .map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\n\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness? */);\n                });\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false, true)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        sql += table.columns\n            .filter(column => column.isUnique)\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\n            .join(\" \");\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        let sql = `DROP TABLE \"${tableName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column, false, true)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        // to update an identy column we have to drop column and recreate it again\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`);\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn, false, false)}`);\n        }\n\n        const sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN ${this.buildCreateColumnSql(newColumn, true, false)}`; // todo: CHANGE OR MODIFY COLUMN ????\n        await this.query(sql);\n\n        if (newColumn.isUnique !== oldColumn.isUnique) {\n            if (newColumn.isUnique === true) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\n\n            } else if (newColumn.isUnique === false) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\n\n            }\n        }\n        if (newColumn.default !== oldColumn.default) {\n            if (newColumn.default !== null && newColumn.default !== undefined) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"df_${newColumn.name}\"`);\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"df_${newColumn.name}\" DEFAULT ${newColumn.default} FOR \"${newColumn.name}\"`);\n\n            } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"df_${newColumn.name}\"`);\n\n            }\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n\n        // drop depend constraints\n        if (column.default)\n            await this.query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"df_${column.name}\"`);\n\n        // drop column itself\n        await this.query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        const oldPrimaryKeySql = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\nLEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\nWHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\n        const oldPrimaryKey = await this.query(oldPrimaryKeySql);\n        if (oldPrimaryKey.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${oldPrimaryKey[0][\"CONSTRAINT_NAME\"]}\"`);\n\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"` + primaryKey.columnName + `\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        const sql = `DROP INDEX \"${tableName}\".\"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const allTablesSql = `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`;\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\n            const tableNames = allTablesResults.map(result => result[\"TABLE_NAME\"]);\n            await Promise.all(tableNames.map(async tableName => {\n                const dropForeignKeySql = `SELECT 'ALTER TABLE ' +  OBJECT_SCHEMA_NAME(parent_object_id) + '.[' + OBJECT_NAME(parent_object_id) + '] DROP CONSTRAINT ' + name as query FROM sys.foreign_keys WHERE referenced_object_id = object_id('${tableName}')`;\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => {\n                    return this.query(dropQuery);\n                }));\n            }));\n            await Promise.all(tableNames.map(tableName => {\n                const dropTableSql = `DROP TABLE \"${tableName}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database as string;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startFrom: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => {\n            return `\"${key}\"` + \"=@\" + (startFrom + index);\n        });\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema, skipIdentity: boolean, createDefault: boolean) {\n        let c = `\"${column.name}\" ${column.type}`;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\";\n        // if (column.isPrimary === true && !skipPrimary)\n        //     c += \" PRIMARY KEY\";\n        if (column.comment)\n            c += \" COMMENT '\" + column.comment + \"'\";\n        if (createDefault) {\n            if (column.default !== undefined && column.default !== null) {\n                c += ` CONSTRAINT \"df_${column.name}\" DEFAULT ${column.default}`;\n            }\n        }\n        return c;\n    }\n\n\n}"],"sourceRoot":"../.."}