{"version":3,"sources":["../../src/driver/mongodb/MongoDriver.ts"],"names":[],"mappings":"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","file":"MongoDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {MongoQueryRunner} from \"./MongoQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {MongoConnectionOptions} from \"./MongoConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {MongoSchemaBuilder} from \"../../schema-builder/MongoSchemaBuilder\";\n\n/**\n * Organizes communication with MongoDB.\n */\nexport class MongoDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Mongodb does not require to dynamically create query runner each time,\n     * because it does not have a regular connection pool as RDBMS systems have.\n     */\n    queryRunner?: MongoQueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Mongodb does not need to have column types because they are not used in schema sync.\n     */\n    supportedDataTypes: ColumnType[] = [];\n\n    /**\n     * Mongodb does not need to have a strong defined mapped column types because they are not used in schema sync.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"int\",\n        createDateDefault: \"\",\n        updateDate: \"int\",\n        updateDateDefault: \"\",\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationName: \"int\",\n        migrationTimestamp: \"int\",\n    };\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    protected options: MongoConnectionOptions;\n\n    /**\n     * Underlying mongodb library.\n     */\n    protected mongodb: any;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n        this.options = connection.options as MongoConnectionOptions;\n\n        // validate options to make sure everything is correct and driver will be able to establish connection\n        this.validateOptions(connection.options);\n\n        // load mongodb package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    connect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.mongodb.MongoClient.connect(this.buildConnectionUrl(), this.options.extra, (err: any, dbConnection: any) => {\n                if (err) return fail(err);\n\n                this.queryRunner = new MongoQueryRunner(this.connection, dbConnection);\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            if (!this.queryRunner)\n                return fail(new ConnectionIsNotSetError(\"mongodb\"));\n\n            const handler = (err: any) => err ? fail(err) : ok();\n            this.queryRunner.databaseConnection.close(handler);\n            this.queryRunner = undefined;\n        });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new MongoSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        return this.queryRunner!;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        throw new Error(`This operation is not supported by Mongodb driver.`);\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return columnName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number, array?: string|boolean }): string {\n        throw new Error(`MongoDB is schema-less, not supported by this driver.`);\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        throw new Error(`MongoDB is schema-less, not supported by this driver.`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validate driver options to make sure everything is correct and driver will be able to establish connection.\n     */\n    protected validateOptions(options: DriverOptions) {\n        if (!options.url) {\n            if (!options.database)\n                throw new DriverOptionNotSetError(\"database\");\n        }\n    }\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): any {\n        try {\n            this.mongodb = PlatformTools.load(\"mongodb\");  // try to load native driver dynamically\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"MongoDB\", \"mongodb\");\n        }\n    }\n\n    /**\n     * Builds connection url that is passed to underlying driver to perform connection to the mongodb database.\n     */\n    protected buildConnectionUrl(): string {\n        if (this.options.url)\n            return this.options.url;\n\n        return `mongodb://${this.options.host || \"127.0.0.1\"}:${this.options.port || \"27017\"}/${this.options.database}`;\n    }\n\n}"],"sourceRoot":"../.."}