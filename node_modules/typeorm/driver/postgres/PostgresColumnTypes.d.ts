/**
 * Numeric type.
 * Small-range integer type.
 * Size: 2 bytes.
 * Range: -32768 to +32767.
 */
export declare type SmallintColumnType = "smallint" | "int2";
/**
 * Integer type.
 * Size: 4 bytes.
 * Range: -2147483648 to +2147483647.
 */
export declare type IntegerColumnType = "integer" | "int" | "int4";
/**
 * Numeric type.
 * Large-range integer type.
 * Size: 8 bytes.
 * Range: -9223372036854775808 to 9223372036854775807.
 */
export declare type BigintColumnType = "bigint" | "int8";
/**
 * Numeric type.
 * User-specified precision, exact.
 * Size: variable.
 * Range: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point.
 */
export declare type DecimalColumnType = "decimal";
/**
 * Numeric type.
 * User-specified precision, exact.
 * Size: variable.
 * Range: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point.
 */
export declare type NumericColumnType = "numeric" | "decimal";
/**
 * Numeric type.
 * Variable-precision, inexact.
 * Size: 4 bytes.
 * Range: 6 decimal digits precision.
 */
export declare type RealColumnType = "real" | "float4";
/**
 * Numeric type.
 * Variable-precision, inexact.
 * Size: 8 bytes.
 * Range: 15 decimal digits precision.
 */
export declare type DoublePrecisionColumnType = "double precision" | "float8";
/**
 * Numeric type.
 * Small autoincrementing integer.
 * Size: 2 bytes.
 * Range: 1 to 32767.
 */
export declare type SmallserialColumnType = "smallserial" | "serial2";
/**
 * Numeric type.
 * Autoincrementing integer.
 * Size: 4 bytes.
 * Range: 1 to 2147483647.
 */
export declare type SerialColumnType = "serial" | "serial4";
/**
 * Numeric type.
 * Large autoincrementing integer.
 * Size: 8 bytes.
 * Range: -92233720368547758.08 to +92233720368547758.07
 */
export declare type BigserialColumnType = "bigserial" | "serial8";
/**
 * Monetary type.
 * Currency amount.
 * Size: 8 bytes.
 * Range: 1 to 9223372036854775807.
 */
export declare type MoneyColumnType = "money";
/**
 * Character type.
 * Variable-length with limit type.
 */
export declare type VarcharColumnType = "character varying" | "varchar";
/**
 * Character type.
 * Fixed-length, blank padded type.
 */
export declare type CharColumnType = "character" | "char";
/**
 * Character type.
 * Variable-length character string.
 */
export declare type TextColumnType = "text";
/**
 * Variable-length binary string type.
 * Size: 1 or 4 bytes plus the actual binary string.
 */
export declare type ByteaColumnType = "bytea";
/**
 * Both date and time type.
 * With or without timezone.
 * Size: 8 bytes.
 * Value range: from 4713 BC to 294276 AD.
 */
export declare type TimestampColumnType = "timestamp";
/**
 * Date (no time of day) type.
 * With or without timezone.
 * Size: 4 bytes.
 * Value range: from 4713 BC to 5874897 AD.
 *
 * This column type has additional options.
 */
export declare type DateColumnType = "date";
/**
 * Time of day (no date) type.
 * With or without timezone.
 * Size: 8 bytes or 12 bytes (depend on timezone).
 * Value range: from 00:00:00+1459 BC to 24:00:00-1459.
 *
 * This column type has additional options.
 */
export declare type TimeColumnType = "time";
/**
 * Time interval type.
 * Size: 12 bytes.
 * Value range: from -178000000 years to 178000000 years.
 */
export declare type IntervalColumnType = "interval";
/**
 * Boolean type.
 * Size: 1 byte.
 */
export declare type BooleanColumnType = "boolean" | "bool";
/**
 * Enumerated type.
 * Enumerated (enum) types are data types that comprise a static, ordered set of values.
 * This column type has additional options.
 */
export declare type EnumColumnType = "enum";
/**
 * Geometric type - point.
 * Stores values in a (x,y) format.
 * Size: 16 bytes.
 */
export declare type PointColumnType = "point";
/**
 * Geometric type - infinite line.
 * Stores values in a ((x1,y1),(x2,y2)) format.
 * Size: 32 bytes.
 */
export declare type LineColumnType = "line";
/**
 * Geometric type - finite line segment.
 * Stores values in a ((x1,y1),(x2,y2)) format.
 * Size: 32 bytes.
 */
export declare type LsegColumnType = "lseg";
/**
 * Geometric type - rectangular box.
 * Stores values in a ((x1,y1),(x2,y2)) format.
 * Size: 32 bytes.
 */
export declare type BoxColumnType = "box";
/**
 * Geometric type - circle.
 * Stores values in a <(x,y),r> format.
 * Size: 24 bytes.
 */
export declare type CircleColumnType = "circle";
/**
 * Geometric type - path.
 * Size: 40+16n bytes.
 */
export declare type PathColumnType = "path";
/**
 * Geometric type - path (similar to polygon).
 */
export declare type PolygonColumnType = "polygon";
/**
 * IPv4 and IPv6 networks.
 * Size: 7 or 19 bytes.
 */
export declare type CidrColumnType = "cidr";
/**
 * IPv4 and IPv6 hosts and networks type.
 * Size: 7 or 19 bytes.
 */
export declare type InetColumnType = "inet";
/**
 * MAC addresses type.
 * Size: 6 bytes.
 */
export declare type MacaddrColumnType = "macaddr";
/**
 * Bit types are used to store bit masks with fixed length.
 */
export declare type BitColumnType = "bit";
/**
 * Bit type are used to store bit masks with variable length.
 */
export declare type VarbitColumnType = "bit varying" | "varbit";
/**
 * This is a sorted list of distinct words that have been normalized
 * to merge different variants of the same word, called as "lexemes".
 */
export declare type TsvectorColumnType = "tsvector";
/**
 * This stores lexemes that are to be searched for,
 * and combines them honoring the Boolean operators & (AND), | (OR), and ! (NOT).
 * Parentheses can be used to enforce grouping of the operators.
 */
export declare type TsqueryColumnType = "tsquery";
/**
 * Universally Unique Identifier type.
 */
export declare type UUIDColumnType = "UUID";
/**
 * The xml data type can be used to store XML data.
 */
export declare type XmlColumnType = "xml";
/**
 * The json data type can be used to store JSON (JavaScript Object Notation) data.
 */
export declare type JsonColumnType = "json";
/**
 * The jsonb data type can be used to store JSON (JavaScript Object Notation) in a binary format.
 */
export declare type JsonbColumnType = "jsonb";
/**
 * Column types where column length is used.
 */
export declare type WithLengthColumnType = VarcharColumnType | CharColumnType | IntervalColumnType | BitColumnType | VarbitColumnType;
/**
 * Column types where time options are used.
 */
export declare type WithTimeColumnType = TimeColumnType | TimestampColumnType;
/**
 * All other column types without extra options used.
 */
export declare type SimpleColumnType = SmallintColumnType | IntegerColumnType | BigintColumnType | DecimalColumnType | RealColumnType | DoublePrecisionColumnType | SmallserialColumnType | SerialColumnType | BigserialColumnType | MoneyColumnType | TextColumnType | ByteaColumnType | DateColumnType | BooleanColumnType | PointColumnType | LineColumnType | LsegColumnType | BoxColumnType | CircleColumnType | PathColumnType | PolygonColumnType | CidrColumnType | InetColumnType | MacaddrColumnType | TsvectorColumnType | TsqueryColumnType | UUIDColumnType | XmlColumnType | JsonColumnType | JsonbColumnType;
/**
 * All column types supported by a database.
 */
export declare type AllColumnType = SimpleColumnType | WithLengthColumnType | WithTimeColumnType | NumericColumnType | EnumColumnType;
