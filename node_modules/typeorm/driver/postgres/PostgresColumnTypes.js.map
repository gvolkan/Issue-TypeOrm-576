{"version":3,"sources":["../../src/driver/postgres/PostgresColumnTypes.ts"],"names":[],"mappings":";AAAA,4EAA4E;AAC5E,gBAAgB;AAChB,4EAA4E","file":"PostgresColumnTypes.js","sourcesContent":["// -------------------------------------------------------------------------\n// Numeric Types\n// -------------------------------------------------------------------------\n\n/**\n * Numeric type.\n * Small-range integer type.\n * Size: 2 bytes.\n * Range: -32768 to +32767.\n */\nexport type SmallintColumnType = \"smallint\"|\"int2\";\n\n/**\n * Integer type.\n * Size: 4 bytes.\n * Range: -2147483648 to +2147483647.\n */\nexport type IntegerColumnType = \"integer\"|\"int\"|\"int4\";\n\n/**\n * Numeric type.\n * Large-range integer type.\n * Size: 8 bytes.\n * Range: -9223372036854775808 to 9223372036854775807.\n */\nexport type BigintColumnType = \"bigint\"|\"int8\";\n\n/**\n * Numeric type.\n * User-specified precision, exact.\n * Size: variable.\n * Range: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point.\n */\nexport type DecimalColumnType = \"decimal\";\n\n/**\n * Numeric type.\n * User-specified precision, exact.\n * Size: variable.\n * Range: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point.\n */\nexport type NumericColumnType = \"numeric\"|\"decimal\";\n\n/**\n * Numeric type.\n * Variable-precision, inexact.\n * Size: 4 bytes.\n * Range: 6 decimal digits precision.\n */\nexport type RealColumnType = \"real\"|\"float4\";\n\n/**\n * Numeric type.\n * Variable-precision, inexact.\n * Size: 8 bytes.\n * Range: 15 decimal digits precision.\n */\nexport type DoublePrecisionColumnType = \"double precision\"|\"float8\";\n\n/**\n * Numeric type.\n * Small autoincrementing integer.\n * Size: 2 bytes.\n * Range: 1 to 32767.\n */\nexport type SmallserialColumnType = \"smallserial\"|\"serial2\";\n\n/**\n * Numeric type.\n * Autoincrementing integer.\n * Size: 4 bytes.\n * Range: 1 to 2147483647.\n */\nexport type SerialColumnType = \"serial\"|\"serial4\";\n\n/**\n * Numeric type.\n * Large autoincrementing integer.\n * Size: 8 bytes.\n * Range: -92233720368547758.08 to +92233720368547758.07\n */\nexport type BigserialColumnType = \"bigserial\"|\"serial8\";\n\n// -------------------------------------------------------------------------\n// Monetary Types\n// -------------------------------------------------------------------------\n\n/**\n * Monetary type.\n * Currency amount.\n * Size: 8 bytes.\n * Range: 1 to 9223372036854775807.\n */\nexport type MoneyColumnType = \"money\";\n\n// -------------------------------------------------------------------------\n// Character Types\n// -------------------------------------------------------------------------\n\n/**\n * Character type.\n * Variable-length with limit type.\n */\nexport type VarcharColumnType = \"character varying\"|\"varchar\";\n\n/**\n * Character type.\n * Fixed-length, blank padded type.\n */\nexport type CharColumnType = \"character\"|\"char\";\n\n/**\n * Character type.\n * Variable-length character string.\n */\nexport type TextColumnType = \"text\";\n\n// -------------------------------------------------------------------------\n// Binary Data Types\n// -------------------------------------------------------------------------\n\n/**\n * Variable-length binary string type.\n * Size: 1 or 4 bytes plus the actual binary string.\n */\nexport type ByteaColumnType = \"bytea\";\n\n// -------------------------------------------------------------------------\n// Date/Time Types\n// -------------------------------------------------------------------------\n\n/**\n * Both date and time type.\n * With or without timezone.\n * Size: 8 bytes.\n * Value range: from 4713 BC to 294276 AD.\n */\nexport type TimestampColumnType = \"timestamp\";\n\n/**\n * Date (no time of day) type.\n * With or without timezone.\n * Size: 4 bytes.\n * Value range: from 4713 BC to 5874897 AD.\n *\n * This column type has additional options.\n */\nexport type DateColumnType = \"date\";\n\n/**\n * Time of day (no date) type.\n * With or without timezone.\n * Size: 8 bytes or 12 bytes (depend on timezone).\n * Value range: from 00:00:00+1459 BC to 24:00:00-1459.\n *\n * This column type has additional options.\n */\nexport type TimeColumnType = \"time\";\n\n/**\n * Time interval type.\n * Size: 12 bytes.\n * Value range: from -178000000 years to 178000000 years.\n */\nexport type IntervalColumnType = \"interval\";\n\n// -------------------------------------------------------------------------\n// Boolean Type\n// -------------------------------------------------------------------------\n\n/**\n * Boolean type.\n * Size: 1 byte.\n */\nexport type BooleanColumnType = \"boolean\"|\"bool\";\n\n// -------------------------------------------------------------------------\n// Enumerated Type\n// -------------------------------------------------------------------------\n\n/**\n * Enumerated type.\n * Enumerated (enum) types are data types that comprise a static, ordered set of values.\n * This column type has additional options.\n */\nexport type EnumColumnType = \"enum\";\n\n// -------------------------------------------------------------------------\n// Geometric Types\n// -------------------------------------------------------------------------\n\n/**\n * Geometric type - point.\n * Stores values in a (x,y) format.\n * Size: 16 bytes.\n */\nexport type PointColumnType = \"point\";\n\n/**\n * Geometric type - infinite line.\n * Stores values in a ((x1,y1),(x2,y2)) format.\n * Size: 32 bytes.\n */\nexport type LineColumnType = \"line\";\n\n/**\n * Geometric type - finite line segment.\n * Stores values in a ((x1,y1),(x2,y2)) format.\n * Size: 32 bytes.\n */\nexport type LsegColumnType = \"lseg\";\n\n/**\n * Geometric type - rectangular box.\n * Stores values in a ((x1,y1),(x2,y2)) format.\n * Size: 32 bytes.\n */\nexport type BoxColumnType = \"box\";\n\n/**\n * Geometric type - circle.\n * Stores values in a <(x,y),r> format.\n * Size: 24 bytes.\n */\nexport type CircleColumnType = \"circle\";\n\n/**\n * Geometric type - path.\n * Size: 40+16n bytes.\n */\nexport type PathColumnType = \"path\";\n\n/**\n * Geometric type - path (similar to polygon).\n */\nexport type PolygonColumnType = \"polygon\";\n\n// -------------------------------------------------------------------------\n// Network Address Types\n// -------------------------------------------------------------------------\n\n/**\n * IPv4 and IPv6 networks.\n * Size: 7 or 19 bytes.\n */\nexport type CidrColumnType = \"cidr\";\n\n/**\n * IPv4 and IPv6 hosts and networks type.\n * Size: 7 or 19 bytes.\n */\nexport type InetColumnType = \"inet\";\n\n/**\n * MAC addresses type.\n * Size: 6 bytes.\n */\nexport type MacaddrColumnType = \"macaddr\";\n\n// -------------------------------------------------------------------------\n// Bit String Types\n// -------------------------------------------------------------------------\n\n/**\n * Bit types are used to store bit masks with fixed length.\n */\nexport type BitColumnType = \"bit\";\n\n/**\n * Bit type are used to store bit masks with variable length.\n */\nexport type VarbitColumnType = \"bit varying\"|\"varbit\";\n\n// -------------------------------------------------------------------------\n// Text Search Types\n// -------------------------------------------------------------------------\n\n/**\n * This is a sorted list of distinct words that have been normalized\n * to merge different variants of the same word, called as \"lexemes\".\n */\nexport type TsvectorColumnType = \"tsvector\";\n\n/**\n * This stores lexemes that are to be searched for,\n * and combines them honoring the Boolean operators & (AND), | (OR), and ! (NOT).\n * Parentheses can be used to enforce grouping of the operators.\n */\nexport type TsqueryColumnType = \"tsquery\";\n\n// -------------------------------------------------------------------------\n// Other Types\n// -------------------------------------------------------------------------\n\n/**\n * Universally Unique Identifier type.\n */\nexport type UUIDColumnType = \"UUID\";\n\n/**\n * The xml data type can be used to store XML data.\n */\nexport type XmlColumnType = \"xml\";\n\n/**\n * The json data type can be used to store JSON (JavaScript Object Notation) data.\n */\nexport type JsonColumnType = \"json\";\n\n/**\n * The jsonb data type can be used to store JSON (JavaScript Object Notation) in a binary format.\n */\nexport type JsonbColumnType = \"jsonb\";\n\n// -------------------------------------------------------------------------\n// Merged Types\n// -------------------------------------------------------------------------\n\n/**\n * Column types where column length is used.\n */\nexport type WithLengthColumnType =\n    VarcharColumnType|\n    CharColumnType|\n    IntervalColumnType|\n    BitColumnType|\n    VarbitColumnType;\n\n/**\n * Column types where time options are used.\n */\nexport type WithTimeColumnType =\n    TimeColumnType|\n    TimestampColumnType;\n\n/**\n * All other column types without extra options used.\n */\nexport type SimpleColumnType =\n    SmallintColumnType|\n    IntegerColumnType|\n    BigintColumnType|\n    DecimalColumnType|\n    RealColumnType|\n    DoublePrecisionColumnType|\n    SmallserialColumnType|\n    SerialColumnType|\n    BigserialColumnType|\n    MoneyColumnType|\n    TextColumnType|\n    ByteaColumnType|\n    DateColumnType|\n    BooleanColumnType|\n    PointColumnType|\n    LineColumnType|\n    LsegColumnType|\n    BoxColumnType|\n    CircleColumnType|\n    PathColumnType|\n    PolygonColumnType|\n    CidrColumnType|\n    InetColumnType|\n    MacaddrColumnType|\n    TsvectorColumnType|\n    TsqueryColumnType|\n    UUIDColumnType|\n    XmlColumnType|\n    JsonColumnType|\n    JsonbColumnType;\n\n/**\n * All column types supported by a database.\n */\nexport type AllColumnType =\n    SimpleColumnType|\n    WithLengthColumnType|\n    WithTimeColumnType|\n    NumericColumnType|\n    EnumColumnType;"],"sourceRoot":"../.."}