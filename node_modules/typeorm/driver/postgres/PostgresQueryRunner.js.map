{"version":3,"sources":["../../src/driver/postgres/PostgresQueryRunner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,0FAAuF;AACvF,kFAA+E;AAC/E,yEAAsE;AAEtE,uEAAoE;AACpE,uEAAoE;AACpE,iFAA8E;AAC9E,iFAA8E;AAC9E,4GAAyG;AAMzG;;GAEG;AACH;IAwDI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,6BAAsB,MAAsB;QAAtB,WAAM,GAAN,MAAM,CAAgB;QA5C5C;;;WAGG;QACH,eAAU,GAAG,KAAK,CAAC;QAEnB;;WAEG;QACH,wBAAmB,GAAG,KAAK,CAAC;QAqB5B;;WAEG;QACO,kBAAa,GAAY,KAAK,CAAC;QAEzC;;WAEG;QACO,iBAAY,GAAa,EAAE,CAAC;QAOlC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;IAC7C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,qCAAO,GAAP;QAAA,iBA6BC;QA5BG,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;YACxB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAEpD,EAAE,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC;QAE1C,IAAI,CAAC,yBAAyB,GAAG,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,IAAI;YAClD,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,UAAe,EAAE,OAAiB;gBAClE,EAAE,CAAC,CAAC,GAAG,CAAC;oBAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAE1B,KAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;gBAC7C,KAAI,CAAC,kBAAkB,GAAG,UAAU,CAAC;gBACrC,KAAI,CAAC,eAAe,GAAG,OAAO,CAAC;gBAE/B,UAAU,CAAC,KAAK,CAAC,yBAAuB,KAAI,CAAC,UAAU,iBAAc,EAAE,UAAC,GAAQ;oBAC5E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACN,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,yBAAuB,KAAI,CAAC,UAAU,iBAAc,EAAE,EAAE,EAAE,KAAI,CAAC,CAAC;wBAC7G,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,KAAI,CAAC,CAAC;wBACvD,IAAI,CAAC,GAAG,CAAC,CAAC;oBACd,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,EAAE,CAAC,UAAU,CAAC,CAAC;oBACnB,CAAC;gBACL,CAAC,CAAC,CAAC;YAEP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,qCAAO,GAAP;QACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;YACrB,IAAI,CAAC,eAAe,EAAE,CAAC;QAE3B,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAElE,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACG,8CAAgB,GAAtB;;;;;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;4BACzB,MAAM,IAAI,+DAA8B,EAAE,CAAC;wBAE/C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;wBAChC,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAA;;wBAArC,SAAqC,CAAC;;;;;KACzC;IAED;;;OAGG;IACG,+CAAiB,GAAvB;;;;;wBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;4BAC1B,MAAM,IAAI,uDAA0B,EAAE,CAAC;wBAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAA;;wBAA1B,SAA0B,CAAC;wBAC3B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;KACpC;IAED;;;OAGG;IACG,iDAAmB,GAAzB;;;;;wBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;4BAC1B,MAAM,IAAI,uDAA0B,EAAE,CAAC;wBAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAA;;wBAA5B,SAA4B,CAAC;wBAC7B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;KACpC;IAED;;OAEG;IACH,mCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;QAAvC,iBAmBC;QAlBG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;YAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;QAEhD,iCAAiC;QACjC,2CAA2C;QAC3C,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAO,EAAE,EAAE,IAAI;;;;;4BACV,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;6CAApB,SAAoB;wBAC/C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wBAChE,kBAAkB,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,EAAE,UAAC,GAAQ,EAAE,MAAW;4BAC9D,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,EAAE,KAAI,CAAC,CAAC;gCACtE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,KAAI,CAAC,CAAC;gCACvD,IAAI,CAAC,GAAG,CAAC,CAAC;4BACd,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;4BACpB,CAAC;wBACL,CAAC,CAAC,CAAC;;;;aACN,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,oCAAM,GAAN,UAAO,KAAa,EAAE,UAAkB,EAAE,KAAgB,EAAE,OAAkB;QAA9E,iBAaC;QAZG,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC;QACvD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;YAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;QAEhD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAO,EAAE,EAAE,IAAI;oCAGxB,MAAM;;;4BAFe,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;6CAApB,SAAoB;wBAC/C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;iCACjD,kBAAkB,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;wBAC3E,EAAE,CAAC,CAAC,KAAK,CAAC;4BAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBACnC,EAAE,CAAC,CAAC,OAAO,CAAC;4BAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;wBACzC,EAAE,CAAC,MAAM,CAAC,CAAC;;;;aACd,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACG,oCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,eAAgC;;gBAChF,IAAI,EACJ,OAAO,EACP,MAAM,EACN,GAAG,EAGH,UAAU;;;;+BANH,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;kCACnB,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,OAAI,GAAG,OAAG,EAAV,CAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;iCACvC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;8BACxD,OAAO,CAAC,MAAM,GAAG,CAAC;8BACxB,mBAAgB,SAAS,WAAK,OAAO,kBAAa,MAAM,WAAM,eAAe,GAAG,kBAAe,eAAe,CAAC,YAAY,OAAG,GAAG,EAAE,CAAG;8BACtI,mBAAgB,SAAS,2BAAqB,eAAe,GAAG,kBAAe,eAAe,CAAC,YAAY,OAAG,GAAG,EAAE,CAAG;qCACzG,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;wBAClB,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;iCAAjC,SAAiC;wBACjE,EAAE,CAAC,CAAC,eAAe,CAAC;4BAChB,MAAM,gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,EAAC;wBAEnD,sBAAO,MAAM,EAAC;;;;KACjB;IAED;;OAEG;IACG,oCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,UAAyB;;gBACzE,YAAY,EACZ,eAAe,EACf,KAAK,EACL,YAAY,EACZ,eAAe,EACf,aAAa;;;;uCALE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CACnC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;gCACnF,cAAW,SAAS,eAAS,YAAY,UAAI,eAAe,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,CAAE;uCAC5F,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;0CAC9C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC;wCACrD,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC;wBAC1D,qBAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,aAAa,CAAC,EAAA;;wBAAtC,SAAsC,CAAC;;;;;KAC1C;IAED;;OAEG;IACG,oCAAM,GAAZ,UAAa,SAAiB,EAAE,UAAgC,EAAE,eAAuB;;gBAC/E,eAAe,EACf,UAAU,EAEV,GAAG;;;;0CAHe,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;qCAC7F,UAAU,YAAY,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAC,UAA4B,CAAC,GAAG,CAAC,EAAlC,CAAkC,CAAC,GAAG,eAAe;8BAE9H,mBAAgB,SAAS,iBAAW,eAAiB;wBACjE,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;wBAAjC,SAAiC,CAAC;;;;;KACrC;IAED;;OAEG;IACG,oDAAsB,GAA5B,UAA6B,SAAiB,EAAE,WAAgB,EAAE,QAAa,EAAE,QAAiB;;gBAC1F,GAAG;;;;8BAAG,EAAE;wBACZ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACX,GAAG,GAAG,mBAAgB,SAAS,iDAAuC;iCAClE,0BAAsB,WAAW,+BAAuB,SAAS,kCAA0B,QAAQ,MAAG,CAAA;iCACtG,sBAAoB,WAAW,UAAK,WAAW,QAAK,CAAA,CAAC;wBAC7D,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,GAAG,GAAG,mBAAgB,SAAS,sCAA8B;iCACzD,0BAAsB,WAAW,gBAAU,SAAS,kCAA0B,QAAQ,MAAG,CAAA;iCACzF,sBAAoB,WAAW,UAAK,WAAa,CAAA,CAAC;wBAC1D,CAAC;wBACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;wBACW,qBAAM,IAAI,CAAC,KAAK,CAAC,qCAAmC,SAAS,4BAAuB,QAAU,CAAC,EAAA;;kCAA/F,SAA+F;wBAChI,sBAAO,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;;;;KAC/F;IAED;;OAEG;IACG,6CAAe,GAArB,UAAsB,SAAiB;;;;;4BACd,qBAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAAC,CAAC,EAAA;;uCAAxC,SAAwC;wBAC7D,sBAAO,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;KAChE;IAED;;OAEG;IACG,8CAAgB,GAAtB,UAAuB,UAAoB;;gBAMjC,gBAAgB,EAChB,SAAS,EACT,UAAU,EACV,UAAU,EAGV,cAAc,EACd,aAAa,EACb,cAAc;;;;wBAbpB,6CAA6C;wBAC7C,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;4BAClC,MAAM,gBAAC,EAAE,EAAC;2CAGW,UAAU,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,GAAG,GAAG,IAAI,GAAG,GAAG,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;oCACrD,oEAAkE,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,6BAAwB,gBAAgB,MAAG;qCAChK,qEAAmE,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,MAAG;qCACzH,mTAEuC,gBAAgB,uDAAkD,IAAI,CAAC,UAAU,oCAAiC;yCACzJ,yGAAuG,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,0CAAuC;wCACjM,+EAA6E,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,qCAAkC;yCAClK,8ZAG+B,IAAI,CAAC,UAAU,kCAA6B,IAAI,CAAC,MAAM,MAAG;wBACV,qBAAM,OAAO,CAAC,GAAG,CAAC;gCACpH,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;gCACrB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;gCACtB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;gCACtB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;gCAC1B,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;gCACzB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;6BAC7B,CAAC,EAAA;;6BAPoG,SAOpG;wBAEF,yDAAyD;wBACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;4BACjB,MAAM,gBAAC,EAAE,EAAC;wBAEd,yCAAyC;wBACzC,sBAAO,QAAQ,CAAC,GAAG,CAAC,UAAA,OAAO;gCACvB,IAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;gCAE3D,gDAAgD;gCAChD,WAAW,CAAC,OAAO,GAAG,SAAS;qCAC1B,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA3C,CAA2C,CAAC;qCAC/D,GAAG,CAAC,UAAA,QAAQ;oCACT,IAAM,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,0BAA0B,CAAC,KAAK,SAAS,IAAI,QAAQ,CAAC,0BAA0B,CAAC,KAAK,IAAI,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC,0BAA0B,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;oCACzN,IAAM,WAAW,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,cAAY,QAAQ,CAAC,YAAY,CAAC,wBAAqB;2CACnG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,gBAAa,QAAQ,CAAC,YAAY,CAAC,0BAAsB;2CACxF,0BAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;oCAEnE,IAAM,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;oCACxC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;oCAC5C,YAAY,CAAC,IAAI,GAAG,UAAU,CAAC;oCAC/B,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,gBAAgB,CAAC,KAAK,SAAS,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,qBAAqB,EAAE,EAAE,CAAC,GAAG,SAAS,CAAC;oCACnL,YAAY,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,KAAK,CAAC;oCAC5D,yEAAyE;oCACzE,YAAY,CAAC,WAAW,GAAG,WAAW,CAAC;oCACvC,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC,8BAA8B;oCACzD,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,iBAAiB,CAAC,KAAM,QAAM,QAAQ,CAAC,YAAY,CAAC,SAAI,QAAQ,CAAC,aAAa,CAAG,EAArF,CAAqF,CAAC,CAAC;oCAC1I,MAAM,CAAC,YAAY,CAAC;gCACxB,CAAC,CAAC,CAAC;gCAEP,4BAA4B;gCAC5B,WAAW,CAAC,WAAW,GAAG,WAAW;qCAChC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA7C,CAA6C,CAAC;qCACnE,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,IAAI,mCAAgB,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE,UAAU,CAAC,aAAa,CAAC,CAAC,EAA9E,CAA8E,CAAC,CAAC;gCAEvG,qDAAqD;gCACrD,WAAW,CAAC,WAAW,GAAG,aAAa;qCAClC,MAAM,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA/C,CAA+C,CAAC;qCACvE,GAAG,CAAC,UAAA,YAAY,IAAI,OAAA,IAAI,mCAAgB,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAArE,CAAqE,CAAC,CAAC,CAAC,2BAA2B;gCAE5H,oDAAoD;gCACpD;;;;yCAIS;gCAET,+CAA+C;gCAC/C,WAAW,CAAC,OAAO,GAAG,SAAS;qCAC1B,MAAM,CAAC,UAAA,OAAO;oCACX,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;wCAC7C,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC;wCACxF,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC;wCACxF,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,iBAAiB,CAAC,KAAK,OAAO,CAAC,YAAY,CAAC,EAAhD,CAAgD,CAAC,CAAC,CAAC;gCACtF,CAAC,CAAC;qCACD,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,EAArB,CAAqB,CAAC;qCACrC,MAAM,CAAC,UAAC,KAAK,EAAE,KAAK,EAAE,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,EAA7B,CAA6B,CAAC,CAAC,SAAS;qCACvE,GAAG,CAAC,UAAA,WAAW;oCACZ,IAAM,WAAW,GAAG,SAAS;yCACxB,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,IAAI,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,EAAnF,CAAmF,CAAC;yCACtG,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,aAAa,CAAC,EAAtB,CAAsB,CAAC,CAAC;oCAE5C,MAAM,CAAC,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,CAAC,sBAAsB,CAAC,CAAC;gCAC1G,CAAC,CAAC,CAAC;gCAEP,MAAM,CAAC,WAAW,CAAC;4BACvB,CAAC,CAAC,EAAC;;;;KACN;IAED;;OAEG;IACG,sCAAQ,GAAd,UAAe,SAAiB;;gBACtB,GAAG;;;;8BAAG,oEAAkE,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,4BAAuB,SAAS,MAAG;wBACrJ,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;iCAArB,SAAqB;wBACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;KACvC;IAED;;OAEG;IACG,yCAAW,GAAjB,UAAkB,KAAkB;;;gBAC1B,iBAAiB,EAEnB,GAAG,EAKD,iBAAiB;;;;4CAPG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;wBAC1G,qBAAM,IAAI,CAAC,KAAK,CAAC,mCAAgC,IAAI,CAAC,UAAU,OAAG,CAAC,EAAA;;wBAApE,SAAoE,CAAC;8BAC3D,oBAAiB,KAAK,CAAC,IAAI,YAAM,iBAAmB;wBAC9D,GAAG,IAAI,KAAK,CAAC,OAAO;6BACf,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC;6BACjC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,uBAAoB,KAAK,CAAC,IAAI,SAAI,MAAM,CAAC,IAAI,qBAAc,MAAM,CAAC,IAAI,QAAI,EAA1E,CAA0E,CAAC;6BACzF,IAAI,CAAC,GAAG,CAAC,CAAC;4CACW,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC;wBACjG,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;4BAC7B,GAAG,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC;wBAC9F,GAAG,IAAI,GAAG,CAAC;wBACX,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;;;KACzB;IAED;;OAEG;IACG,uCAAS,GAAf,UAAgB,SAAiB;;gBACzB,GAAG;;;;8BAAG,kBAAe,SAAS,OAAG;wBACrC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;;;KACzB;IAED;;OAEG;IACG,uCAAS,GAAf,UAAgB,SAAiB,EAAE,UAAkB;;gBAC3C,GAAG;;;;8BAAG,qEAAmE,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,4BAAuB,SAAS,6BAAwB,UAAU,MAAG;wBACxL,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;iCAArB,SAAqB;wBACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;KACvC;IAED;;OAEG;IACG,uCAAS,GAAf,UAAgB,iBAAqC,EAAE,MAAoB;;gBACjE,SAAS,EACT,GAAG;;4BADS,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;sBAC3F,mBAAgB,SAAS,eAAS,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,CAAG;gBACxF,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;KAC1B;IAED;;OAEG;IACG,wCAAU,GAAhB,UAAiB,iBAAqC,EAAE,OAAuB;;;gBACrE,OAAO;;;;kCAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,iBAAwB,EAAE,MAAM,CAAC,EAAhD,CAAgD,CAAC;wBACvF,qBAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;wBAA1B,SAA0B,CAAC;;;;;KAC9B;IAED;;OAEG;IACG,0CAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,qBAA0C;;gBAExI,WAAW,EAUX,SAAS,EAUT,SAAS;;;;sCApB4B,SAAS;6BAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;wBACxC,WAAW,GAAG,iBAAiB,CAAC;;4BAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;wBAA3D,WAAW,GAAG,SAA6C,CAAC;;;wBAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;4BACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;oCAEzB,SAAS;wBACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;4BAChD,SAAS,GAAG,qBAAqB,CAAC;wBACtC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;wBAC1F,CAAC;wBAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;4BACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;oCAEpE,SAAS;wBACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;4BAChD,SAAS,GAAG,qBAAqB,CAAC;wBACtC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;4BAC9B,SAAS,CAAC,IAAI,GAAG,qBAAqB,CAAC;wBAC3C,CAAC;wBAED,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,EAAC;;;;KAC/D;IAED;;OAEG;IACG,0CAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,SAAuB;;gBAErH,WAAW,EAUX,SAAS,EAaL,GAAG,EAWH,GAAG;;;;sCAlC8B,SAAS;6BAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;wBACxC,WAAW,GAAG,iBAAiB,CAAC;;4BAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;wBAA3D,WAAW,GAAG,SAA6C,CAAC;;;wBAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;4BACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;oCAEzB,SAAS;wBACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;4BAChD,SAAS,GAAG,qBAAqB,CAAC;wBACtC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;wBAC1F,CAAC;wBAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;4BACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;6BAExG,CAAA,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI;4BACjC,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAA,EADjC,wBACiC;8BAEvB,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,OAAG;wBAC9E,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;4BACpC,GAAG,IAAI,WAAS,SAAS,CAAC,IAAM,CAAC;wBACrC,CAAC;wBACD,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;4BACpC,GAAG,IAAI,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC;wBAC1C,CAAC;wBACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;6BAGtB,CAAA,SAAS,CAAC,UAAU,KAAK,SAAS,CAAC,UAAU,CAAA,EAA7C,wBAA6C;8BACnC,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,OAAG;wBAC9E,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;4BACvB,GAAG,IAAI,gBAAgB,CAAC;wBAC5B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,GAAG,IAAI,eAAe,CAAC;wBAC3B,CAAC;wBACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;6BAItB,CAAA,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,WAAW,CAAA,EAA/C,yBAA+C;6BAC3C,CAAA,CAAC,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,CAAA,EAAnD,yBAAmD;wBACnD,qBAAM,IAAI,CAAC,KAAK,CAAC,uBAAoB,WAAW,CAAC,IAAI,6BAAsB,WAAW,CAAC,IAAI,aAAM,SAAS,CAAC,IAAI,OAAG,CAAC,EAAA;;wBAAnH,SAAmH,CAAC;wBACpH,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,kCAA2B,WAAW,CAAC,IAAI,gBAAY,CAAC,EAAA;;wBAA1I,SAA0I,CAAC;;6BAE3I,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,oBAAgB,CAAC,EAAA;;wBAAnG,SAAmG,CAAC;wBACpG,qBAAM,IAAI,CAAC,KAAK,CAAC,qBAAkB,WAAW,CAAC,IAAI,cAAU,CAAC,EAAA;;wBAA9D,SAA8D,CAAC;;;6BAInE,CAAA,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC,OAAO,CAAA,EAAvC,yBAAuC;wBACvC,qBAAM,IAAI,CAAC,KAAK,CAAC,yBAAsB,WAAW,CAAC,IAAI,aAAM,SAAS,CAAC,IAAI,eAAS,SAAS,CAAC,OAAO,MAAG,CAAC,EAAA;;wBAAzG,SAAyG,CAAC;;;6BAG1G,CAAA,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,CAAA,EAAzC,yBAAyC;6BACrC,CAAA,SAAS,CAAC,QAAQ,KAAK,IAAI,CAAA,EAA3B,yBAA2B;wBAC3B,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,+BAAwB,SAAS,CAAC,IAAI,qBAAc,SAAS,CAAC,IAAI,QAAI,CAAC,EAAA;;wBAAxH,SAAwH,CAAC;;;6BAElH,CAAA,SAAS,CAAC,QAAQ,KAAK,KAAK,CAAA,EAA5B,yBAA4B;wBACnC,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,gCAAyB,SAAS,CAAC,IAAI,OAAG,CAAC,EAAA;;wBAA5F,SAA4F,CAAC;;;6BAKjG,CAAA,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC,OAAO,CAAA,EAAvC,yBAAuC;6BACnC,CAAA,SAAS,CAAC,OAAO,KAAK,IAAI,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS,CAAA,EAA7D,yBAA6D;wBAC7D,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,uBAAiB,SAAS,CAAC,OAAS,CAAC,EAAA;;wBAAvH,SAAuH,CAAC;;;6BAEjH,CAAA,SAAS,CAAC,OAAO,KAAK,IAAI,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS,CAAA,EAA7D,yBAA6D;wBACpE,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,oBAAgB,CAAC,EAAA;;wBAAnG,SAAmG,CAAC;;;;;;KAI/G;IAED;;OAEG;IACG,2CAAa,GAAnB,UAAoB,WAAwB,EAAE,cAAsE;;;gBAC1G,cAAc;;;;yCAAG,cAAc,CAAC,GAAG,CAAC,UAAM,aAAa;;gCACzD,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,EAAC;;6BAC3F,CAAC;wBAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAA;;wBAAjC,SAAiC,CAAC;;;;;KACrC;IAED;;OAEG;IACG,wCAAU,GAAhB,UAAiB,KAAkB,EAAE,MAAoB;;;gBACrD,sBAAO,IAAI,CAAC,KAAK,CAAC,mBAAgB,KAAK,CAAC,IAAI,kBAAW,MAAM,CAAC,IAAI,OAAG,CAAC,EAAC;;;KAC1E;IAED;;OAEG;IACG,yCAAW,GAAjB,UAAkB,KAAkB,EAAE,OAAuB;;;gBACnD,YAAY;;;;uCAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,EAA9B,CAA8B,CAAC;wBAC1E,qBAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAA;;wBAA/B,SAA+B,CAAC;;;;;KACnC;IAED;;OAEG;IACG,+CAAiB,GAAvB,UAAwB,OAAoB;;gBAClC,kBAAkB;;;;6CAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,OAAI,UAAU,CAAC,UAAU,OAAG,EAA5B,CAA4B,CAAC;wBAC9F,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,OAAO,CAAC,IAAI,uCAAgC,OAAO,CAAC,IAAI,YAAQ,CAAC,EAAA;;wBAAlG,SAAkG,CAAC;wBACnG,qBAAM,IAAI,CAAC,KAAK,CAAC,4BAAyB,OAAO,CAAC,IAAI,YAAQ,CAAC,EAAA;;wBAA/D,SAA+D,CAAC;6BAC5D,CAAA,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA7B,wBAA6B;wBAC7B,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,OAAO,CAAC,IAAI,4BAAsB,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,EAAA;;wBAApG,SAAoG,CAAC;;;;;;KAC5G;IAED;;OAEG;IACG,8CAAgB,GAAtB,UAAuB,iBAAqC,EAAE,UAA4B;;gBAChF,SAAS,EACX,GAAG;;4BADW,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;sBAC7F,mBAAgB,SAAS,4BAAqB,UAAU,CAAC,IAAI,QAAI;qBACvE,oBAAiB,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAK,CAAA;qBAC3D,kBAAe,UAAU,CAAC,mBAAmB,aAAM,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAI,CAAA;gBAC1G,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;oBAAC,GAAG,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;gBACpE,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;KAC1B;IAED;;OAEG;IACG,+CAAiB,GAAvB,UAAwB,iBAAqC,EAAE,WAA+B;;;gBACpF,QAAQ;;;;mCAAG,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAA3D,CAA2D,CAAC;wBAC3G,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;wBAA3B,SAA2B,CAAC;;;;;KAC/B;IAED;;OAEG;IACG,4CAAc,GAApB,UAAqB,iBAAqC,EAAE,UAA4B;;gBAC9E,SAAS,EACT,GAAG;;4BADS,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;sBAC3F,mBAAgB,SAAS,6BAAsB,UAAU,CAAC,IAAI,OAAG;gBAC7E,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;KAC1B;IAED;;OAEG;IACG,6CAAe,GAArB,UAAsB,iBAAqC,EAAE,WAA+B;;;gBAClF,QAAQ;;;;mCAAG,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAAzD,CAAyD,CAAC;wBACzG,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;wBAA3B,SAA2B,CAAC;;;;;KAC/B;IAED;;OAEG;IACG,yCAAW,GAAjB,UAAkB,SAAiB,EAAE,KAAkB;;gBAC7C,WAAW,EACX,GAAG;;;;sCADW,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,OAAI,UAAU,OAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;8BACxE,aAAU,KAAK,CAAC,QAAQ,GAAG,SAAS,GAAG,EAAE,iBAAU,KAAK,CAAC,IAAI,gBAAS,SAAS,WAAK,WAAW,MAAG;wBAC9G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;;;KACzB;IAED;;OAEG;IACG,uCAAS,GAAf,UAAgB,SAAiB,EAAE,SAAiB,EAAE,WAA4B;QAA5B,4BAAA,EAAA,mBAA4B;;gBAKxE,GAAG;;;;6BAJL,WAAW,EAAX,wBAAW;wBACX,qBAAM,IAAI,CAAC,KAAK,CAAC,sBAAmB,SAAS,4BAAwB,CAAC,EAAA;;wBAAtE,SAAsE,CAAC;;;8BAG/D,kBAAe,SAAS,OAAG;wBACvC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;;;KACzB;IAED;;OAEG;IACG,sCAAQ,GAAd,UAAe,SAAiB;;;;4BAC5B,qBAAM,IAAI,CAAC,KAAK,CAAC,sBAAmB,SAAS,OAAG,CAAC,EAAA;;wBAAjD,SAAiD,CAAC;;;;;KACrD;IAED;;OAEG;IACG,2CAAa,GAAnB;;;gBAGc,gBAAgB;;;4BAF1B,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;wBAA7B,SAA6B,CAAC;;;;2CAED,gHAA4G,IAAI,CAAC,UAAU,MAAG;wBAClH,qBAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAA;;sCAAlC,SAAkC;wBACvE,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC,EAAA;;wBAA/D,SAA+D,CAAC;wBAEhE,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;wBAA9B,SAA8B,CAAC;;;;;;;wBAI3B,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;wBAAhC,SAAgC,CAAC;;;;;6BAErC,MAAM,OAAK,CAAC;;;;;KAEnB;IAED;;;;OAIG;IACH,6CAAe,GAAf;QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACH,8CAAgB,GAAhB;QACI,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,0CAAY,GAAZ;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IASD,sBAAc,uCAAM;QAPpB,4EAA4E;QAC5E,oBAAoB;QACpB,4EAA4E;QAE5E;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAS,CAAC;QACzC,CAAC;;;OAAA;IAKD,sBAAc,2CAAU;QAHxB;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,IAAI,SAAS,CAAC;QACvD,CAAC;;;OAAA;IAED;;OAEG;IACO,yCAAW,GAArB,UAAsB,aAA4B,EAAE,UAAsB;QAAtB,2BAAA,EAAA,cAAsB;QACtE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,IAAI,GAAG,GAAG,GAAG,MAAM,GAAG,CAAC,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC,EAA9C,CAA8C,CAAC,CAAC;IAC1G,CAAC;IAED;;OAEG;IACO,kDAAoB,GAA9B,UAA+B,MAAoB,EAAE,WAAoB;QACrE,IAAI,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QAClC,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC;YACtD,CAAC,IAAI,SAAS,CAAC;QACnB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC;YAC9C,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;QAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC;YAC3B,CAAC,IAAI,WAAW,CAAC;QACrB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;YACnB,CAAC,IAAI,cAAc,CAAC;QACxB,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YAC1D,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC;QACtC,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YAChE,CAAC,IAAI,6BAA6B,CAAC;QACvC,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAEL,0BAAC;AAAD,CApuBA,AAouBC,IAAA;AApuBY,kDAAmB","file":"PostgresQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {PostgresDriver} from \"./PostgresDriver\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {Connection} from \"../../connection/Connection\";\nimport {ReadStream} from \"fs\";\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class PostgresQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager isolated for this query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Special callback provided by a driver used to release a created connection.\n     */\n    protected releaseCallback: Function;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: PostgresDriver) {\n        this.connection = driver.connection;\n        this.manager = driver.connection.manager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        this.databaseConnectionPromise = new Promise((ok, fail) => {\n            this.driver.pool.connect((err: any, connection: any, release: Function) => {\n                if (err) return fail(err);\n\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n\n                connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any) => {\n                    if (err) {\n                        this.driver.connection.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`, [], this);\n                        this.driver.connection.logger.logQueryError(err, this);\n                        fail(err);\n                    } else {\n                        ok(connection);\n                    }\n                });\n\n            });\n        });\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        if (this.releaseCallback)\n            this.releaseCallback();\n\n        const index = this.driver.connectedQueryRunners.indexOf(this);\n        if (index !== -1) this.driver.connectedQueryRunners.splice(index);\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n        await this.query(\"START TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // console.log(\"query: \", query);\n        // console.log(\"parameters: \", parameters);\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            databaseConnection.query(query, parameters, (err: any, result: any) => {\n                if (err) {\n                    this.driver.connection.logger.logFailedQuery(query, parameters, this);\n                    this.driver.connection.logger.logQueryError(err, this);\n                    fail(err);\n                } else {\n                    ok(result.rows);\n                }\n            });\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        const QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const stream = databaseConnection.query(new QueryStream(query, parameters));\n            if (onEnd) stream.on(\"end\", onEnd);\n            if (onError) stream.on(\"error\", onError);\n            ok(stream);\n        });\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\n        const sql = columns.length > 0\n            ? `INSERT INTO \"${tableName}\"(${columns}) VALUES (${values}) ${ generatedColumn ? ` RETURNING \"${generatedColumn.databaseName}\"` : \"\" }`\n            : `INSERT INTO \"${tableName}\" DEFAULT VALUES ${ generatedColumn ? ` RETURNING \"${generatedColumn.databaseName}\"` : \"\" }`;\n        const parameters = keys.map(key => keyValues[key]);\n        const result: ObjectLiteral[] = await this.query(sql, parameters);\n        if (generatedColumn)\n            return result[0][generatedColumn.databaseName];\n\n        return result;\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\n        const query = `UPDATE \"${tableName}\" SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(query, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \"${tableName}\" WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\", \"level\") ` +\n                `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\") ` +\n                `SELECT \"ancestor\", ${newEntityId} FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql      = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name IN (${tableNamesString})`;\n        const columnsSql     = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}'`;\n        const indicesSql     = `SELECT t.relname AS table_name, i.relname AS index_name, a.attname AS column_name  FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace ns\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN (${tableNamesString}) AND t.relnamespace = ns.OID AND ns.nspname ='${this.schemaName}' ORDER BY t.relname, i.relname`;\n        const foreignKeysSql = `SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND constraint_type = 'FOREIGN KEY'`;\n        const uniqueKeysSql  = `SELECT * FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND constraint_type = 'UNIQUE'`;\n        const primaryKeysSql = `SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\nwhere constraint_type = 'PRIMARY KEY' AND c.table_schema = '${this.schemaName}' and tc.table_catalog = '${this.dbName}'`;\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbUniqueKeys, primaryKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n            this.query(uniqueKeysSql),\n            this.query(primaryKeysSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return dbTables.map(dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"table_name\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"table_name\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const columnType = dbColumn[\"data_type\"].toLowerCase() + (dbColumn[\"character_maximum_length\"] !== undefined && dbColumn[\"character_maximum_length\"] !== null ? (\"(\" + dbColumn[\"character_maximum_length\"] + \")\") : \"\");\n                    const isGenerated = dbColumn[\"column_default\"] === `nextval('${dbColumn[\"table_name\"]}_id_seq'::regclass)` \n                        || dbColumn[\"column_default\"] === `nextval('\"${dbColumn[\"table_name\"]}_id_seq\"'::regclass)` \n                        || /^uuid\\_generate\\_v\\d\\(\\)/.test(dbColumn[\"column_default\"]);\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"column_name\"];\n                    columnSchema.type = columnType;\n                    columnSchema.default = dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined ? dbColumn[\"column_default\"].replace(/::character varying/, \"\") : undefined;\n                    columnSchema.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                    // columnSchema.isPrimary = dbColumn[\"column_key\"].indexOf(\"PRI\") !== -1;\n                    columnSchema.isGenerated = isGenerated;\n                    columnSchema.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                    columnSchema.isUnique = !!dbUniqueKeys.find(key => key[\"constraint_name\"] ===  `uk_${dbColumn[\"table_name\"]}_${dbColumn[\"column_name\"]}`);\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = primaryKeys\n                .filter(primaryKey => primaryKey[\"table_name\"] === tableSchema.name)\n                .map(primaryKey => new PrimaryKeySchema(primaryKey[\"constraint_name\"], primaryKey[\"column_name\"]));\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = dbForeignKeys\n                .filter(dbForeignKey => dbForeignKey[\"table_name\"] === tableSchema.name)\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"constraint_name\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create unique key schemas from the loaded indices\n            /*tableSchema.uniqueKeys = dbUniqueKeys\n                .filter(dbUniqueKey => dbUniqueKey[\"table_name\"] === tableSchema.name)\n                .map(dbUniqueKey => {\n                    return new UniqueKeySchema(dbUniqueKey[\"TABLE_NAME\"], dbUniqueKey[\"CONSTRAINT_NAME\"], [/!* todo *!/]);\n                });*/\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return dbIndex[\"table_name\"] === tableSchema.name &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"index_name\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"index_name\"])) &&\n                        (!dbUniqueKeys.find(key => key[\"constraint_name\"] === dbIndex[\"index_name\"]));\n                })\n                .map(dbIndex => dbIndex[\"index_name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(dbIndexName => {\n                    const columnNames = dbIndices\n                        .filter(dbIndex => dbIndex[\"table_name\"] === tableSchema.name && dbIndex[\"index_name\"] === dbIndexName)\n                        .map(dbIndex => dbIndex[\"column_name\"]);\n\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\n                });\n\n            return tableSchema;\n        });\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\n        await this.query(`CREATE SCHEMA IF NOT EXISTS \"${this.schemaName}\"`);\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        sql += table.columns\n            .filter(column => column.isUnique)\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\n            .join(\" \");\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        let sql = `DROP TABLE \"${tableName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}' AND column_name = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column, false)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (oldColumn.type !== newColumn.type ||\n            oldColumn.name !== newColumn.name) {\n\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\n            if (oldColumn.type !== newColumn.type) {\n                sql += ` TYPE ${newColumn.type}`;\n            }\n            if (oldColumn.name !== newColumn.name) { // todo: make rename in a separate query too\n                sql += ` RENAME TO ` + newColumn.name;\n            }\n            await this.query(sql);\n        }\n\n        if (oldColumn.isNullable !== newColumn.isNullable) {\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\n            if (newColumn.isNullable) {\n                sql += ` DROP NOT NULL`;\n            } else {\n                sql += ` SET NOT NULL`;\n            }\n            await this.query(sql);\n        }\n\n        // update sequence generation\n        if (oldColumn.isGenerated !== newColumn.isGenerated) {\n            if (!oldColumn.isGenerated && newColumn.type !== \"uuid\") {\n                await this.query(`CREATE SEQUENCE \"${tableSchema.name}_id_seq\" OWNED BY \"${tableSchema.name}\".\"${oldColumn.name}\"`);\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT nextval('\"${tableSchema.name}_id_seq\"')`);\n            } else {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`);\n                await this.query(`DROP SEQUENCE \"${tableSchema.name}_id_seq\"`);\n            }\n        }\n\n        if (oldColumn.comment !== newColumn.comment) {\n            await this.query(`COMMENT ON COLUMN \"${tableSchema.name}\".\"${oldColumn.name}\" is '${newColumn.comment}'`);\n        }\n\n        if (oldColumn.isUnique !== newColumn.isUnique) {\n            if (newColumn.isUnique === true) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\n\n            } else if (newColumn.isUnique === false) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\n\n            }\n        }\n\n        if (newColumn.default !== oldColumn.default) {\n            if (newColumn.default !== null && newColumn.default !== undefined) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`);\n\n            } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`);\n\n            }\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        return this.query(`ALTER TABLE \"${table.name}\" DROP \"${column.name}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"${primaryKey.columnName}\"`);\n        await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT IF EXISTS \"${dbTable.name}_pkey\"`);\n        await this.query(`DROP INDEX IF EXISTS \"${dbTable.name}_pkey\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (\"${foreignKey.columnNames.join(\"\\\", \\\"\")}\") ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(\"${foreignKey.referencedColumnNames.join(\"\\\", \\\"\")}\")`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string, isGenerated: boolean = false): Promise<void> {\n        if (isGenerated) {\n            await this.query(`ALTER SEQUENCE \"${tableName}_id_seq\" OWNED BY NONE`);\n        }\n\n        const sql = `DROP INDEX \"${indexName}\"`; // todo: make sure DROP INDEX should not be used here\n        await this.query(sql);\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const selectDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname = '${this.schemaName}'`;\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database!;\n    }\n\n    /**\n     * Schema name shortcut.\n     */\n    protected get schemaName() {\n        return this.driver.options.schemaName || \"default\";\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => \"\\\"\" + key + \"\\\"=$\" + (startIndex + index + 1));\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column.isGenerated === true && column.type !== \"uuid\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" SERIAL\";\n        if (!column.isGenerated || column.type === \"uuid\")\n            c += \" \" + column.type;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isGenerated)\n            c += \" PRIMARY KEY\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            c += \" DEFAULT \" + column.default;\n        }\n        if (column.isGenerated && column.type === \"uuid\" && !column.default)\n            c += \" DEFAULT uuid_generate_v4()\";\n        return c;\n    }\n\n}"],"sourceRoot":"../.."}