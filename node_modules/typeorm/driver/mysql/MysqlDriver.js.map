{"version":3,"sources":["../../src/driver/mysql/MysqlDriver.ts"],"names":[],"mappings":"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","file":"MysqlDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {MysqlConnectionOptions} from \"./MysqlConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\n\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class MysqlDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Connection options.\n     */\n    options: MysqlConnectionOptions;\n\n    /**\n     * Mysql underlying library.\n     */\n    mysql: any;\n\n    /**\n     * Database connection pool created by underlying driver.\n     */\n    pool: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n     * @see https://dev.mysql.com/doc/refman/5.7/en/data-types.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"float\",\n        \"double\",\n        \"decimal\",\n        \"date\",\n        \"datetime\",\n        \"timestamp\",\n        \"time\",\n        \"year\",\n        \"char\",\n        \"varchar\",\n        \"blob\",\n        \"text\",\n        \"tinyblob\",\n        \"tinytext\",\n        \"mediumblob\",\n        \"mediumtext\",\n        \"longblob\",\n        \"longtext\",\n        \"enum\",\n        \"json\"\n    ];\n\n    /**\n     * ORM has special columns and we need to know what database column types should be for those columns.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\"\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    \n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as MysqlConnectionOptions;\n\n        Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n\n        // validate options to make sure everything is set\n        if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)))\n            throw new DriverOptionNotSetError(\"socketPath and host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // load mysql package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            host: this.options.host,\n            user: this.options.username,\n            password: this.options.password,\n            database: this.options.database,\n            port: this.options.port\n        }, this.options.extra || {});\n\n        this.pool = this.mysql.createPool(options);\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\n\n        return new Promise<void>((ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n            this.pool.end(handler);\n            this.pool = undefined;\n        });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        return new MysqlQueryRunner(this);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            escapedParameters.push(parameters[key.substr(1)]);\n            return \"?\";\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.type === Boolean) {\n            return value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\") {\n            return DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.parse(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: string|number, precision?: number, scale?: number }): string {\n        let type = \"\";\n        if (column.type === Number) {\n            type += \"int\";\n\n        } else if (column.type === String) {\n            type += \"varchar\";\n\n        } else if (column.type === Date) {\n            type += \"datetime\";\n\n        } else if (column.type === Boolean) {\n            type += \"tinyint(1)\";\n\n        } else if (column.type === Object) {\n            type += \"text\";\n\n        } else if (column.type === \"simple-array\") {\n            type += \"text\";\n\n        } else {\n            type += column.type;\n        }\n\n        // normalize shortcuts\n        if (type === \"integer\")\n            type = \"int\";\n\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n\n        } else if (column.precision && column.scale) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision) {\n            type += \"(\" + column.precision + \")\";\n\n        } else if (column.scale) {\n            type += \"(\" + column.scale + \")\";\n        }\n\n        // set default required length if those were not specified\n        if (type === \"varchar\")\n            type += \"(255)\";\n\n        if (type === \"int\")\n            type += \"(11)\";\n\n        if (type === \"tinyint\")\n            type += \"(4)\";\n\n        if (type === \"smallint\")\n            type += \"(5)\";\n\n        if (type === \"mediumint\")\n            type += \"(9)\";\n\n        if (type === \"bigint\")\n            type += \"(20)\";\n\n        if (type === \"year\")\n            type += \"(4)\";\n\n        return type;\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        if (typeof column.default === \"number\") {\n            return \"\" + column.default;\n\n        } else if (typeof column.default === \"boolean\") {\n            return column.default === true ? \"1\" : \"0\";\n\n        } else if (typeof column.default === \"function\") {\n            return column.default();\n\n        } else if (typeof column.default === \"string\") {\n            return `'${column.default}'`;\n\n        } else {\n            return column.default;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\n\n        } catch (e) {\n            try {\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\n\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\n            }\n        }\n    }\n\n}"],"sourceRoot":"../.."}