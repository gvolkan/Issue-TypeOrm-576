{"version":3,"sources":["../../src/decorator/columns/PrimaryGeneratedColumn.ts"],"names":[],"mappings":";;AACA,qCAAmD;AACnD,kGAA+F;AAG/F,0HAA0H;AAE1H;;;;;GAKG;AACH,gCAAuC,OAAuB;IAC1D,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,qHAAqH;QAErH,kEAAkE;QAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,GAAG,EAAmB,CAAC;QAE5C,2GAA2G;QACvG,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,KAAK,EAAkB,EAAE,OAAO,CAAC,CAAC;QAErE,wFAAwF;QACxF,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;YACjB,MAAM,IAAI,uEAAkC,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAEvE,2DAA2D;QAC3D,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAmB,EAAE,OAAO,CAAC,CAAC;QAEtF,4CAA4C;QAC5C,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC;AA3BD,wDA2BC","file":"PrimaryGeneratedColumn.js","sourcesContent":["import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {PrimaryColumnCannotBeNullableError} from \"../error/PrimaryColumnCannotBeNullableError\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n// todo: add overloads for PrimaryGeneratedColumn(generationType: \"sequence\"|\"uuid\" = \"sequence\", options?: ColumnOptions)\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n * This column creates is an alias for @PrimaryColumn(\"int\", { generated: true }).\n */\nexport function PrimaryGeneratedColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // check if there is no type in column options then set the int type - by default for auto generated column\n            options = Object.assign({type: \"int\"} as ColumnOptions, options);\n\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\n\n        // implicitly set a primary and generated to column options\n        options = Object.assign({ primary: true, generated: true } as ColumnOptions, options);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"regular\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n"],"sourceRoot":"../.."}