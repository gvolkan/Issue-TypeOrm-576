{"version":3,"sources":["../../src/query-runner/QueryRunnerProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;GAKG;AACH;IAiBI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,6BAAsB,MAAc,EACd,oBAAqC;QAArC,qCAAA,EAAA,4BAAqC;QADrC,WAAM,GAAN,MAAM,CAAQ;QACd,yBAAoB,GAApB,oBAAoB,CAAiB;IAC3D,CAAC;IAMD,sBAAI,2CAAU;QAJd,4EAA4E;QAC5E,YAAY;QACZ,4EAA4E;aAE5E;YACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,oCAAoC;IAChC,mCAAmC;IACnC,uCAAuC;IACvC,kDAAkD;IAClD,8EAA8E;IAC9E,mEAAmE;IACnE,4DAA4D;IAC5D,uCAAuC;IACvC,iDAAiD;IACjD,sEAAsE;IACtE,kDAAkD;IAClD,sBAAsB;IACtB,YAAY;IACZ,kDAAkD;IAClD,QAAQ;IACR,wDAAwD;IACxD,IAAI;IACJ,0CAA0C;IAC9C,IAAI;IAEJ;;OAEG;IACG,2CAAa,GAAnB;;;gBACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;oBACzB,MAAM,gBAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAC;;;;KACjD;IAEL,0BAAC;AAAD,CAtEA,AAsEC,IAAA;AAtEY,kDAAmB","file":"QueryRunnerProvider.js","sourcesContent":["import {QueryRunner} from \"./QueryRunner\";\nimport {Driver} from \"../driver/Driver\";\n\n/**\n * Represents functionality to provide a new query runners, and release old ones.\n * Also can provide always same query runner.\n *\n * todo: rename to QueryExecutor ?\n */\nexport class QueryRunnerProvider {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    protected reusableQueryRunner: QueryRunner;\n\n    protected reusableQueryRunnerPromise: Promise<QueryRunner>;\n\n    /**\n     * Indicates if this entity manager is released.\n     * Entity manager can be released only if custom queryRunnerProvider is provided.\n     * Once entity manager is released, its repositories and some other methods can't be used anymore.\n     */\n    protected _isReleased: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: Driver,\n                protected useSingleQueryRunner: boolean = false) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get isReleased() {\n        return this._isReleased;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Provides a new query runner used to run repository queries.\n     * If use useSingleQueryRunner mode is enabled then reusable query runner will be provided instead.\n     */\n    // provide(): Promise<QueryRunner> {\n        // if (this.useSingleQueryRunner) {\n        //     if (!this.reusableQueryRunner) {\n        //         if (!this.reusableQueryRunnerPromise) {\n        //             // we do this because this method can be created multiple times\n        //             // this will lead to multiple query runner creations\n        //             this.reusableQueryRunnerPromise = this.driver\n        //                 .createQueryRunner()\n        //                 .then(reusableQueryRunner => {\n        //                     this.reusableQueryRunner = reusableQueryRunner;\n        //                     return reusableQueryRunner;\n        //                 });\n        //         }\n        //         return this.reusableQueryRunnerPromise;\n        //     }\n        //     return Promise.resolve(this.reusableQueryRunner);\n        // }\n        // return this.driver.createQueryRunner();\n    // }\n\n    /**\n     * Releases reused query runner.\n     */\n    async releaseReused(): Promise<void> {\n        this._isReleased = true;\n        if (this.reusableQueryRunner)\n            return this.reusableQueryRunner.release();\n    }\n\n}"],"sourceRoot":".."}