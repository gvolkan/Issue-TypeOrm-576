{"version":3,"sources":["../../src/logger/Logger.ts"],"names":[],"mappings":";;AACA,2DAAwD;AAGxD;;;;GAIG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,gBAAoB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;IAC1C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,yBAAQ,GAAR,UAAS,KAAa,EAAE,UAA2B,EAAE,WAAyB;QAC1E,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU;YACvB,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,sBAAoB,KAAK,IAAG,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,EAAE,CAAE,EAAE,WAAW,CAAC,CAAC;IACjK,CAAC;IAED;;OAEG;IACH,+BAAc,GAAd,UAAe,KAAa,EAAE,UAA2B,EAAE,WAAyB;QAChF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU;YACvB,IAAI,CAAC,OAAO,CAAC,oBAAoB;YACjC,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAiB,KAAK,IAAG,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,EAAE,CAAE,EAAE,WAAW,CAAC,CAAC;IAChK,CAAC;IAED;;OAEG;IACH,8BAAa,GAAb,UAAc,KAAU,EAAE,WAAyB;QAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB;YAChC,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,+BAA+B,GAAG,KAAK,EAAE,WAAW,CAAC,CAAC;IAChF,CAAC;IAED;;OAEG;IACH,+BAAc,GAAd,UAAe,OAAe,EAAE,WAAyB;QACrD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB;YAC9B,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACH,oBAAG,GAAH,UAAI,KAAkC,EAAE,OAAY,EAAE,WAAyB;QAC3E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAAC,MAAM,CAAC;QAE1B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QAErD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACZ,KAAK,KAAK;oBACN,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACrB,KAAK,CAAC;gBACV,KAAK,MAAM;oBACP,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACtB,KAAK,CAAC;gBACV,KAAK,MAAM;oBACP,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACtB,KAAK,CAAC;gBACV,KAAK,OAAO;oBACR,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACvB,KAAK,CAAC;YACd,CAAC;QACL,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;;OAGG;IACO,gCAAe,GAAzB,UAA0B,UAAiB;QACvC,IAAI,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEtC,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;IACL,CAAC;IAEL,aAAC;AAAD,CA/FA,AA+FC,IAAA;AA/FY,wBAAM","file":"Logger.js","sourcesContent":["import {LoggerOptions} from \"./LoggerOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Performs logging of the events in TypeORM.\n *\n * todo: implement logging of too long running queries (there should be option to control max query execution time)\n */\nexport class Logger {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options: LoggerOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters: any[]|undefined, queryRunner?: QueryRunner) {\n        if (this.options.logQueries ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"log\", `executing query: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`, queryRunner);\n    }\n\n    /**\n     * Logs query that failed.\n     */\n    logFailedQuery(query: string, parameters: any[]|undefined, queryRunner?: QueryRunner) {\n        if (this.options.logQueries ||\n            this.options.logOnlyFailedQueries ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"error\", `query failed: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`, queryRunner);\n    }\n\n    /**\n     * Logs failed query's error.\n     */\n    logQueryError(error: any, queryRunner?: QueryRunner) {\n        if (this.options.logFailedQueryError ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"error\", \"error during executing query:\" + error, queryRunner);\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.options.logSchemaCreation ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"info\", message, queryRunner);\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level: \"log\"|\"info\"|\"warn\"|\"error\", message: any, queryRunner?: QueryRunner) {\n        if (!this.options) return;\n\n        if (this.options.logger) {\n            this.options.logger(level, message, queryRunner);\n\n        } else {\n            switch (level) {\n                case \"log\":\n                    console.log(message);\n                    break;\n                case \"info\":\n                    console.info(message);\n                    break;\n                case \"warn\":\n                    console.warn(message);\n                    break;\n                case \"error\":\n                    console.error(message);\n                    break;\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters);\n\n        } catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n\n}"],"sourceRoot":".."}