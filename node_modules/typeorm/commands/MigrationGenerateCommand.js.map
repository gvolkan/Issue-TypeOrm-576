{"version":3,"sources":["../../src/commands/MigrationGenerateCommand.ts"],"names":[],"mappings":"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","file":"MigrationGenerateCommand.js","sourcesContent":["import {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {CommandUtils} from \"./CommandUtils\";\nimport {Connection} from \"../connection/Connection\";\nimport {createConnection} from \"../index\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nconst mkdirp = require(\"mkdirp\");\n\n/**\n * Generates a new migration file with sql needs to be executed to update schema.\n */\nexport class MigrationGenerateCommand {\n\n    command = \"migrations:generate\";\n    describe = \"Generates a new migration file with sql needs to be executed to update schema.\";\n\n    builder(yargs: any) {\n        return yargs\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which run a query.\"\n            })\n            .option(\"n\", {\n                alias: \"name\",\n                describe: \"Name of the migration class.\",\n                demand: true\n            })\n            .option(\"d\", {\n                alias: \"dir\",\n                describe: \"Directory where migration should be created.\"\n            })\n            .option(\"cf\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(argv: any) {\n        const timestamp = new Date().getTime();\n        const filename = timestamp + \"-\" + argv.name + \".ts\";\n        let directory = argv.dir;\n\n        // if directory is not set then try to open tsconfig and find default path there\n        if (!directory) {\n            try {\n                const connectionOptionsReader = new ConnectionOptionsReader({ root: process.cwd(), configName: argv.config });\n                const connectionOptions = await connectionOptionsReader.get(argv.connection);\n                directory = connectionOptions.cli ? connectionOptions.cli.migrationsDir : undefined;\n            } catch (err) { }\n        }\n\n        let connection: Connection|undefined = undefined;\n        try {\n            const connectionOptionsReader = new ConnectionOptionsReader({ root: process.cwd(), configName: argv.config });\n            const connectionOptions = await connectionOptionsReader.get(argv.connection);\n            Object.assign(connectionOptions, {\n                dropSchemaOnConnection: false,\n                autoSchemaSync: false,\n                autoMigrationsRun: false,\n                logging: { logQueries: false, logFailedQueryError: false, logSchemaCreation: false }\n            });\n            connection = await createConnection(connectionOptions);\n            const sqlQueries = await connection.logSyncSchema();\n            const upSqls: string[] = [], downSqls: string[] = [];\n\n            // mysql is exceptional here because it uses ` character in to escape names in queries, thats why for mysql\n            // we are using simple quoted string instead of template string sytax\n            if (connection.driver instanceof MysqlDriver) {\n                sqlQueries.forEach(query => {\n                    const queryString = typeof query === \"string\" ? query : query.up;\n                    upSqls.push(\"        await queryRunner.query(\\\"\" + queryString.replace(new RegExp(`\"`, \"g\"), `\\\\\"`) + \"\\\");\");\n                    if (typeof query !== \"string\" && query.down)\n                        downSqls.push(\"        await queryRunner.query(\\\"\" + query.down.replace(new RegExp(`\"`, \"g\"), `\\\\\"`) + \"\\\");\");\n                });\n            } else {\n                sqlQueries.forEach(query => {\n                    const queryString = typeof query === \"string\" ? query : query.up;\n                    upSqls.push(\"        await queryRunner.query(`\" + queryString.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") + \"`);\");\n                    if (typeof query !== \"string\" && query.down)\n                        downSqls.push(\"        await queryRunner.query(`\" + query.down.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") + \"`);\");\n                });\n            }\n            const fileContent = MigrationGenerateCommand.getTemplate(argv.name, timestamp, upSqls, downSqls.reverse());\n            const path = process.cwd() + \"/\" + (directory ? (directory + \"/\") : \"\") + filename;\n            await CommandUtils.createFile(path, fileContent);\n\n            if (upSqls.length) {\n                console.log(`Migration \"${path}\" has been generated successfully.`);\n            } else {\n                console.error(`No changes in database schema were found - cannot generate a migration. To create a new empty migration use \"typeorm migrations:create\" command`);\n            }\n\n        } catch (err) {\n            console.error(err);\n            // throw err;\n\n        } finally {\n            if (connection)\n                await connection.close();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets contents of the migration file.\n     */\n    protected static getTemplate(name: string, timestamp: number, upSqls: string[], downSqls: string[]): string {\n        return `import {Connection, EntityManager, MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class ${name}${timestamp} implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise<any> {\n${upSqls.join(`\n`)}\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<any> {\n${downSqls.join(`\n`)}\n    }\n\n}\n`;\n    }\n\n}"],"sourceRoot":".."}