{"version":3,"sources":["../../src/commands/SchemaDropCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAA6D;AAE7D,iFAA8E;AAE9E;;GAEG;AACH;IAAA;QACI,YAAO,GAAG,aAAa,CAAC;QACxB,aAAQ,GAAG,iFAAiF;YACxF,kEAAkE,CAAC;IA8C3E,CAAC;IA5CG,mCAAO,GAAP,UAAQ,KAAU;QACd,MAAM,CAAC,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,qDAAqD;SAClE,CAAC;aACD,MAAM,CAAC,IAAI,EAAE;YACV,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,mCAAO,GAAb,UAAc,IAAS;;gBAEf,UAAU,EAAoC,WAAW,EAKnD,uBAAuB;;;;qCALM,SAAS,gBAA8B,EAAE;;;;wBAE5E,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAAC;wBAC1C,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,IAAI,CAAC;kDAER,IAAI,iDAAuB,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;6BACzG,IAAI,CAAC,UAAU,EAAf,wBAAe;wBACW,qBAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,EAAA;;4CAAlD,SAAkD;wBAC/D,qBAAM,wBAAgB,CAAC,iBAAiB,CAAC,EAAA;;wBAAtD,UAAU,GAAG,SAAyC,CAAC;wBACvD,qBAAM,UAAU,CAAC,YAAY,EAAE,EAAA;;wBAA/B,SAA+B,CAAC;;4BAGN,qBAAM,uBAAuB,CAAC,GAAG,EAAE,EAAA;;4CAAnC,SAAmC;wBAC/C,qBAAM,yBAAiB,CAAC,iBAAiB,CAAC,EAAA;;wBAAxD,WAAW,GAAG,SAA0C,CAAC;wBACzD,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,YAAY,EAAE,EAAzB,CAAyB,CAAC,CAAC,EAAA;;wBAA3E,SAA2E,CAAC;;;;;wBAIhF,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;;;6BAIf,UAAU,EAAV,yBAAU;wBACV,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;6BAE7B,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,KAAK,EAAE,EAAlB,CAAkB,CAAC,CAAC,EAAA;;wBAApE,SAAoE,CAAC;;;;;;KAE5E;IACL,wBAAC;AAAD,CAjDA,AAiDC,IAAA;AAjDY,8CAAiB","file":"SchemaDropCommand.js","sourcesContent":["import {createConnections, createConnection} from \"../index\";\nimport {Connection} from \"../connection/Connection\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\n\n/**\n * Drops all tables of the database from the given connection.\n */\nexport class SchemaDropCommand {\n    command = \"schema:drop\";\n    describe = \"Drops all tables in the database. It drops tables on all connections you have. \" +\n        \"To drop table of a concrete connection's database use -c option.\";\n\n    builder(yargs: any) {\n        return yargs\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which to drop all tables.\"\n            })\n            .option(\"cf\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(argv: any) {\n\n        let connection: Connection|undefined = undefined, connections: Connection[] = [];\n        try {\n            process.env.LOGGER_CLI_SCHEMA_SYNC = true;\n            process.env.SKIP_SCHEMA_CREATION = true;\n\n            const connectionOptionsReader = new ConnectionOptionsReader({ root: process.cwd(), configName: argv.config });\n            if (argv.connection) {\n                const connectionOptions = await connectionOptionsReader.get(argv.connection);\n                connection = await createConnection(connectionOptions);\n                await connection.dropDatabase();\n\n            } else {\n                const connectionOptions = await connectionOptionsReader.all();\n                connections = await createConnections(connectionOptions);\n                await Promise.all(connections.map(connection => connection.dropDatabase()));\n            }\n\n        } catch (err) {\n            console.error(err);\n            // throw err;\n\n        } finally {\n            if (connection)\n                await connection.close();\n\n            await Promise.all(connections.map(connection => connection.close()));\n        }\n    }\n}"],"sourceRoot":".."}